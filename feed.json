{
    "version": "https://jsonfeed.org/version/1",
    "title": "枫",
    "subtitle": "为国民幸福而国家富强",
    "icon": "https://blog.fxink.cn/assets/favicon.ico",
    "description": "谁是我们的敌人？谁是我们的朋友？",
    "home_page_url": "https://blog.fxink.cn",
    "items": [
        {
            "id": "https://blog.fxink.cn/java-interview-2024-12-06-huya/",
            "url": "https://blog.fxink.cn/java-interview-2024-12-06-huya/",
            "title": "虎牙日常实习",
            "date_published": "2025-02-01T15:13:50.301Z",
            "content_html": "<h1 id=\"虎牙一面\"><a class=\"anchor\" href=\"#虎牙一面\">#</a> 虎牙一面</h1>\n<ol>\n<li>优惠券是从哪里来的？</li>\n<li>优惠券是怎么进行结算服务的？</li>\n<li>优惠券是如何进行锁定、核销的？</li>\n<li>系统的 api 调用在哪里？</li>\n<li>优惠券分发是怎么实现的？用户优惠券保存在哪里？</li>\n<li>高并发情况下的用户预约提醒，如何做到海量用户的提醒呢？</li>\n<li>用户怎么知道自己优惠券的状态？比如是否过期</li>\n<li>用户兑换优惠券的逻辑？</li>\n<li>用户兑换优惠券如何保证缓存和数据库的一致性？</li>\n<li>如何解决幂等性？除了在 Redis, 在数据库如何解决幂等？</li>\n<li>HTTP 报文？</li>\n<li>HTTP 有状态吗？</li>\n<li>如何防止重复统计网站用户？</li>\n<li>Cookie 和 Session 介绍一下</li>\n<li>你怎么部署项目上线的服务器呀？</li>\n<li>短链接生成逻辑是什么？</li>\n<li>怎么进行压测的？</li>\n<li>短链接怎么统计这些信息的呀？</li>\n<li>短链接跳转如何保证数据统计正确？</li>\n<li>口述算法\n<ul>\n<li><img loading=\"lazy\" data-src=\"algo1.png\" alt=\"algo1\" /></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"虎牙二面\"><a class=\"anchor\" href=\"#虎牙二面\">#</a> 虎牙二面</h1>\n<ol>\n<li>从两个项目中挑两到三个你觉得项目的两点介绍一下</li>\n<li>口述多叉树构造、遍历算法</li>\n</ol>\n",
            "tags": [
                "Java",
                "虎牙面试",
                "Interview"
            ]
        },
        {
            "id": "https://blog.fxink.cn/java-coupon-2024-11-28-MapleCoupon/",
            "url": "https://blog.fxink.cn/java-coupon-2024-11-28-MapleCoupon/",
            "title": "Maple-Coupon",
            "date_published": "2025-02-01T15:13:50.293Z",
            "content_html": "<h1 id=\"maple-coupon\"><a class=\"anchor\" href=\"#maple-coupon\">#</a> Maple-Coupon</h1>\n<h2 id=\"兑换秒杀优惠券\"><a class=\"anchor\" href=\"#兑换秒杀优惠券\">#</a> 兑换秒杀优惠券</h2>\n<h2 id=\"难点\"><a class=\"anchor\" href=\"#难点\">#</a> 难点</h2>\n<ul>\n<li>优惠券的兑换 / 秒杀都需要考虑到如下几个问题\n<ul>\n<li>秒杀的时候 海量并发问题</li>\n<li>优惠券的库存超卖问题</li>\n<li>用户兑换优惠券的幂等性问题</li>\n<li>用户兑换优惠券的超领问题</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h3>\n<ul>\n<li>redis 是单线程的，所以可以保证在并发情况下，不会出现线程安全问题</li>\n<li>优惠券的库存超卖问题，可以使用 Redis 的原子操作来解决，使用 lua 脚本对优惠券缓存的库存校验</li>\n<li>优惠券会有限领规则，使用 json 格式存储，在 java 中可以使用 <code>fastjson</code>  来解析 json 字符串，将参数传递到 lua 脚本中，在优惠券库存校验完成后就进行用户限领规则校验</li>\n<li>幂等问题其实在用户领取优惠券的时候就解决了，因为用户优惠券会有唯一标识，获取该数据后兑换到上限即可<br />\n<img loading=\"lazy\" data-src=\"image1.png\" alt=\"1\" /></li>\n<li>优惠券库存在 MySQL 修改时会加上行级锁，所以可以保证在并发情况下，不会出现线程安全问题，只需在 SQL 语句中 WHERE 条件中加上库存校验即可</li>\n<li>用户优惠券保存到 MySQL 时，会加上唯一索引，所以可以保证在并发情况下，不会出现超领问题</li>\n</ul>\n<h3 id=\"v1版本-非并发情况-用户兑换优惠券\"><a class=\"anchor\" href=\"#v1版本-非并发情况-用户兑换优惠券\">#</a> v1 版本 ---- 非并发情况 用户兑换优惠券</h3>\n<ul>\n<li>该情况不会涉及到并发问题，所以比较简单，直接将用户优惠券保存到 MySQL 即可，使用 Canal 监听 MySQL 的 binlog 日志，将用户优惠券保存到 Redis 中，保证数据一致性，最后使用 MQ 发送延时消息，将用户优惠券结束后在 MySQL 中软删除</li>\n<li>为了避免保存到 redis 时出现异常，使用写后查询策略确保数据一致性</li>\n<li>为了保证消息可靠性，使用 MQ 的重试机制，将消息发送到死信队列，再由死信队列重新发送到消息队列<br />\n<img loading=\"lazy\" data-src=\"image2.png\" alt=\"2\" /></li>\n</ul>\n<h3 id=\"v2版本-高并发情况-用户秒杀优惠券\"><a class=\"anchor\" href=\"#v2版本-高并发情况-用户秒杀优惠券\">#</a> v2 版本 ---- 高并发情况 用户秒杀优惠券</h3>\n<ul>\n<li>大量用户争抢少量资源，用户对结果的实时性要求高，所以不能将 MySQL 操作合并在一起，考虑使用消息队列解耦</li>\n<li>兑换主要分为 Redis 层面和 MySQL 层面，Redis 层面的兑换会很快，考虑将此操作作为上游，结束后立马响应用户，下游 MySQL 层面的兑换以及数据一致性保证</li>\n<li>RocketMQ 的顺序消息可以保证消息的顺序性，所以可以使用 RocketMQ 的顺序消息，将用户优惠券的兑换操作作为下游，保证消息的顺序性，而 MQ 有很好的削峰填谷特性，可以保证高并发下的系统稳定性</li>\n<li>因为后续的操作就是系统层面保证数据一致性即可，所以不再使用 Canal 监听 MySQL 的 binlog 日志，而是使用 MQ 的回调机制，将用户优惠券保存到 Redis 中，保证数据一致性</li>\n</ul>\n<h2 id=\"压测\"><a class=\"anchor\" href=\"#压测\">#</a> 压测</h2>\n<h3 id=\"单线程查询可用不可用优惠券\"><a class=\"anchor\" href=\"#单线程查询可用不可用优惠券\">#</a> 单线程查询可用 / 不可用优惠券</h3>\n<p><img loading=\"lazy\" data-src=\"coupon1.png\" alt=\"coupon1\" /><br />\n<img loading=\"lazy\" data-src=\"coupon2.png\" alt=\"coupon2\" /></p>\n<h3 id=\"多线程查询可用不可用优惠券\"><a class=\"anchor\" href=\"#多线程查询可用不可用优惠券\">#</a> 多线程查询可用 / 不可用优惠券</h3>\n<p><img loading=\"lazy\" data-src=\"coupon3.png\" alt=\"coupon4\" /></p>\n<h3 id=\"优惠券秒杀tps\"><a class=\"anchor\" href=\"#优惠券秒杀tps\">#</a> 优惠券秒杀 TPS</h3>\n<p><img loading=\"lazy\" data-src=\"coupon4.png\" alt=\"coupon4\" /></p>\n<h3 id=\"分发优惠券耗时\"><a class=\"anchor\" href=\"#分发优惠券耗时\">#</a> 分发优惠券耗时</h3>\n<blockquote>\n<p>100w 优惠券，耗时：3min</p>\n</blockquote>\n",
            "tags": [
                "Java",
                "MapleCoupon",
                "Java, MapleCoupon"
            ]
        },
        {
            "id": "https://blog.fxink.cn/java-collection-HashMap/",
            "url": "https://blog.fxink.cn/java-collection-HashMap/",
            "title": "HashMap",
            "date_published": "2025-02-01T15:13:50.281Z",
            "content_html": "<h1 id=\"hashmap\"><a class=\"anchor\" href=\"#hashmap\">#</a> HashMap</h1>\n<h2 id=\"hashmap重要属性\"><a class=\"anchor\" href=\"#hashmap重要属性\">#</a> HashMap 重要属性</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认初始容量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// aka 16</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 最大容量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 默认负载因子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 链表转红黑树的阈值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 红黑树转链表的阈值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">UNTREEIFY_THRESHOLD</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 链表转红黑树的最小容量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MIN_TREEIFY_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 存储数据的数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Q：为什么容量必须是 2 的 n 次方？</li>\n</ul>\n<blockquote>\n<ol>\n<li>HashMap 为了提升性能，使用位运算来计算索引，如果容量是 2 的 n 次方，那么索引计算公式 (n-1) &amp; hash，相当于取 hash 的低 n 位，这样计算效率更高</li>\n<li>在计算索引的时候，根据 hashcode 高位是否为 1，和容量 &amp; 运算时，如果原容量高位为 0，<strong>不发生移动</strong>，如果为 1 则移动到<strong>原索引 + 原容量</strong>的新位置，最好情况保证一半在数组前半部分，另一半在数组后半部分，数据更加均匀了！</li>\n</ol>\n</blockquote>\n<h2 id=\"hashmap扩容resize\"><a class=\"anchor\" href=\"#hashmap扩容resize\">#</a> HashMap 扩容 resize ()</h2>\n<p><img loading=\"lazy\" data-src=\"resize.png\" alt=\"resize\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 遍历原数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 将原数组置为 null，防止内存泄漏</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 如果原数组该位置只有一个元素，直接放到新数组中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    newTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 如果原数组该位置是红黑树，则进行红黑树拆分</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果原数组该位置是链表，则进行链表拆分</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">// 低位链表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> loHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 高位链表</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hiHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token comment\">// 遍历链表 重新计算索引</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token comment\">// 如果运算结果为 0，则放到低位链表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                                loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                            loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token comment\">// 如果运算结果不为 0，则放到高位链表</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                                hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token comment\">// 将低位链表放到新数组中 低位链表索引为原索引</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token comment\">// 将高位链表放到新数组中 高位链表索引为原索引 + 原容量</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "Java集合",
                "Java, Java集合"
            ]
        },
        {
            "id": "https://blog.fxink.cn/golang-gobase-golangbase/",
            "url": "https://blog.fxink.cn/golang-gobase-golangbase/",
            "title": "golang模块管理",
            "date_published": "2025-02-01T15:13:50.272Z",
            "content_html": "<h2 id=\"模块管理\"><a class=\"anchor\" href=\"#模块管理\">#</a> 模块管理</h2>\n<blockquote>\n<p>GOPATH 模式不方便管理多个项目模块，所以 go1.11 引入了 go mod 模块管理工具，go mod 可以方便的下载依赖包，并且可以指定依赖包的版本</p>\n</blockquote>\n<h3 id=\"go-mod\"><a class=\"anchor\" href=\"#go-mod\">#</a> go mod</h3>\n<ol>\n<li>开启 go mod</li>\n</ol>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">go</span> env <span class=\"token operator\">-</span>w GO111MODULE<span class=\"token operator\">=</span>on</pre></td></tr></table></figure><ol start=\"2\">\n<li>在任意文件夹下 go mod init 项目名</li>\n</ol>\n<blockquote>\n<p>go mod init 初始化一个 go mod 项目，会生成一个 go.mod 文件，记录项目依赖包的版本信息</p>\n</blockquote>\n<ol start=\"3\">\n<li>下载模块依赖\n<ol>\n<li>go mod tidy\n<blockquote>\n<p>go mod tidy 会自动下载项目依赖包，并且会自动删除项目不再使用的依赖包</p>\n</blockquote>\n</li>\n<li>go get 依赖包名 @版本号\n<blockquote>\n<p>go get 依赖包名 @版本号会下载指定版本的依赖包，并且会自动更新 go.mod 文件</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>aceld<span class=\"token operator\">/</span>zinx<span class=\"token operator\">/</span>ziface</pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>执行命令后会自动下载依赖包，并且会自动更新 go.mod 文件和 go.sum 文件</p>\n</blockquote>\n<ul>\n<li>go.mod 文件</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module mapleplus<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>moudle<span class=\"token operator\">/</span>one</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">go</span> <span class=\"token number\">1.23</span><span class=\"token number\">.4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>require <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tgithub<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>gorilla<span class=\"token operator\">/</span>websocket v1<span class=\"token punctuation\">.</span><span class=\"token number\">5.0</span> <span class=\"token comment\">// indirect</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tgithub<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>klauspost<span class=\"token operator\">/</span>cpuid<span class=\"token operator\">/</span>v2 v2<span class=\"token punctuation\">.</span><span class=\"token number\">1.1</span> <span class=\"token comment\">// indirect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>indirect: 表示该依赖包是间接依赖，即为某个大依赖包下的子包</p>\n</blockquote>\n<ul>\n<li>go.sum 文件</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>BurntSushi<span class=\"token operator\">/</span>toml v0<span class=\"token punctuation\">.</span><span class=\"token number\">3.1</span><span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">.</span>mod h1<span class=\"token punctuation\">:</span>xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tgithub<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>aceld<span class=\"token operator\">/</span>zinx v1<span class=\"token punctuation\">.</span><span class=\"token number\">2.6</span> h1<span class=\"token punctuation\">:</span>NYlcQ5OzjhxYXOsVNUzjCchry5A8fjCDHVrI9jMX7jk<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr></table></figure><blockquote>\n<p>go.sum 文件记录了项目依赖包的版本信息，以及依赖包的哈希值，用于验证依赖包的完整性</p>\n</blockquote>\n<h3 id=\"zinx框架\"><a class=\"anchor\" href=\"#zinx框架\">#</a> zinx 框架</h3>\n<ul>\n<li>zinx 框架是一个基于 go 语言编写的轻量级网络通信框架，用于快速开发高性能的网络应用程序</li>\n<li>zinx 框架的 github 地址：<a href=\"https://github.com/aceld/zinx\">https://github.com/aceld/zinx</a></li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"github.com/aceld/zinx/ziface\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"github.com/aceld/zinx/znet\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// PingRouter MsgId=1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> PingRouter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tznet<span class=\"token punctuation\">.</span>BaseRouter</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Ping Handle MsgId=1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>PingRouter<span class=\"token punctuation\">)</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>request ziface<span class=\"token punctuation\">.</span>IRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//read client data</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv from client : msgId=\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">GetMsgID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\", data=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//1 Create a server service</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\ts <span class=\"token operator\">:=</span> znet<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//2 configure routing</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">AddRouter</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>PingRouter<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//3 start service</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS E<span class=\"token punctuation\">:</span>\\GO\\<span class=\"token keyword\">go</span>\\moudle_test<span class=\"token operator\">></span> <span class=\"token keyword\">go</span> run <span class=\"token punctuation\">.</span>\\main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>ERROR<span class=\"token punctuation\">]</span>globalobj<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">144</span><span class=\"token punctuation\">:</span> Config File E<span class=\"token punctuation\">:</span>\\GO\\<span class=\"token keyword\">go</span>\\moudle_test\\conf\\zinx<span class=\"token punctuation\">.</span>json is not exist<span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> You can set configFile by setting the environment variable ZINX_CONFIG_FILE_PATH<span class=\"token punctuation\">,</span> like export ZINX_CONFIG_FILE_PATH <span class=\"token operator\">=</span> xxx<span class=\"token operator\">/</span>xxx<span class=\"token operator\">/</span>zinx<span class=\"token punctuation\">.</span>conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              ██</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              ▀▀</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ████████   ████     ██▄████▄  ▀██  ██▀</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     ▄█▀      ██     ██▀   ██    ████</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ▄█▀        ██     ██    ██    ▄██▄</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> ▄██▄▄▄▄▄  ▄▄▄██▄▄▄  ██    ██   ▄█▀▀█▄</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> ▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀  ▀▀    ▀▀  ▀▀▀  ▀▀▀</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>┌──────────────────────────────────────────────────────┐        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│ <span class=\"token punctuation\">[</span>Github<span class=\"token punctuation\">]</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>aceld                    │        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>│ <span class=\"token punctuation\">[</span>tutorial<span class=\"token punctuation\">]</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>yuque<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>aceld<span class=\"token operator\">/</span>npyr8s<span class=\"token operator\">/</span>bgftov │        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>│ <span class=\"token punctuation\">[</span>document<span class=\"token punctuation\">]</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>yuque<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>aceld<span class=\"token operator\">/</span>tsgooa        │        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>└──────────────────────────────────────────────────────┘        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>Zinx<span class=\"token punctuation\">]</span> Version<span class=\"token punctuation\">:</span> V1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> MaxConn<span class=\"token punctuation\">:</span> <span class=\"token number\">12000</span><span class=\"token punctuation\">,</span> MaxPacketSize<span class=\"token punctuation\">:</span> <span class=\"token number\">4096</span>       </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> Zinx Global Config <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Host<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>TCPPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8999</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>WsPort<span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Name<span class=\"token punctuation\">:</span> ZinxServerApp</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>KcpPort<span class=\"token punctuation\">:</span> <span class=\"token number\">9001</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>KcpACKNoDelay<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>KcpStreamMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>KcpNoDelay<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>KcpInterval<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>KcpResend<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>KcpNc<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>KcpSendWindow<span class=\"token punctuation\">:</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>KcpRecvWindow<span class=\"token punctuation\">:</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>KcpFecDataShards<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>KcpFecParityShards<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Version<span class=\"token punctuation\">:</span> V1<span class=\"token punctuation\">.</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>MaxPacketSize<span class=\"token punctuation\">:</span> <span class=\"token number\">4096</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>MaxConn<span class=\"token punctuation\">:</span> <span class=\"token number\">12000</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>WorkerPoolSize<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>MaxWorkerTaskLen<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>WorkerMode<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>MaxMsgChanLen<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>IOReadBuffSize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Mode<span class=\"token punctuation\">:</span> tcp</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>RouterSlicesMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>RequestPoolMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>LogDir<span class=\"token punctuation\">:</span> E<span class=\"token punctuation\">:</span>\\GO\\<span class=\"token keyword\">go</span>\\moudle_test<span class=\"token operator\">/</span>log</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>LogFile<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>LogSaveDays<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>LogFileSize<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>LogCons<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>LogIsolationLevel<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>HeartbeatMax<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>CertFile<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>PrivateKeyFile<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">244</span><span class=\"token punctuation\">:</span> Add Router msgID <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span>server<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">420</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>START<span class=\"token punctuation\">]</span> Server name<span class=\"token punctuation\">:</span> ZinxServerApp<span class=\"token punctuation\">,</span>listener at IP<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> Port <span class=\"token number\">8999</span> is starting      </pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">0</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">6</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">1</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">3</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">2</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">8</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">7</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">9</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">4</span> is started<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token number\">2024</span><span class=\"token operator\">/</span><span class=\"token number\">12</span><span class=\"token operator\">/</span><span class=\"token number\">09</span> <span class=\"token number\">22</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span>msghandler<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span><span class=\"token punctuation\">:</span><span class=\"token number\">286</span><span class=\"token punctuation\">:</span> Worker ID <span class=\"token operator\">=</span> <span class=\"token number\">5</span> is started<span class=\"token punctuation\">.</span></pre></td></tr></table></figure>",
            "tags": [
                "golang",
                "GO基础",
                "golang"
            ]
        },
        {
            "id": "https://blog.fxink.cn/computer-software-software-engineering/",
            "url": "https://blog.fxink.cn/computer-software-software-engineering/",
            "title": "软件工程导论",
            "date_published": "2025-02-01T15:13:50.267Z",
            "content_html": "<ol>\n<li>\n<p>软件定义</p>\n<ol>\n<li>软件是计算机系统中由一系列按照特定顺序组织的指令、数据和相关文档组成的集合</li>\n</ol>\n</li>\n<li>\n<p>软件危机的定义 表现 原因</p>\n<ol>\n<li>软件危机的定义：软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题</li>\n<li>表现\n<ol>\n<li>对软件开发成本和进度的估计常常很不准确</li>\n<li>经常出现用户对 “已完成的” 软件系统功能不满意的现象</li>\n<li>软件产品的质量往往达不到要求</li>\n<li>软件通常不可维护</li>\n<li>软件通常没有适当的文档资料</li>\n<li>软件成本在计算机系统总成本中所占的比例逐年上升</li>\n<li>软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</li>\n</ol>\n</li>\n<li>原因\n<ol>\n<li>软件缺乏 “可见性”</li>\n<li>软件缺乏 “可插拔性”</li>\n<li>保证每个人完成的工作构成一个高质量的大型软件系统，是一个极端复杂困难的问题</li>\n<li>忽视需求分析只重视编码与运行</li>\n<li>忽视文档只重视程序</li>\n<li>轻视维护是一个最大的错误</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>软件工程定义、工程方法学三要素</p>\n<ol>\n<li>软件工程定义：把系统的、规范的、可度量的途径应用于软件开发、运行和维护过程；研究系统的、规范的、可度量的途径</li>\n<li>软件工程方法学包含 3 个要素：方法、工具和过程</li>\n</ol>\n</li>\n<li>\n<p>软件工程七原理</p>\n<ol>\n<li>\n<p>用分阶段的生命周期计划严格管理</p>\n</li>\n<li>\n<p>坚持进行阶段评审</p>\n</li>\n<li>\n<p>实行严格的产品控制</p>\n</li>\n<li>\n<p>采用现代程序设计技术</p>\n</li>\n<li>\n<p>结果应能清楚地审查</p>\n</li>\n<li>\n<p>开发小组的人员应该少而精</p>\n</li>\n<li>\n<p>承认不断改进软件工程实践的必要性</p>\n</li>\n</ol>\n</li>\n<li>\n<p>软件生命周期三大阶段八小阶段</p>\n<ol>\n<li>三大阶段：问题定义阶段、可行性研究阶段和需求分析阶段</li>\n<li>八小阶段：问题定义 可行性研究 需求分析 总体设计 详细设计 编码和单元测试 综合测试 软件维护</li>\n</ol>\n</li>\n<li>\n<p>常见的软件开发模型有哪些？各有什么特点、优缺点？</p>\n<ol>\n<li>瀑布模型\n<ol>\n<li>阶段间具有顺序性和依赖性</li>\n<li>推迟实现</li>\n<li>质量保证</li>\n</ol>\n</li>\n<li>快速原型模型\n<ol>\n<li>快速建立一个能反映用户主要需求的原型系统，让用户在计算机上试用它，通过实践来了解目标系统的概貌</li>\n</ol>\n</li>\n<li>增量模型\n<ol>\n<li>能在较短时间内向用户提交可完成部分工作的产品</li>\n<li>逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品</li>\n</ol>\n</li>\n<li>螺旋模型\n<ol>\n<li>螺旋模型以风险管理为核心，兼顾用户反馈和迭代开发，是一种灵活且具有较高可靠性的开发方法，适合高复杂度、高风险的项目开发</li>\n</ol>\n</li>\n<li><img loading=\"lazy\" data-src=\"image-20241221094808744.png\" alt=\"软件开发模型\" /></li>\n</ol>\n</li>\n<li>\n<p>可行性研究的基本任务是什么？</p>\n<ol>\n<li>用最小的代价在尽可能短的时间内确定问题是否能够解决</li>\n</ol>\n</li>\n<li>\n<p>可行性研究有哪三个角度？</p>\n<ol>\n<li>技术 经济 操作</li>\n</ol>\n</li>\n<li>\n<p>可行性研究结束后的文档是什么？</p>\n<ol>\n<li>可行性研究报告</li>\n</ol>\n</li>\n<li>\n<p>系统流程图、数据流图、数据字典各是描绘系统的什么模型？</p>\n<ol>\n<li>物理模型 数据流图和数据字典共同定义了系统的逻辑模型</li>\n</ol>\n</li>\n<li>\n<p>软件开发成本估计有哪三种方法？</p>\n<ol>\n<li>自顶向下估算法</li>\n<li>自底向上估算法</li>\n<li>类比估算法</li>\n</ol>\n</li>\n<li>\n<p>经济效益分析有哪几个经济指标？</p>\n<ol>\n<li>货币的时间价值</li>\n<li>投资回收期</li>\n<li>纯收入</li>\n<li>投资回收率</li>\n</ol>\n</li>\n<li>\n<p>需求分析的基本任务是什么？</p>\n<ol>\n<li>准确地回答 “系统必须做什么”</li>\n</ol>\n</li>\n<li>\n<p>需求分析结束提交的文档叫什么名字？</p>\n<ol>\n<li>软件需求规格说明书</li>\n</ol>\n</li>\n<li>\n<p>需求分析的任务有哪些？</p>\n<ol>\n<li>确定对系统的综合要求</li>\n<li>分析系统的数据要求</li>\n<li>导出系统的逻辑模型</li>\n<li>修正系统开发计划</li>\n</ol>\n</li>\n<li>\n<p>需求分析阶段，系统的综合要求需求有哪些</p>\n<ol>\n<li>功能需求</li>\n<li>性能需求</li>\n<li>可靠性、可用性、安全性、保密性等需求</li>\n<li>出错处理需求</li>\n<li>接口需求</li>\n<li>约束、逆向需求</li>\n<li>将来可能提出的要求</li>\n</ol>\n</li>\n<li>\n<p>软件设计从技术的角度有哪三种内容？从管理的角度分为哪两种阶段？</p>\n<ol>\n<li>从技术的角度：数据设计 系统结构设计 过程设计</li>\n<li>从管理的角度：总体设计 详细设计</li>\n</ol>\n</li>\n<li>\n<p>总体设计有哪两个任务？</p>\n<ol>\n<li>划分出组成系统的物理元素</li>\n<li>设计软件的结构</li>\n</ol>\n</li>\n<li>\n<p>总体设计阶段提交的文档叫什么？</p>\n<ol>\n<li>总体设计说明书</li>\n</ol>\n</li>\n<li>\n<p>设计原理有哪些？</p>\n<ol>\n<li>模块化</li>\n<li>抽象</li>\n<li>逐步求精</li>\n<li>信息隐藏和局部化</li>\n<li>模块独立</li>\n</ol>\n</li>\n<li>\n<p>Miller 法则：一个人在任何时候都只能把注意力集中在多少<br />\n个知识块上？</p>\n<ol>\n<li>（7±2）个知识块</li>\n</ol>\n</li>\n<li>\n<p>模块的独立程度的两个定性标准度量是什么？</p>\n<ol>\n<li>内聚和耦合</li>\n</ol>\n</li>\n<li>\n<p>三种基本的程序控制结构是什么</p>\n<ol>\n<li>顺序结构 选择结构 循环结构</li>\n</ol>\n</li>\n<li>\n<p>程序编码风格是什么？包括哪些方面？</p>\n<ol>\n<li>编写程序时所表现出来的特点、习惯、逻辑思路等</li>\n<li>符号名的命名 程序的注释  数据说明 语句构造 输入输出 效率</li>\n</ol>\n</li>\n<li>\n<p>测试有哪三个阶段，有哪两种方法？</p>\n<ol>\n<li>单元测试 集成测试 系统测试</li>\n<li>黑盒测试：又叫功能测试 白盒测试：又叫结构测试</li>\n</ol>\n</li>\n<li>\n<p>软件生存周期中时间最长的一个阶段是？</p>\n<ol>\n<li>维护阶段</li>\n</ol>\n</li>\n<li>\n<p>软件维护的内容有哪四种？</p>\n<ol>\n<li>改正性维护</li>\n<li>适应性维护</li>\n<li>完善性维护</li>\n<li>预防性维护</li>\n</ol>\n</li>\n<li>\n<p>用例图、类图、时序图的作用是什么？有哪些主要的元素？</p>\n<ol>\n<li>\n<p>作用：建立功能模型 建立静态模型 强调消息的时间次序</p>\n</li>\n<li>\n<p>用例图</p>\n<ol>\n<li>\n<p><strong>参与者</strong>：外部交互实体，如用户或其他系统</p>\n</li>\n<li>\n<p><strong>用例</strong>：系统的具体功能</p>\n</li>\n<li>\n<p><strong>系统边界</strong>：用矩形框划定系统范围</p>\n</li>\n<li>\n<p><strong>关系</strong>：</p>\n<ul>\n<li>\n<p>关联关系</p>\n</li>\n<li>\n<p>包含关系</p>\n</li>\n<li>\n<p>扩展关系</p>\n</li>\n<li>\n<p>泛化关系</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>备注</strong>：补充说明</p>\n</li>\n</ol>\n</li>\n<li>\n<p>类图</p>\n<ol>\n<li><strong>类</strong>：类名、属性、方法</li>\n<li><strong>接口</strong>：方法集合</li>\n<li><strong>关系</strong>：关联、依赖、泛化、实现、聚合、组合</li>\n<li><strong>多重性</strong>：表示关联的实例数量</li>\n<li><strong>可见性</strong>：定义属性和方法的访问权限</li>\n</ol>\n</li>\n<li>\n<p>时序图</p>\n<ol>\n<li><strong>角色和对象</strong>：表示交互的实体</li>\n<li><strong>生命线</strong>：表示对象的生命周期</li>\n<li><strong>控制焦点</strong>：表示对象的活动状态</li>\n<li><strong>消息</strong>：表示对象之间的交互行为（包括同步、异步、返回消息等）</li>\n<li><strong>条件与循环</strong>：表示控制逻辑</li>\n<li><strong>备注</strong>：提供额外的信息说明</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "软件工程",
                "软件工程"
            ]
        },
        {
            "id": "https://blog.fxink.cn/java-shortlink-2024-11-28-shortlink/",
            "url": "https://blog.fxink.cn/java-shortlink-2024-11-28-shortlink/",
            "title": "枫短链",
            "date_published": "2024-11-28T08:24:46.000Z",
            "content_html": "<h1 id=\"枫短链\"><a class=\"anchor\" href=\"#枫短链\">#</a> 枫短链</h1>\n<h2 id=\"为什么说布隆过滤器性能远胜于分布式锁\"><a class=\"anchor\" href=\"#为什么说布隆过滤器性能远胜于分布式锁\">#</a> 为什么说布隆过滤器性能远胜于分布式锁？</h2>\n<h3 id=\"分布式锁锁短链接创建的全过程\"><a class=\"anchor\" href=\"#分布式锁锁短链接创建的全过程\">#</a> 分布式锁锁短链接创建的全过程</h3>\n<p>● 因为短链接创建过程中 如果多个请求创建的短链接一致 同时在数据库查询校验刚好都通过 然后并发插入数据，只会有一条记录成功 其他记录失败 失败的记录会重新创建短链接，而且这种情况可能发生多次 对用户体验不好 系统设计也不良 所以加入分布式锁 使创建的短链接唯一 这样会并发不高 如果不使用分布式锁 压力全给到数据库 但是系统不是只有创建短链一个业务 还会有监控统计、回收站等功能 在千万甚至上亿数据量时性能会下降很多 数据库的压力倍增<br />\n● 因此考虑使用布隆过滤器 采用布隆过滤器判断数据不存在这一特性进行短链的校验 还保证了高并发场景的性能</p>\n<h2 id=\"更新短链接信息时的方案选型分析\"><a class=\"anchor\" href=\"#更新短链接信息时的方案选型分析\">#</a> 更新短链接信息时的方案选型分析</h2>\n<ol>\n<li>只使用读写🔒<br />\n● 修改短链接时，用户发起的的请求阻塞等待，因为 TomCat 中一个请求就会使用一个线程处理 当读锁获取不到时线程阻塞，加入阻塞队列，这个队列是无界的，高并发场景下会导致 OOM</li>\n<li>使用读写🔒 + 消息队列<br />\n● 修改短链接时，直接响应用户请求，将统计的数据封装发送到消息队列，固定消费者数量入库统计信息，此时由于拿不到读锁，因此会阻塞等待，但是最多阻塞固定数量的线程，多余的消息放在消息队列慢慢等待被拉取消费，不会造成 OOM<br />\n● 用户访问短链接时，修改任务被阻塞，那就阻塞一会儿，等消费者消费完消息再进行修改入库任务</li>\n<li>读写🔒 + 消息队列 + 延时队列（这是最开始使用的方案 tryLock）<br />\n● 修改短链接时，用户请求直接响应，发送消息到消息队列，如果拿不到读锁就投入延迟队列，等待重新消费</li>\n<li>最终选型 2 方案，因为 3 方案既然已经有了消息队列，阻塞等待的过程和使用延迟队列的效果一样，性能差别不大，都是会等待的，这时候延迟队列就有点多余了，当然也是可以使用的。在这时候就不用 tryLock () 了，而是使用 lock，使其阻塞等待，具体原因在 2 方案</li>\n</ol>\n<h2 id=\"在linux服务器上部署rocketmq\"><a class=\"anchor\" href=\"#在linux服务器上部署rocketmq\">#</a> 在 Linux 服务器上部署 RocketMQ</h2>\n<blockquote>\n<p>命令部署前提配置请看<a href=\"https://www.bilibili.com/video/BV1jL41187ny?vd_source=0237c188b05cdd4b34e80198f868122f&amp;p=2&amp;spm_id_from=333.788.videopod.episodes\"> B 站教程</a></p>\n</blockquote>\n<ol>\n<li>启动 NameServer</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> <span class=\"token function\">bash</span> mqnamesrv <span class=\"token operator\">></span> <span class=\"token punctuation\">..</span>/namesrv.log <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>启动 Broker</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> <span class=\"token function\">bash</span> mqbroker <span class=\"token parameter variable\">-c</span> <span class=\"token punctuation\">..</span>/conf/broker.conf <span class=\"token operator\">></span> <span class=\"token punctuation\">..</span>/broker.log <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>启动 dashbord</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nohup</span> <span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> rocketmq-dashboard-1.0.0.jar <span class=\"token parameter variable\">--server.port</span><span class=\"token operator\">=</span><span class=\"token number\">8080</span> <span class=\"token parameter variable\">--rocketmq.config.namesrvAddr</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:9876 <span class=\"token operator\">></span> dashboard.log <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "枫短链",
                "Java, shortlink"
            ]
        },
        {
            "id": "https://blog.fxink.cn/mysql-advance-2024-11-28-MySQL/",
            "url": "https://blog.fxink.cn/mysql-advance-2024-11-28-MySQL/",
            "title": "MySQL高级",
            "date_published": "2024-11-28T08:20:30.000Z",
            "content_html": "<h1 id=\"mysql高级\"><a class=\"anchor\" href=\"#mysql高级\">#</a> MySQL 高级</h1>\n<h2 id=\"执行一条-select-的过程\"><a class=\"anchor\" href=\"#执行一条-select-的过程\">#</a> 执行一条 SELECT 的过程</h2>\n<p><img loading=\"lazy\" data-src=\"mysql9FE8A2B5E78B.png\" alt=\"mysql9FE8A2B5E78B\" /></p>\n<h3 id=\"连接器\"><a class=\"anchor\" href=\"#连接器\">#</a> 连接器</h3>\n<ul>\n<li>对客户端进行连接，用户名 密码等权限校验</li>\n<li>连接有短连接和长连接 短连接会频繁断开和连接过程 对效率不高 推荐使用长连接</li>\n<li>如果在连接过程中对密码修改 长连接不会拒绝请求 只有在下一次重新连接才会校验</li>\n<li>长连接默认 8 小时空闲会自动断开连接 不会告诉客户端 只有客户端发起请求才会接到报错</li>\n<li>为了防止长连接占用大量系统资源而导致的异常重启\n<ul>\n<li>定期断开连接</li>\n<li>客户端主动重置连接</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询缓存\"><a class=\"anchor\" href=\"#查询缓存\">#</a> 查询缓存</h3>\n<ul>\n<li>查询缓存是 MySQL 服务器中的一部分，用于缓存查询结果，以便在后续的相同查询中直接返回缓存的结果，而不需要再次执行查询语句。查询缓存可以提高查询性能，因为它减少了数据库的负载和 I/O 操作。</li>\n<li>在 MySQL 8.0 中，查询缓存被完全移除了，因为它的性能提升有限，并且存在一些问题，例如缓存失效和内存管理问题。因此，在 MySQL 8.0 中，查询缓存不再可用。</li>\n</ul>\n<h3 id=\"分析器\"><a class=\"anchor\" href=\"#分析器\">#</a> 分析器</h3>\n<ul>\n<li>词法分析：将输入的 SQL 语句分解成一个个的单词和符号，例如 SELECT、FROM、WHERE 等。</li>\n<li>语法分析：根据 SQL 语句的语法规则，检查输入的 SQL 语句是否符合语法规范，例如检查关键字是否正确，表名和列名是否存在等。</li>\n<li>语义分析：根据 SQL 语句的语义规则，检查输入的 SQL 语句是否合法，例如检查表名和列名是否正确，以及 WHERE 子句中的条件是否合法等。</li>\n</ul>\n<h3 id=\"预处理器\"><a class=\"anchor\" href=\"#预处理器\">#</a> 预处理器</h3>\n<ul>\n<li>预处理器会根据 SQL 语句的语义规则，检查输入的 SQL 语句是否合法，例如检查表名和列名是否正确，以及 WHERE 子句中的条件是否合法等。</li>\n<li>判断表和字段是否存在</li>\n<li>将 * 扩展为所有列</li>\n</ul>\n<h3 id=\"优化器\"><a class=\"anchor\" href=\"#优化器\">#</a> 优化器</h3>\n<ul>\n<li>优化器会根据查询语句的执行计划，选择最优的执行路径，例如选择合适的索引、连接顺序等。</li>\n<li>使用 explain 命令查看执行计划</li>\n</ul>\n<h2 id=\"一行记录是怎么存储的\"><a class=\"anchor\" href=\"#一行记录是怎么存储的\">#</a> 一行记录是怎么存储的？</h2>\n<h3 id=\"表空间结构\"><a class=\"anchor\" href=\"#表空间结构\">#</a> 表空间结构</h3>\n<blockquote>\n<p>MySQL 文件存储在 var/lib/mysql 文件目录 每创建一个数据库 就会产生一个以 database 为名的文件</p>\n</blockquote>\n<ul>\n<li>每个数据库表文件有 db.opt xxx.frm xxx.ibd\n<ul>\n<li>db.opt 存放字符集和字符校验规则</li>\n<li>frm 表结构</li>\n<li>ibd 真实数据</li>\n</ul>\n</li>\n<li>表 -&gt; 段 -&gt; 区 -&gt; 页 -&gt; 行</li>\n<li>段\n<ul>\n<li>索引段 存放 B+Tree 非叶子节点</li>\n<li>数据段 存放 B+Tree 叶子节点</li>\n<li>回滚段 存放回滚数据</li>\n</ul>\n</li>\n<li>区\n<ul>\n<li>MySQL 和数据交互采用页为单位 16KB 使用双向链表连接</li>\n<li>当数据量越来越大时 数据页内存不连续 查询会降低性能 索引树就采用区为基本单位分配空间 64 个页分一个区</li>\n</ul>\n</li>\n<li>页\n<ul>\n<li>和磁盘数据交互的基本单位</li>\n</ul>\n</li>\n<li>行\n<ul>\n<li>redundant 古老的行格式 没有再使用</li>\n<li>Compact</li>\n<li>Dynamic</li>\n<li>Compressed</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"compact-行格式\"><a class=\"anchor\" href=\"#compact-行格式\">#</a> Compact 行格式</h3>\n<p><img loading=\"lazy\" data-src=\"COMPACT.png\" alt=\"COMPACT\" /></p>\n<h4 id=\"变长字段长度列表\"><a class=\"anchor\" href=\"#变长字段长度列表\">#</a> 变长字段长度列表</h4>\n<blockquote>\n<p>存储字段中变长字段占用的字节数 变长 NULL 列的大小不会存储 按照字节大小 16 进制逆序存放</p>\n</blockquote>\n<ul>\n<li>为什么逆序存放？</li>\n</ul>\n<blockquote>\n<p>因为记录头信息存放着下一个记录的指针 该指针指向下一条记录的记录头信息和真实数据之间的位置<br />\n向左读就是记录额外信息 向右读就是真实数据<br />\n这样使变长字段和长度对应起来 存放在同一个 CPU Cache Line 中，使 CPU 命中率更高 查询更快</p>\n</blockquote>\n<ul>\n<li>不是必须的列表 当表字段没有变长字段时就会舍去该列表 节省空间</li>\n<li>分配字节小于 255 使用 1 字节存储长度 大于 255 使用 2 字节</li>\n</ul>\n<h4 id=\"null-列表\"><a class=\"anchor\" href=\"#null-列表\">#</a> NULL 列表</h4>\n<blockquote>\n<p>按照二进制比特位存放 NULL 字段 为 NULL 对应 1 不为 NULL 对应 0 同样也是逆序存放</p>\n</blockquote>\n<ul>\n<li>不是必须的列表 当表字段没有 NULL 时就会舍去该列表 节省空间</li>\n<li>NULL 列表是以一个字节为单位存储 如果有 9 个字段为 NULL 会分配 2 个字节 NULL 列表至少占用 1 个字节的空间</li>\n</ul>\n<h4 id=\"记录头信息\"><a class=\"anchor\" href=\"#记录头信息\">#</a> 记录头信息</h4>\n<ul>\n<li>delete_mask：设置删除的记录标记为 1 不会真正删除数据</li>\n<li>next_record：下一条记录的位置</li>\n<li>record_type：0 普通记录；1 B+Tree 非叶子节点记录； 2 最小记录； 3 最大记录</li>\n</ul>\n<h3 id=\"记录真实数据\"><a class=\"anchor\" href=\"#记录真实数据\">#</a> 记录真实数据</h3>\n<p><img loading=\"lazy\" data-src=\"AEE5959AE79FAEE6B08D%AE.png\" alt=\"AEE5959AE79FAEE6B08D%AE\" /></p>\n<h4 id=\"隐藏列\"><a class=\"anchor\" href=\"#隐藏列\">#</a> 隐藏列</h4>\n<ul>\n<li>row_id：隐藏主键 记录没有指定主键 又没有唯一索引 就会产生该字段</li>\n<li>trx_id：事务 id</li>\n<li>roll_pointer：回滚指针 版本链指针</li>\n</ul>\n<h3 id=\"一行记录-varcharn中-n-最大取值多少\"><a class=\"anchor\" href=\"#一行记录-varcharn中-n-最大取值多少\">#</a> 一行记录 VARCHAR (n) 中 n 最大取值多少？</h3>\n<ul>\n<li>varchar 字段占用字节大小包含数据大小、数据长度字节、NULL 值大小</li>\n<li><img loading=\"lazy\" data-src=\"A4E597AEE78483E5B5.png\" alt=\"A4E597AEE78483E5B5\" /></li>\n</ul>\n<h3 id=\"行溢出数据怎么解决\"><a class=\"anchor\" href=\"#行溢出数据怎么解决\">#</a> 行溢出数据怎么解决？</h3>\n<blockquote>\n<p>如果一行记录溢出数据 比如 TEXT BLOB 会将溢出的数据存放在溢出页中</p>\n</blockquote>\n<ul>\n<li>Compact 记录一部分数据 剩余空间采用 20 字节记录溢出数据的地址</li>\n<li>Dynamic 和 Compressed 不存放真实数据 只存放 20 字节指向溢出数据的指针</li>\n</ul>\n<h2 id=\"事务的隔离怎么实现\"><a class=\"anchor\" href=\"#事务的隔离怎么实现\">#</a> 事务的隔离怎么实现？</h2>\n<h3 id=\"并行事务产生的问题\"><a class=\"anchor\" href=\"#并行事务产生的问题\">#</a> 并行事务产生的问题：</h3>\n<ul>\n<li><strong>脏读</strong>一个事务在执行过程中 读取到了另一个事务还未提交的数据 如果另一个事务回滚 那这个数据就是脏数据 脏读</li>\n<li><strong>不可重复读</strong>  一个事务两次先后读取到的数据不一致</li>\n<li><strong>幻读</strong> 一个事务两次先后读取到的记录不一致</li>\n</ul>\n<h3 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h3>\n<ul>\n<li><strong>读未提交</strong> 一个事务可以读取到另一个事务未提交的数据</li>\n<li><strong>读提交</strong> 只有事务提交后其他事务才能看见变更的数据 不可能发生脏读</li>\n<li><strong>可重复读</strong> 数据从事务开启一直到结束都保持一致 InnoDB 默认隔离级别 不可能发生脏读和不可重复读 可能发生幻读</li>\n<li><strong>串行化</strong> 对事务的进行加读写🔒 事务如果发生读写冲突 需要等上一个执行完成才能继续进行 三种问题都不可能发生</li>\n</ul>\n<h3 id=\"解决可重复读的方案\"><a class=\"anchor\" href=\"#解决可重复读的方案\">#</a> 解决可重复读的方案</h3>\n<ul>\n<li>快照读 使用 MVCC</li>\n<li>当前读 使用 Next_key Lock</li>\n</ul>\n<h2 id=\"mvcc是如何工作的\"><a class=\"anchor\" href=\"#mvcc是如何工作的\">#</a> MVCC 是如何工作的？</h2>\n<h3 id=\"read-view\"><a class=\"anchor\" href=\"#read-view\">#</a> Read-View</h3>\n<ul>\n<li><strong>creator_trx_id</strong> 创建该 Read-View 的事务的事务 id</li>\n<li><strong>m_ids</strong> 创建该 Read-View 时 活跃的事务（已经创建事务 但是还未提交）</li>\n<li><strong>min_trx_id</strong> m_ids 中最小的事务 id</li>\n<li><strong>max_trx_id</strong> 创建 Read-View 后 数据库应该给下一个事务的 id</li>\n<li></li>\n</ul>\n<h3 id=\"聚簇索引的两个隐藏列\"><a class=\"anchor\" href=\"#聚簇索引的两个隐藏列\">#</a> 聚簇索引的两个隐藏列</h3>\n<ul>\n<li><strong>trx_id</strong> 对该条记录操作的事务的事务 id</li>\n<li><strong>roll_pointer</strong> 指向 undo_log 版本链的旧版本的指针</li>\n</ul>\n<h3 id=\"mvcc工作原理\"><a class=\"anchor\" href=\"#mvcc工作原理\">#</a> MVCC 工作原理</h3>\n<ol>\n<li>在启动事务时创建当下事务的 Read-View</li>\n<li>根据 Read-View 中的字段和聚簇索引的两个隐藏列：</li>\n<li>trx_id &lt; min_trx_id 说明在该事务创建前就已经提交 记录可见</li>\n<li>trx_id &gt;= max_trx_id 说明在该事务之后才创建的事务 记录不可见</li>\n<li>min_trx_id &lt;= trx_id &lt; m_ids<br />\n1. 在 m_ids 事务还未提交 记录不可见 会根据 roll_pointer 沿着版本链寻找旧版本 找到第一个小于 min_trx_id 的 undo log<br />\n2. 不在 m_ids 事务已经提交 记录可见</li>\n</ol>\n<h2 id=\"可重复读的mvcc\"><a class=\"anchor\" href=\"#可重复读的mvcc\">#</a> 可重复读的 MVCC</h2>\n<ul>\n<li>在事务启动时创建 Read-View 一直到事务提交都用这个 Read-View<br />\n 读提交的 MVCC</li>\n<li>在每条执行语句启动时创建 Read-View</li>\n</ul>\n<h2 id=\"mysql锁\"><a class=\"anchor\" href=\"#mysql锁\">#</a> MySQL 锁</h2>\n<h3 id=\"锁分类\"><a class=\"anchor\" href=\"#锁分类\">#</a> 锁分类</h3>\n<h4 id=\"全局锁\"><a class=\"anchor\" href=\"#全局锁\">#</a> 全局锁</h4>\n<ul>\n<li>当数据库加上全局锁 整个数据库处于只读状态 其他任何插入、更新、删除操作都会被阻塞 主要用于数据库的备份 如果备份不加全局锁 那么在备份的时候如果有数据更新会导致不可理解的错误 比如一个项目有多个数据库多张表 可能一个请求就会修改多个表 备份的先后顺序导致各个表的数据不匹配</li>\n<li>如果要避免这种阻塞 可以对备份开启可重复度隔离级别事务 使数据库备份的时候 其他操作正常进行 但是不会影响备份的数据</li>\n</ul>\n<h4 id=\"表级锁\"><a class=\"anchor\" href=\"#表级锁\">#</a> 表级锁</h4>\n<h5 id=\"表锁\"><a class=\"anchor\" href=\"#表锁\">#</a> 表锁</h5>\n<ul>\n<li>如果对某一个表加上共享表锁 本线程和其他线程对该表的写操作都会被阻塞 颗粒度太大 不建议使用 可以使用 InnoDB 提供的行级锁</li>\n</ul>\n<h5 id=\"元数据锁mdl\"><a class=\"anchor\" href=\"#元数据锁mdl\">#</a> 元数据锁 (MDL)</h5>\n<ul>\n<li>元数据锁是为了在操作表的时候防止对表结构变更</li>\n<li>CRUD 操作自动加 MDL 读锁 修改表结构自动加 MDL 写锁 在 CRUD 时如果对表结构进行修改将被阻塞</li>\n<li>读读不互斥 读写互斥 写锁获取优先级比读锁高 当一个线程获取了 MDL 写锁 没有释放 那么接下来的线程的读写锁都将获取不到 阻塞</li>\n</ul>\n<h5 id=\"意向锁\"><a class=\"anchor\" href=\"#意向锁\">#</a> 意向锁</h5>\n<ul>\n<li>目的是为了快速判断表中是否有记录加了共享锁或者独占锁 防止全表扫描判断是否有记录占有锁</li>\n<li>对表中某些记录加上共享锁或者独占锁时 会分别加上意向共享锁和意向独占锁</li>\n<li>意向共享锁和意向独占锁不互斥 也不会和行级共享锁和独占锁互斥 只会和共享表锁和独占表锁互斥</li>\n</ul>\n<h5 id=\"auto-inc-锁\"><a class=\"anchor\" href=\"#auto-inc-锁\">#</a> AUTO-INC 锁</h5>\n<ul>\n<li>通过字段加上 AUTO-INCREMENT 属性加锁</li>\n<li>InnoDB 使用系统变量 innodb_autoinc_lock_mode 对 AUTO-INCREMENT 属性的字段进行锁控制\n<ul>\n<li>0 ：使用 AUTO-INC 锁 插入语句时加锁 对字段自增 语句结束释放锁</li>\n<li>2 ：使用轻量级锁 申请主键后就释放锁</li>\n<li>1 ：普通 insert 语句 自增锁在申请之后就马上释放  insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放</li>\n</ul>\n</li>\n<li><img loading=\"lazy\" data-src=\"image.png\" alt=\"image\" /></li>\n</ul>\n<h4 id=\"行级锁\"><a class=\"anchor\" href=\"#行级锁\">#</a> 行级锁</h4>\n<h5 id=\"record-lock\"><a class=\"anchor\" href=\"#record-lock\">#</a> Record Lock</h5>\n<ul>\n<li>记录锁 锁住某一条记录</li>\n<li>S X 锁之分 SS 不互斥 SX 互斥 XX XS 互斥</li>\n<li>当记录加上 X 锁 其他事务无法对该记录修改</li>\n</ul>\n<h5 id=\"gap-lock\"><a class=\"anchor\" href=\"#gap-lock\">#</a> Gap Lock</h5>\n<ul>\n<li>间隙锁 锁住某一个范围 开区间</li>\n<li>间隙锁虽然也有 S X 之分 但是不互斥 间隙锁可以防止幻读的发生 所以不同事务的间隙锁可以有交集</li>\n</ul>\n<h5 id=\"next-key-lock\"><a class=\"anchor\" href=\"#next-key-lock\">#</a> Next-Key Lock</h5>\n<ul>\n<li>间隙锁和记录锁的结合 左开右闭</li>\n<li>锁定一个范围 也锁住本身 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中</li>\n<li>因为有记录锁的存在 因此如果一个事务获取与另一个事务相同范围的 Next-Key Lock 时会被阻塞</li>\n</ul>\n<h5 id=\"插入意向锁\"><a class=\"anchor\" href=\"#插入意向锁\">#</a> 插入意向锁</h5>\n<ul>\n<li>一个事务要对某条记录操作 加锁时 将判断该记录是否被加了间隙锁 如果已经加锁将会被阻塞 并且生成插入意向锁</li>\n<li>表明有事务将要在此插入记录 处于等待状态</li>\n</ul>\n<h2 id=\"mysql是如何加行级锁的\"><a class=\"anchor\" href=\"#mysql是如何加行级锁的\">#</a> MySQL 是如何加行级锁的？</h2>\n<blockquote>\n<p>MySQL 加锁的对象是索引 加锁的基本单位是 Next-Key Lock</p>\n</blockquote>\n<h3 id=\"唯一索引等值查询\"><a class=\"anchor\" href=\"#唯一索引等值查询\">#</a> 唯一索引等值查询</h3>\n<ul>\n<li>记录存在 退化成记录锁</li>\n<li>记录不存在 退化成间隙锁</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>id </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">5</span></pre></td></tr></table></figure><blockquote>\n<p>查询 id = 2 不存在 加 (1,5) 间隙锁 即可 只要保证每次查询的结果相同即可 不用加 Next-Key Lock<br />\n 查询 id = 5 存在 加记录锁 保证该记录不被修改也不被删除即可</p>\n</blockquote>\n<h3 id=\"唯一索引范围查询\"><a class=\"anchor\" href=\"#唯一索引范围查询\">#</a> 唯一索引范围查询</h3>\n<ul>\n<li>大于 大于等于\n<ul>\n<li>大于 加 Next-Key Lock 最大值有一个 supermum record</li>\n<li>大于等于 如果记录值存在 加记录锁 其他的加 Next-Key Lock</li>\n</ul>\n</li>\n<li>小于 小于等于\n<ul>\n<li>记录值不存在\n<ul>\n<li>小于 小于等于 扫描到终止范围的记录时会退化成间隙锁 其他的 Next-Key Lock id = 1 5 10 查询 id &lt;6 10 加间隙锁 (5,10)</li>\n</ul>\n</li>\n<li>记录值存在\n<ul>\n<li>小于等于  对记录加记录锁 其他加 Next-Key Lock</li>\n<li>小于 对记录加间隙锁 其他 Next-Key Lock</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"非唯一索引等值查询\"><a class=\"anchor\" href=\"#非唯一索引等值查询\">#</a> 非唯一索引等值查询</h3>\n<blockquote>\n<p>由于非唯一索引可能产生多条结果 所以查询时采用扫描的形式</p>\n</blockquote>\n<ul>\n<li><strong>记录不存在</strong> 对第一个不符合条件的二级索引加间隙锁 同时对相应的主键索引加间隙锁\n<ul>\n<li>比如 id=10 age=22 id=20 age=30 插入 age = 22 或 age = 30 时如果 id 不在间隙锁范围 就可以插入成功 否则失败</li>\n</ul>\n</li>\n<li><strong>记录存在</strong> 对第一个不符合条件的二级索引加间隙锁 同时对主键索引加间隙锁 记录存在的主键加记录锁 二级索引加 Next-Key Lock</li>\n</ul>\n<h3 id=\"非唯一索引范围查询\"><a class=\"anchor\" href=\"#非唯一索引范围查询\">#</a> 非唯一索引范围查询</h3>\n<ul>\n<li>二级索引都加 Next-Key Lock 主键索引都加记录锁</li>\n</ul>\n<h2 id=\"insert是如何加锁的\"><a class=\"anchor\" href=\"#insert是如何加锁的\">#</a> insert 是如何加锁的？</h2>\n<blockquote>\n<p>如果插入时没有遇到阻塞情况 正常插入 会在记录中维护隐藏列 trx_id 在需要锁的时机会生成相应的锁 这样使得插入效率提高也保证了安全性</p>\n</blockquote>\n<h3 id=\"插入范围存在间隙锁的情况\"><a class=\"anchor\" href=\"#插入范围存在间隙锁的情况\">#</a> 插入范围存在间隙锁的情况</h3>\n<ul>\n<li>此时的事务想要获取插入意向锁 但是会被阻塞 插入意向锁处于等待状态 无法插入</li>\n</ul>\n<h3 id=\"唯一键情况\"><a class=\"anchor\" href=\"#唯一键情况\">#</a> 唯一键情况</h3>\n<h4 id=\"主键索引\"><a class=\"anchor\" href=\"#主键索引\">#</a> 主键索引</h4>\n<ul>\n<li>插入时主键索引发生冲突时 原记录会被插入的事务加上 S 记录锁</li>\n</ul>\n<h4 id=\"唯一-二级索引\"><a class=\"anchor\" href=\"#唯一-二级索引\">#</a> 唯一 二级索引</h4>\n<ul>\n<li>对于原表中就有的记录 插入时发生冲突 原记录会被加上 S Next-Key Lock\n<ul>\n<li>当有事务想要查询该条记录时 想要加上 X 型的记录锁 S 和 X 是冲突的因此会发生阻塞</li>\n</ul>\n</li>\n<li>对于原表没有的记录 a 事务执行插入 成功 此时没有锁 b 事务插入同样的数据 由于 a 事务还没提交 所以 a 事务插入的记录会由隐式锁变为显示 X 记录锁 b 事务想要 S Next-Key Lock S 和 X 冲突发生阻塞</li>\n</ul>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<h3 id=\"undo-log\"><a class=\"anchor\" href=\"#undo-log\">#</a> undo log</h3>\n<blockquote>\n<p>用于记录事务操作数据前的旧版本数据 在记录中还有 trx_id 和 roll_pointer roll_pointer 指向旧版本记录 形成版本链 方便事务回滚<br />\n同时也是 MVCC 的核心部分 保证原子性</p>\n</blockquote>\n<ul>\n<li><strong>更新前</strong> 记录更新列的旧值 回滚时更新为旧值</li>\n<li><strong>删除前</strong> 记录删除前的原记录 回滚时 插入原记录</li>\n<li><strong>插入时</strong> 记录主键值 回滚时 删除主键所在记录</li>\n</ul>\n<h3 id=\"buffer-pool\"><a class=\"anchor\" href=\"#buffer-pool\">#</a> Buffer Pool</h3>\n<blockquote>\n<p>对数据操作时 如果 Buffer Pool 有该条数据 就对数据操作 速度快效率高 其中包含索引页 数据页 undo 页</p>\n</blockquote>\n<ul>\n<li>InnoDB 和磁盘数据交互以页为单位 每个页大小为 16KB 所以 Buffer Pool 中的页也根据 16KB 大小划分</li>\n<li>如果对数据更新或删除 首先对存在 Buffer Pool 中的数据操作 将对应页设置为脏页 不会立即刷盘 交给后台选择合适时机刷盘持久化</li>\n<li>查询一条记录时，InnoDB 会把整个页的数据加载到 Buffer Pool 中，将页加载到 Buffer Pool 后，再通过页里的「页目录」去定位到某条具体的记录</li>\n</ul>\n<h4 id=\"buffer-pool-如何管理空闲页\"><a class=\"anchor\" href=\"#buffer-pool-如何管理空闲页\">#</a> Buffer Pool 如何管理空闲页</h4>\n<ul>\n<li>使用控制块把空闲的缓存页连接起来 作为 Free 链表 头节点的控制块包含头节点和尾节点的地址以及缓存页数量等信息</li>\n<li>当有磁盘页对 Buffer Pool 做交互时 就在 Free 链表选取空闲页 然后移除 Free 链表的空闲页控制块<br />\n Buffer Pool 如何管理脏页</li>\n<li>和 Free 链表类似 只是 Flush 链表中的控制块地址是脏页</li>\n<li>后台进程从 Flush 链表选取脏页刷盘 然后移除在 Flush 链表的控制块</li>\n</ul>\n<h4 id=\"如何提高缓存命中率\"><a class=\"anchor\" href=\"#如何提高缓存命中率\">#</a> 如何提高缓存命中率</h4>\n<blockquote>\n<p>对于经常访问的数据 可以放在 Buffer Pool 的时间长一些 不经常访问的就可以移除<br />\n使用 LRU 算法对其管理</p>\n<ul>\n<li>Buffer Pool 访问到数据 将该缓存页移动到链表头部</li>\n<li>从磁盘加载数据到 Buffer Pool 加载到链表头部 并移除尾结点</li>\n</ul>\n</blockquote>\n<ul>\n<li>Free Page：存放在 Free 链表</li>\n<li>Clean Page：存放在 LRU 链表</li>\n<li>Dirty Page：存放在 LRU 链表和 Flush 链表</li>\n</ul>\n<h4 id=\"buffer-pool-解决预读失效\"><a class=\"anchor\" href=\"#buffer-pool-解决预读失效\">#</a> Buffer Pool 解决预读失效</h4>\n<blockquote>\n<p>访问某个页的数据时 可能相邻的页也会被访问到 所以 MySQL 从磁盘加载数据到 Buffer Pool 时会把相邻的页也加载到缓冲区<br />\n如果某个预读页长时间不会被访问到 有可能会导致真正的热数据被移除链表 预读失效了</p>\n</blockquote>\n<ul>\n<li>MySQL 实现 LRU 算法 将前部分链表设计为 young 区  后部分设计为 old 区</li>\n<li>预读的页先加入到 old 区头部 只有被访问时才会被加入到 young 区头部</li>\n<li>这样不会影响热数据 也能更好管理不会被访问的预读页</li>\n</ul>\n<h4 id=\"buffer-pool-解决-buffer-pool-污染\"><a class=\"anchor\" href=\"#buffer-pool-解决-buffer-pool-污染\">#</a> Buffer Pool 解决 Buffer Pool 污染</h4>\n<blockquote>\n<p>之前的设计方案 如果对数据进行全表扫描或者扫描局部数据 将数据页加载到 young 区 导致真正的热数据被移除<br />\n这就是 Buffer Pool 污染</p>\n</blockquote>\n<ul>\n<li>MySQL 对数据页移动到 young 区提高门槛 设置了一个时间间隔 访问 Buffer Pool 数据时会记录该时间点</li>\n<li>如果后续访问与第一次访问的时间在设定的时间间隔内 那不会加入到 young 区 否则加入</li>\n<li>只有满足被访问和停留 old 时间超过设定的时间间隔才会被加入到 young 区</li>\n<li>为了防止 young 区域节点频繁移动到头部。young 区域前面 1/4 被访问不会移动到链表头部，只有后面的 3/4 被访问了才会</li>\n</ul>\n<h3 id=\"redo-log\"><a class=\"anchor\" href=\"#redo-log\">#</a> redo log</h3>\n<blockquote>\n<p>用于记录某个数据页做了什么操作 在事务操作完数据后记录 这个时候数据就算更新完成 作用是防止数据丢失 保证持久性</p>\n</blockquote>\n<ul>\n<li>对数据操作时 先在 Buffer Pool 存储更新的数据 然后再写入 redo log 的具体操作</li>\n<li>后台会在适当时间进行 Buffer Pool 刷盘 这就是 <strong>WAL</strong> 技术</li>\n<li>当然事务提交后就可以 redo log 落盘 不必等到 Buffer Pool 落盘</li>\n<li>如果应用宕机造成数据丢失 重启后可以根据 redo log 恢复数据 这就是 <strong>crash-safe</strong> 技术</li>\n<li>redo log 刷盘是顺序写 比之前的随机写效率高 提升落盘性能</li>\n</ul>\n<h3 id=\"redo-log-buffer\"><a class=\"anchor\" href=\"#redo-log-buffer\">#</a> redo log buffer</h3>\n<blockquote>\n<p>redo log 不是产生后立马刷盘 而是先保存到内存的 redo log buffer 待合适时机再落盘</p>\n</blockquote>\n<h4 id=\"落盘时机\"><a class=\"anchor\" href=\"#落盘时机\">#</a> 落盘时机</h4>\n<ul>\n<li>MySQL 正常关机</li>\n<li>每隔一秒刷盘</li>\n<li>存入 redo log buffer 的数据超过 buffer 内存一半时刷盘</li>\n<li>事务提交后由 innodb_flush_log_at_trx_commit 控制刷盘\n<ul>\n<li>0 保存到 buffer 不刷盘 每隔一秒 写入 Page Cache 再调用 fsync 刷盘</li>\n<li>1 直接刷盘</li>\n<li>2 写入 Page Cache 每隔一秒 刷盘<br />\n<img loading=\"lazy\" data-src=\"redofile.png\" alt=\"redofile\" /><br />\n<img loading=\"lazy\" data-src=\"checkpoint.png\" alt=\"checkpoint\" /></li>\n<li>默认情况下， InnoDB 存储引擎有 1 个重做日志文件组 (redo log Group)，「重做日志文件组」由有 2 个 redo log 文件组成</li>\n<li>如果两个文件满了 write pos 和 check point 重合 MySQL 事务会被阻塞 等到 Buffer Pool 数据落盘后 check point 往后走 又继续更新 redo log MySQL 正常运行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"binlog\"><a class=\"anchor\" href=\"#binlog\">#</a> binlog</h3>\n<h4 id=\"为什么需要-binlog\"><a class=\"anchor\" href=\"#为什么需要-binlog\">#</a> 为什么需要 binlog?</h4>\n<ul>\n<li>和 MySQL 时间线有关系 MyISAM 引擎只提供了 binlog 记录日志 没有 crash-safe 能力 后来的 InnoDB 引擎 以插件形式引入 MySQL，自己实现了 redo log 和 undo log 实现 crash-safe 和 WAL 技术</li>\n</ul>\n<h4 id=\"binlog-和-redo-log-的区别\"><a class=\"anchor\" href=\"#binlog-和-redo-log-的区别\">#</a> binlog 和 redo log 的区别</h4>\n<ul>\n<li>binlog 在 server 层 每个存储引擎都可以使用 redo log 是 InnoDB 专属的</li>\n<li>写入日志方式不同 binlog 是追加写 写满文件另起起一个继续写 redo log 是循环写</li>\n<li>文件格式不同\n<ul>\n<li>binlog\n<ul>\n<li>statement 记录 SQL 语句 但是使用动态函数会导致主从不一致</li>\n<li>row 记录数据 如果更新多条数据 statement 可能一条语句就完成 大小不一样</li>\n<li>mixed 混合 合适的时机选择合适的格式</li>\n</ul>\n</li>\n<li>redo log\n<ul>\n<li>物理日志 记录在 xx 页做了什么</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>binlog 用于主从复制 备份恢复 redo log 用于掉电恢复</li>\n</ul>\n<h4 id=\"主从复制怎么实现的\"><a class=\"anchor\" href=\"#主从复制怎么实现的\">#</a> 主从复制怎么实现的？</h4>\n<ul>\n<li>主库提交事务时 会把日志写入 binlog 后再提交事务</li>\n<li>然后创建一个 log dump 线程用于给从库主从复制</li>\n<li>从库连接 log dump 线程 把 binlog 写入中继日志 relay log</li>\n<li>回放 binlog 执行 relay log 的 SQL 实现主从数据一致</li>\n</ul>\n<h4 id=\"三种复制模式\"><a class=\"anchor\" href=\"#三种复制模式\">#</a> 三种复制模式</h4>\n<ul>\n<li>同步复制 主库等所有从库响应复制成功后再返回客户端响应 性能损耗大</li>\n<li>异步复制 主库提交事务后立即响应客户端 不等从库的响应 主库宕机可能会导致复制失败</li>\n<li>半同步复制 两种混合 折中方案 只要有一个从库复制完就算成功 响应客户端</li>\n</ul>\n<h4 id=\"刷盘时机\"><a class=\"anchor\" href=\"#刷盘时机\">#</a> 刷盘时机</h4>\n<ul>\n<li>binlog 先一次性写入内存缓冲区 binlog cache 一个事务完整写入 binlog 保证原子性</li>\n<li>由 <strong>sync_binlog</strong> 参数决定刷盘时机：\n<ul>\n<li>0 将 cache 写入操作系统的 page cache 由操作系统决定刷盘时机</li>\n<li>1 写入 page cache 后立即调用 fsync 刷盘</li>\n<li>N (N&gt; 1) 待累计 N 个事务后再刷盘</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"两阶段提交\"><a class=\"anchor\" href=\"#两阶段提交\">#</a> 两阶段提交</h3>\n<h4 id=\"为什么需要两阶段提交\"><a class=\"anchor\" href=\"#为什么需要两阶段提交\">#</a> 为什么需要两阶段提交？</h4>\n<ul>\n<li>如果 redo log 刷盘了 但是 binlog 还没刷盘就宕机了 导致从库的数据不一致</li>\n<li>如果 binlog 刷盘了 但是 redo log 还没刷盘就宕机了 导致主库的数据不一致</li>\n</ul>\n<h4 id=\"两阶段提交的执行过程\"><a class=\"anchor\" href=\"#两阶段提交的执行过程\">#</a> 两阶段提交的执行过程</h4>\n<blockquote>\n<p>执行 commit 语句后 MySQL 内部开启 XA 事务执行两阶段提交</p>\n</blockquote>\n<ul>\n<li><strong>prepare</strong> 阶段：把 XID 写入 redo log 然后对应的事务设置 prepare 状态 redo log 刷盘 刷盘参数设置 1</li>\n<li><strong>commit</strong> 阶段：把 XID 写入 binlog 然后对应的事务 redo log 设置 commit 状态并刷盘 binlog 刷盘 刷盘参数设置 1</li>\n</ul>\n<blockquote>\n<p>根据日志文件 XID 判断是否需要回滚</p>\n</blockquote>\n<ul>\n<li><img loading=\"lazy\" data-src=\"B8E9B6AEE690BAE5A9BAE7B9.png\" alt=\"B8E9B6AEE690BAE5A9BAE7B9\" /></li>\n<li><strong>时刻 A 宕机</strong>：redo log 有 XID binlog 没有 XID 会判定为两阶段提交失败 事务回滚</li>\n<li><strong>时刻 B 宕机</strong>：redo log 和 binlog 都有 XID 判定已经刷盘持久化 事务提交成功</li>\n<li>由于两个参数设置 1 会导致大量磁盘 IO 多个事务存在锁竞争所以 MySQL 设置了 binlog 组提交\n<ul>\n<li>flush 阶段：多个 binlog 文件按顺序写入 page cache 不刷盘 该阶段还做 redo log 的组刷盘</li>\n<li>sync 阶段：多个 binlog 文件一次刷盘</li>\n<li>commit 阶段：各个事务 redo log 做 commit 操作</li>\n<li>redo log 也有组提交（5.7 之后）放在 flush 阶段延迟写 redo log 一次性写入磁盘 提高效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<h3 id=\"按照数据结构分类\"><a class=\"anchor\" href=\"#按照数据结构分类\">#</a> 按照数据结构分类</h3>\n<blockquote>\n<p>B+Tree 索引 Hash 索引 Full-Text 索引</p>\n</blockquote>\n<h4 id=\"btree-索引\"><a class=\"anchor\" href=\"#btree-索引\">#</a> B+Tree 索引</h4>\n<ul>\n<li>InnoDB 存储引擎的默认索引类型 分为主键索引和二级索引</li>\n</ul>\n<blockquote>\n<p>主键（聚簇）索引选择：</p>\n<ol>\n<li>默认使用主键作为主键索引</li>\n<li>没有主键索引 默认选择第一个非 NULL 的唯一键做主键索引</li>\n<li>两个都没有 InnoDB 引擎自动生成隐式自增 id 作为主键索引<br />\n其他索引为二级索引 非聚簇索引 这些索引默认都是用 B+Tree 作为底层数据结构</li>\n</ol>\n</blockquote>\n<ul>\n<li>主键索引的 B+Tree 中，非叶子节点存放主键 叶子节点存放主键和数据</li>\n<li>二级索引的 B+Tree 中，非叶子节点存放二级索引 叶子节点存放主键值</li>\n<li>回表：当使用二级索引查询时 先在二级索引树找到主键值，再在主键索引树寻找数据</li>\n<li>索引覆盖：如果查询的是主键值 二级索引就可以查询到结果 不用回表</li>\n<li>每一次获取节点的数据进行比较，就相当于一次磁盘 IO</li>\n</ul>\n<h4 id=\"btree-和其他数据结构的对比\"><a class=\"anchor\" href=\"#btree-和其他数据结构的对比\">#</a> B+Tree 和其他数据结构的对比</h4>\n<ol>\n<li>数组二分查找\n<ol>\n<li>查询效率是 O (logn)</li>\n<li>插入和删除效率是 O (n) 数据量越来越大不方便 消耗性能太大</li>\n</ol>\n</li>\n<li>二分搜索树\n<ol>\n<li>相较于数组 解决了插入效率低的问题 不必连续排列 插入时不用全部向后移动</li>\n<li>但是可能会退化成链表 树的高度很高 这样时间复杂度又回到 O (n) 了 磁盘 IO 的次数也会很高</li>\n</ol>\n</li>\n<li>平衡二分搜索树\n<ol>\n<li>对左右子树的高度差进行限制 避免退化成链表</li>\n<li>因为是二叉树 每个节点最多只能有 2 个子节点 数据量大的时候树的高度还是会很高</li>\n</ol>\n</li>\n<li>B 树\n<ol>\n<li>每个节点可以有多个子节点 比二叉搜索树更矮胖 高度降低 磁盘 IO 次数大大减少</li>\n<li>每个节点存储 索引 + 记录 因此搜索的时间复杂度有波动 可能一次就查询到 也可能需要到叶子节点才能查询到结果</li>\n<li>不利于范围查询（中序遍历）会产生大量无用的磁盘 IO，也不利于插入和删除 因为没有冗余节点 可能发生复杂的树结构变化</li>\n</ol>\n</li>\n<li>B + 树\n<ol>\n<li>非叶子节点只存储索引 因此每一个非叶子节点可以存储更多的索引 比 B 树更矮胖</li>\n<li>每个节点的子节点都包含父节点的索引 且是子节点的最大或者最小值 因此会有大量冗余节点 这也使得插入和删除不会发生复杂的树变化 效率比 B 树高很多</li>\n<li>叶子节点采用双向链表连接 范围查询时向右或者向左遍历即可 避免了树的遍历</li>\n<li>非叶子节点有多少个子节点 就有多少个索引</li>\n<li>InnoDB 存储引擎中每个节点存放的数据单位是页</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"mysql-中的-btree\"><a class=\"anchor\" href=\"#mysql-中的-btree\">#</a> MySQL 中的 B+Tree</h4>\n<ol>\n<li>B+Tree 使用页（16KB）为节点的基本单位 页中的文件头有前后两个指针 构成双向链表<br />\n<img loading=\"lazy\" data-src=\"fabd6dadd61a0aa342d7107213955a72.png\" alt=\"fabd6dadd61a0aa342d7107213955a72\" /></li>\n<li>User Records 中的数据形式：<br />\n<img loading=\"lazy\" data-src=\"261011d237bec993821aa198b97ae8ce.png\" alt=\"261011d237bec993821aa198b97ae8ce\" /></li>\n</ol>\n<ul>\n<li>用户记录中的数据用主键的顺序组成单向链表 插入和删除的效率非常快 缺点是查询效率慢 因此还设置了一个页目录 记录索引的作用</li>\n<li>页目录中将记录分组 每个分组按照主键顺序构成单链表 有最小记录和最大记录 每个分组中的最后一条记录就是最大记录 最大记录的地址偏移量就是该组的页目录 而且最大记录还存储了每组的记录条数</li>\n<li>页目录的槽 (slot) 按照地址偏移量的先后顺序组成，因此在查询时使用二分法快速查询页所在的目录 进入具体分组单链表遍历查询结果</li>\n<li>为了避免分组中遍历查询复杂度回到 O (n) 所以 InnoDB 对每个分组进行规定：\n<ul>\n<li>第一组只能有一条记录</li>\n<li>最后一组 1~8 条记录</li>\n<li>其他组 4~8 条记录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"按照字段个数分类\"><a class=\"anchor\" href=\"#按照字段个数分类\">#</a> 按照字段个数分类</h3>\n<h4 id=\"联合索引\"><a class=\"anchor\" href=\"#联合索引\">#</a> 联合索引</h4>\n<ul>\n<li>由数据库表的多个字段构成一个索引</li>\n<li>应该将区分度高的字段靠前</li>\n<li>存在最左匹配原则</li>\n<li>联合索引查询时可能有的字段不会使用到</li>\n</ul>\n<h4 id=\"最左匹配原则\"><a class=\"anchor\" href=\"#最左匹配原则\">#</a> 最左匹配原则</h4>\n<blockquote>\n<p>联合索引根据靠左的字段进行排序 根据字符串的最左前缀进行排序</p>\n</blockquote>\n<ul>\n<li>只有第一个字段是全局有序的 剩余字段局部有序 全局无序 这是根据前一个字段排序后决定的</li>\n<li>如果前一个字段有多个相同值 后一个字段就会局部有序</li>\n<li>范围查询时遇到＞＜会停止匹配 后面的字段不会用到联合索引 ，≥≤ between like xxx% 时会继续匹配 相同的情况下进行后面字段排序 用到了联合索引</li>\n<li>对于需要 order by,group by 的字段排序 应该加入到联合索引 进行排序</li>\n</ul>\n<h4 id=\"索引下推\"><a class=\"anchor\" href=\"#索引下推\">#</a> 索引下推</h4>\n<ul>\n<li>使用联合索引查询时，如果第一个字段匹配 第二个字段没有使用到索引 就会根据二级索引产生回表，然后返回数据给 Server 层进行后面字段的比较</li>\n<li>而如果使用索引下推 会将后面的字段也直接在存储引擎层进行比较过滤 返回过滤后的数据 减少回表次数</li>\n</ul>\n<h3 id=\"索引失效\"><a class=\"anchor\" href=\"#索引失效\">#</a> 索引失效</h3>\n<h4 id=\"使用左左右模糊匹配-xx-xx\"><a class=\"anchor\" href=\"#使用左左右模糊匹配-xx-xx\">#</a> 使用左 / 左右模糊匹配 % xx % xx%</h4>\n<blockquote>\n<p>MySQL 存储引擎 InnoDB 使用 B+Tree 数据结构 按照索引值进行排序 按照索引的前缀进行比较查找 左或左右模糊匹配只有后缀 前缀无法确定 不满足索引的有序性进行查找</p>\n</blockquote>\n<h4 id=\"对索引进行函数运算\"><a class=\"anchor\" href=\"#对索引进行函数运算\">#</a> 对索引进行函数运算</h4>\n<blockquote>\n<p>B+Tree 存储的是索引值 不是函数表达式运算后的值 所以会索引失效</p>\n</blockquote>\n<h4 id=\"对索引进行表达式运算\"><a class=\"anchor\" href=\"#对索引进行表达式运算\">#</a> 对索引进行表达式运算</h4>\n<blockquote>\n<p>和函数类似 比如 id=10-1 可以使用索引比较 但是 id-1=10 就不能了 因为 id-1 表达式不是索引</p>\n</blockquote>\n<h4 id=\"联合索引没有使用最左匹配原则\"><a class=\"anchor\" href=\"#联合索引没有使用最左匹配原则\">#</a> 联合索引没有使用最左匹配原则</h4>\n<blockquote>\n<p>联合索引创建后 是根据前一个字段排序之后才会对第二个字段排序，所以对联合索引查询的时候如果去掉了之前的字段 后面的字段就无法排序比较</p>\n</blockquote>\n<h4 id=\"对索引隐式转换\"><a class=\"anchor\" href=\"#对索引隐式转换\">#</a> 对索引隐式转换</h4>\n<blockquote>\n<p>MySQL 默认会把字符串转换为整数类型 如果索引是字符串类型 对索引查询时使用整数类型 会对索引进行隐式转换 其实也是 CAST 函数 导致索引失效</p>\n</blockquote>\n<h4 id=\"where-条件使用-or\"><a class=\"anchor\" href=\"#where-条件使用-or\">#</a> WHERE 条件使用 OR</h4>\n<blockquote>\n<p>如果索引使用了 OR，另一个普通字段也在 OR 语句里 由于只要满足一个条件就能查询 所以普通字段的加入就会导致索引失效</p>\n</blockquote>\n<h3 id=\"xxx-一定会索引失效吗\"><a class=\"anchor\" href=\"#xxx-一定会索引失效吗\">#</a> % xxx 一定会索引失效吗？</h3>\n<ul>\n<li>如果表中有非索引字段 而查询使用二级索引左模糊匹配 因为不满足索引的有序性查找 会走全扫描二级索引树 再回表根据主键索引查找数据 优化器认为这样太累了 会走全扫描表 索引失效</li>\n<li>如果表中只有主键和二级索引 查询使用二级索引左模糊匹配 会全扫描二级索引树 索引生效 （为什么不回表？ 因为二级索引树就包含了很多所有字段 并且主键索引还会有额外的事务 id 等 而且已经找到了所有字段就会走覆盖索引）</li>\n</ul>\n<h2 id=\"count和-count1性能有区别吗\"><a class=\"anchor\" href=\"#count和-count1性能有区别吗\">#</a> COUNT (*) 和 COUNT (1) 性能有区别吗</h2>\n<blockquote>\n<p>COUNT () 函数是按照条件查询后 统计函数字段不为 NULL 的记录条数<br />\n Server 层会维护一个 count 变量 存储引擎每返回一条数据就加一 最后返回 count 的值</p>\n</blockquote>\n<h3 id=\"count主键\"><a class=\"anchor\" href=\"#count主键\">#</a> COUNT (主键)</h3>\n<ul>\n<li>默认使用二级索引（存储内容比聚簇索引更少 性能更快） 没有就使用聚簇索引</li>\n<li>返回主键不为 NULL 的记录</li>\n</ul>\n<h3 id=\"count-和-count1\"><a class=\"anchor\" href=\"#count-和-count1\">#</a> COUNT (*) 和 COUNT (1)</h3>\n<ul>\n<li>官方文档说明两个性能一样</li>\n<li>count (*) 会转化为 count (0) 1 和 0 永远都不为 NULL 所以会查询表中所有记录条数 但不计算字段</li>\n</ul>\n<h3 id=\"count普通字段\"><a class=\"anchor\" href=\"#count普通字段\">#</a> COUNT (普通字段)</h3>\n<ul>\n<li>性能是最差的</li>\n</ul>\n",
            "tags": [
                "MySQL",
                "MySQL高级",
                "sql,MySQL"
            ]
        },
        {
            "id": "https://blog.fxink.cn/mysql-sqlbase-2024-11-26-MySQL/",
            "url": "https://blog.fxink.cn/mysql-sqlbase-2024-11-26-MySQL/",
            "title": "MySQL基础",
            "date_published": "2024-11-26T04:51:59.000Z",
            "content_html": "<h1 id=\"mysql基础\"><a class=\"anchor\" href=\"#mysql基础\">#</a> MySQL 基础</h1>\n<h2 id=\"基础储备\"><a class=\"anchor\" href=\"#基础储备\">#</a> 基础储备</h2>\n<p>DDL: 数据定义语言 创建管理库、表</p>\n<p>DML: 数据操作语言 表增删改查</p>\n<p>DCL: 数据控制语言</p>\n<h2 id=\"dml-查询\"><a class=\"anchor\" href=\"#dml-查询\">#</a> DML 查询</h2>\n<h3 id=\"多表查询的基本介绍\"><a class=\"anchor\" href=\"#多表查询的基本介绍\">#</a> 多表查询的基本介绍</h3>\n<ol>\n<li>需要有连接方式</li>\n<li>需要指明字段所在表</li>\n<li>可以在 FROM 给表起别名增加可读性，在 SELECT 和 WHERE 使用别名</li>\n<li>n 个表实现多表查询需要 n-1 个连接条件</li>\n</ol>\n<h3 id=\"自连接-非自连接\"><a class=\"anchor\" href=\"#自连接-非自连接\">#</a> 自连接 非自连接</h3>\n<ul>\n<li>自连接：自我引用\n<ul>\n<li>员工和管理者的对应关系：员工 id = 管理者 id</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内连接-外连接\"><a class=\"anchor\" href=\"#内连接-外连接\">#</a> 内连接 外连接</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#多个表内连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">JOIN</span> B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ON</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> C<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>内连接：合并具有同一列的两个以上的表的行，结果集中<strong>不包含</strong>一个表与另一个表<strong>不匹配的行</strong>\n<ul>\n<li>JOIN ON</li>\n</ul>\n</li>\n<li>外连接：两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左 / 右表中不满足条件的行</strong>，这种称左 / 右外连接。没有匹配的行时，结果表中相应列为<strong> NULL</strong>（关键字：所有，多个表）</li>\n<li>左外连接：左表为主表，右表为从表（关键字：所有，多个表）LEFT JOIN ON</li>\n<li>右外连接：右表为主表，左表为从表（关键字：所有，多个表）RIGHT JOIN ON</li>\n<li>UNION：返回两个查询结果的并集，去重</li>\n<li>UNION ALL（效率更高）：返回两个查询结果的并集，不去重（推荐使用）</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240504182343163.png\" alt=\"image-20240504182343163\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#左上图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#右上图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#左中图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#右中图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#中图 内连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">JOIN</span> B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#左下图 左上 + 右中 满外连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#左下图 右上 + 左中 满外连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">WHERE</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#右下图 左中 + 右中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span>  B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>补充（可用可不用）：</p>\n</li>\n<li>\n<p>NATURAL JOIN: 自动查询两张连接表中<strong>所有相同的字段</strong>，然后进行<strong>等值连接</strong></p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">JOIN</span> B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>data1 <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>data1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">AND</span> A<span class=\"token punctuation\">.</span>data2 <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>data2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 等价</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">NATURAL</span> <span class=\"token keyword\">JOIN</span> B<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>USING:<strong> 两个不同表</strong>中相同的字段（自连接不使用，字段不一样）</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">JOIN</span> B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>data1 <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>data1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#等价</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> a1<span class=\"token punctuation\">,</span>b1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FROM</span> A <span class=\"token keyword\">JOIN</span> B<span class=\"token comment\">#相同字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<h3 id=\"单行函数\"><a class=\"anchor\" href=\"#单行函数\">#</a> 单行函数</h3>\n<h4 id=\"基础认识\"><a class=\"anchor\" href=\"#基础认识\">#</a> 基础认识</h4>\n<ul>\n<li>操作数据对象</li>\n<li>接受参数返回一个结果</li>\n<li>只对一行进行变换</li>\n<li>可以嵌套</li>\n<li>参数可以是一列或一个值</li>\n</ul>\n<h4 id=\"数值型函数\"><a class=\"anchor\" href=\"#数值型函数\">#</a> 数值型函数</h4>\n<h5 id=\"基本函数\"><a class=\"anchor\" href=\"#基本函数\">#</a> 基本函数</h5>\n<ul>\n<li><code>ABS(x)</code> ：返回 x 的绝对值</li>\n<li><code>SIGN(x)</code> ：返回 x 的符号，正数 1，负数 - 1,0 返回 0</li>\n<li><code>PI()</code> ：返回圆周率</li>\n<li><code>CEIL(x),CEILING(x)</code> ：返回 <code>&gt;=x</code>  的最小整数</li>\n<li><code>FLOOR(x)</code> ：返回 <code>&lt;=x</code>  的最大整数</li>\n<li><code>LEAST(x1,x2,x3…)</code> ：返回列表最小值</li>\n<li><code>GREATEST(x1,x2,x3…)</code> ：返回列表最大值</li>\n<li><code>MOD(x,y)</code> ：返回 x 除以 y 后的余数</li>\n<li><code>RAND()</code> ：返回 0~1 的随机值</li>\n<li><code>RAND(x)</code> ：返回 0~1 的随机值，相同的 x 值会产生相同的随机数</li>\n<li><code>ROUND(x)</code> ：返回对 x 四舍五入的值</li>\n<li><code>ROUND(x,y)</code> ：返回对 x 四舍五入的值，保留小数点后 y 位</li>\n<li><code>TRUNCATE(x,y)</code> ：返回截断 y 位小数后的结果</li>\n<li><code>SQRT(x)</code> ：返回 x 的平方根，x &lt; 0 返回 NULL</li>\n<li><code>POW(x,y)</code> : 返回 x 的 y 次方</li>\n<li><code>EXP(x)</code> :e 的 x 次方</li>\n<li><code>LN(x)/LOG(x)</code> ：返回<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span><sub>e</sub> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>​</li>\n<li><code>LOG10(x) LOG2(x)</code> : 返回<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span><sub>10</sub> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span><sub>2</sub> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>​</li>\n<li><code>BIN(x) OCT(x) HEX(x)</code> :x 的进制数</li>\n</ul>\n<h4 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h4>\n<ul>\n<li><code>ASCLL(S)</code> : 返回字符串第一个字符的 ASCLL 码</li>\n<li><code>CHAR_LENGTH(S)</code> ：返回字符个数</li>\n<li><code>LENGTH(S)</code> : 返回字节数（中文一个字符占 3 个字节）</li>\n<li><code>CONCAT(S1,S2,S3…)</code> : 连接多个字符串</li>\n<li><code>CONCAT(x,S1,S2,S3…)</code> : 用<em> x</em> 连接多个字符串</li>\n<li><code>INSERT(str,pos,length,newstr)</code> : 将 str 中 pos 位置往后 length 个字符替换成 newstr, 如果 pos 不在字符串的长度范围内，则返回原始字符串。如果 len 不在字符串其余部分的长度范围内，则从位置 pos 替换字符串的其余部分。如果任何参数为 NULL，则返回 NULL</li>\n<li><code>REPLACE(str,from_str,to_str)</code> : 其中所有出现的字符串 from_str 都替换为字符串 to_str</li>\n<li><code>UPPER(S) LOWER(S)</code> : 大小写转换</li>\n<li><code>LEFT(S,n) RIGHT(S,n)</code> : 从左 / 右取 n 个字符</li>\n<li><code>LPAD(str,len,padstr) RPAD(str,len,padstr)</code> : 左 / 右对齐，用字符串 padstr 左 / 右填充到一定长度的 len 字符。如果 str 长于 len，则返回值将缩短为 len 字符。如果 str、padstr 或 len 是 NULL，则函数返回 NULL</li>\n<li><code>LTRIM(S) RTRIM(S) TRIM(S)</code> : 去掉 S 左 / 右 / 开始和结尾 的空格</li>\n<li><code>TRIM(LEADING s1 from s) TRIM(TRAILING s1 from s)TRIM(s1 from s)</code> : 去掉 s 开始 / 结尾 / 开始和结尾 的 s1</li>\n<li><code>REPEAT(str，n)</code> : 返回重复 str 的 n 次重复结果</li>\n<li><code>SPACE(n)</code> : 返回 n 个空格</li>\n<li><code>STRCMP(s1,s2)</code> : 比较两字符串 ASCLL 大小</li>\n<li><code>SUBSTR(str,index,len)</code> : 返回 str 从 index 开始往后 len 个字符</li>\n<li><code>LOCATE(s1,s2)</code> : 返回 s1 在 s2 中首次出现的位置</li>\n<li><code>ELT(n,s1,s2…)</code> :n=1, 返回 s1,n=2, 返回 s2</li>\n<li><code>FIELD(str，s1,s2…)</code> : 返回 str 在字符串列表第一次出现的位置</li>\n<li><code>FIND_INSET(s1,s2)</code> : 返回 s1 在 s2 中出现的位置</li>\n<li><code>REVERSE(s)</code> : 返回反转后的字符串</li>\n<li><code>NULLIF(value1,value2)</code> :value1=value2 返回 NULL, 否则返回 value1</li>\n</ul>\n<h4 id=\"日期和时间函数\"><a class=\"anchor\" href=\"#日期和时间函数\">#</a> 日期和时间函数</h4>\n<ul>\n<li><code>CURDATA()</code> ：返回当前日期</li>\n<li><code>CURTIME()</code> ：返回当前时间</li>\n<li><code>NOW()</code> ：返回当前日期和时间</li>\n<li><code>UNIX_TIMESTAMP()</code> ：返回当前时间的时间戳</li>\n<li><code>UNIX_TIMESTAMP(data)</code> ：返回指定时间 data 的时间戳</li>\n<li><code>FROM_UNIXTIME(timestamp)</code> ：将时间戳转换为普通格式的时间</li>\n<li><code>YEAR(date) / MONTH(date) / DAY(date)</code> ：返回具体的日期值</li>\n<li><code>HOUR(time) / MINUTE(time) / SECOND(time)</code> ：返回具体的时间值</li>\n<li><code>MONTHNAME(date)</code> ：返回月份：January...</li>\n<li><code>DAYNAME(date)</code> ：返回星期几：MONDAY，TUESDAY....SUNDAY</li>\n<li><code>WEEKDAY(date)</code> ：返回周几，注意，周 1 是 0，周 2 是 1… 周日是 6</li>\n<li><code>QUARTER(date)</code> ：返回日期对应的季度，范围为 1-4</li>\n<li><code>WEEK(date)，WEEKOFYEAR(date)</code> ：返回一年中的第几周</li>\n<li><code>DAYOFMONTH(date)</code> ：返回日期位于所在月份的第几天</li>\n<li><code>DAYOFWEEK(date)</code> ：返回周几，注意：周日是 1，周一是 2… 周六是 7</li>\n<li><code>EXTRACT(type FROM data)</code> ：返回指定日期的特定部分，type 指定返回值</li>\n<li><code>TIME_TO_SEC(time)</code> : 将 time 转换为秒返回结果</li>\n<li><code>SEC_TO_TIME(seconds)</code> ：将 seconds 转换为时分秒</li>\n<li><code>ADDTIME(time1，time2)</code> ：返回 time1 加上 time2 的时间。当 time2 为一个数字时，代表的是秒，可以为负数</li>\n<li><code>SUBTIME(time1, time2)</code> ：返回 time1 减去 time2 后的时间。当 time2 为一个数字时，代表的是秒，可以为负数</li>\n<li><code>ADDDATE(date1，date2)</code> ：返回 date1 加上 date2 的时间。当 date2 为一个数字时，代表的是日，可以为负数</li>\n<li><code>SUBDATE(date1, date2)</code> ：返回 date1 减去 date2 后的时间。当 date2 为一个数字时，代表的是日，可以为负数</li>\n<li><code>DATEDIFF(date1, date2)</code> ：返回 date1 - date2 的日期间隔天数</li>\n<li><code>TIMEDIFF(time1, time2)</code> ：返回 time1 - time2 的时间间隔</li>\n<li><code>FROM_DAYS(N)</code> ：返回从 0000 年 1 月 1 日起，N 天以后的日期</li>\n<li><code>TO_DAYS(date)</code> ：返回日期 date 距离 0000 年 1 月 1 日的天数</li>\n<li><code>LAST_DAY(date)</code> ：返回 date 所在月份的最后一天的日期</li>\n<li><code>MAKEDATE(year, n)</code> ：对给定年份与所在年份中的天数返回一个日期</li>\n<li><code>MAKETIME(hour, minute, second)</code> ：将给定的小时、分钟和秒组合成时间并返回</li>\n<li><code>PERIOD_ADD(time, n)</code> ：返回 time 加上 n 后的时间</li>\n<li><code>DATE_FORMAT(date,fmt)</code> ：按照字符串 fmt 格式化日期 date 值</li>\n<li><code>TIME_FORMAT(time,fmt)</code> ：按照字符串 fmt 格式化时间 time 值</li>\n<li><code>GET_FORMAT(date_type,format_type)</code> ：返回日期字符串的显示格式</li>\n<li><code>STR_TO_DATE(str, fmt)</code> ：按照字符串 fmt 对 str 进行解析，解析为一个日期</li>\n</ul>\n<h4 id=\"流程控制函数\"><a class=\"anchor\" href=\"#流程控制函数\">#</a> 流程控制函数</h4>\n<ul>\n<li><code>IF(value,value1,value2)</code> ：如果 value 的值为 TRUE，返回 value1，否则返回 value2</li>\n<li><code>IFNULL(value1, value2)</code> ：如果 value1 不为 NULL，返回 value1，否则返回 value2</li>\n<li><code>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ELSE 值n END</code> ：相当于 Java 的 if...else if...else...</li>\n<li><code>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值2 THEN 值2 ELSE 值n  END</code> ：相当于 Java 的 switch...case...</li>\n</ul>\n<h3 id=\"聚合函数分组函数\"><a class=\"anchor\" href=\"#聚合函数分组函数\">#</a> 聚合函数（分组函数）</h3>\n<ul>\n<li>作用于一组数据，并返回一个值</li>\n</ul>\n<h4 id=\"1常见的聚合函数\"><a class=\"anchor\" href=\"#1常见的聚合函数\">#</a> 1. 常见的聚合函数</h4>\n<h5 id=\"avg-sum数值\"><a class=\"anchor\" href=\"#avg-sum数值\">#</a> AVG / SUM（数值）</h5>\n<ul>\n<li>\n<p>会自动过滤 NULL 值</p>\n</li>\n<li>\n<p>AVG: 求平均值</p>\n</li>\n<li>\n<p>SUM：总和</p>\n</li>\n</ul>\n<h5 id=\"max-min数值字符串类日期-时间类\"><a class=\"anchor\" href=\"#max-min数值字符串类日期-时间类\">#</a> MAX / MIN（数值 / 字符串类 / 日期、时间类）</h5>\n<ul>\n<li>\n<p>MAX：最大值</p>\n</li>\n<li>\n<p>MIN：最小值</p>\n</li>\n</ul>\n<h5 id=\"count\"><a class=\"anchor\" href=\"#count\">#</a> COUNT</h5>\n<ul>\n<li>作用：计算 <code>指定字段</code> 在查询结果中出现的个数，不计算 NULL 值</li>\n<li>查询表中所有记录\n<ul>\n<li>COUNT(*)</li>\n<li>COUNT(all integer)</li>\n<li>COUNT (field): 不一定完整，因为不计算 NULL 值</li>\n</ul>\n</li>\n<li>AVG = SUM / COUNT</li>\n</ul>\n<h4 id=\"2group-by-f1f2\"><a class=\"anchor\" href=\"#2group-by-f1f2\">#</a> 2.GROUP BY f1,f2…</h4>\n<blockquote>\n<p>引入：查询各个部门的平均工资 / 最高工资等，需要将所有员工按照部门分到相应的组</p>\n</blockquote>\n<ul>\n<li>\n<p>一组一条字段</p>\n</li>\n<li>\n<p>SELECT 中出现的非组函数的字段必须声明在 GROUP BY 中</p>\n</li>\n<li>\n<p>GROUP BY 中声明的字段可以不出现在 SELECT 中</p>\n</li>\n<li>\n<p>GROUP BY 声明位置：</p>\n<ul>\n<li>FROM</li>\n<li>WHERE</li>\n<li>GROUP BY</li>\n<li>ORDER BY</li>\n<li>LIMIT</li>\n</ul>\n</li>\n<li>\n<p>WITH ROLLUP：在所有查询出的分组记录之后增加一条所有记录的总和，即统计记录数量</p>\n<ul>\n<li>\n<blockquote>\n<p>使用 ROLLUP 时，不能同时使用 ORDER BY 排序，两者互斥</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3having\"><a class=\"anchor\" href=\"#3having\">#</a> 3.HAVING</h4>\n<ul>\n<li>HAVING 用于过滤数据</li>\n<li>HAVING 与 GROUP BY 一起使用，且在 GROUP BY 后面</li>\n<li>当过滤条件使用聚合函数，必须使用 HAVING 替换 WHERE</li>\n<li>当过滤条件没有聚合函数，使用 WHERE (效率更高)</li>\n<li>HAVING 使用范围更广</li>\n</ul>\n<h4 id=\"sql底层原理\"><a class=\"anchor\" href=\"#sql底层原理\">#</a> SQL 底层原理</h4>\n<ul>\n<li>\n<p>SELECT 完整结构</p>\n<ul>\n<li></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">ON</span> 多表连接条件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">ON</span> 多表连接条件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>不包含聚合函数的过滤条件<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">HAVING</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>不包含聚合函数的过滤条件<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ASC</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">LIMIT</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行顺序</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token comment\">---> ON ---> LEFT / RIGHT JOIN ---> WHERE ---></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token comment\">---> HAVING ---> SELECT ---> ORDER BY ---></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">LIMIT</span></pre></td></tr></table></figure></li>\n<li>\n<blockquote>\n<p>由此知道当过滤条件没有聚合函数，使用 WHERE 效率更高的原因，HAVING 要等 GROUP BY 对数据进行分组后再执行过滤，而 WHERE 省略了这一步骤</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>SELECT 声明的别名只能在后面使用，而不能在之前使用，如 WHERE</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"子查询\"><a class=\"anchor\" href=\"#子查询\">#</a> 子查询</h3>\n<h4 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h4>\n<ul>\n<li>\n<p>查询语句的嵌套</p>\n</li>\n<li>\n<p>提升查询的效率</p>\n</li>\n<li>\n<p>分类一：  <code>外查询（主查询） 内查询（子查询）</code></p>\n<ul>\n<li>\n<p>子查询（内查询）在主查询之前一次执行完成</p>\n</li>\n<li>\n<p>子查询的结果被主查询使用</p>\n</li>\n<li>\n<blockquote>\n<p>子查询要包含在括号内</p>\n<p>将子查询放在比较条件的右侧</p>\n<p>单行操作符对应单行子查询，多行操作符对应多行子查询</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>分类二： <code>相关子查询 不相关子查询</code></p>\n<ul>\n<li>不相关子查询：子查询从数据表查到了结果，结果只执行一次，然后该结果用于主查询的条件执行</li>\n<li>相关子查询：子查询需要执行多次，先从外部查询开始，每次都传入子查询进行查询，然后再返回结果给外部</li>\n</ul>\n</li>\n<li>\n<p>处理 GROUP BY 和 LIMIT ，其他地方均可以使用子查询</p>\n</li>\n</ul>\n<h4 id=\"单行子查询\"><a class=\"anchor\" href=\"#单行子查询\">#</a> 单行子查询</h4>\n<ul>\n<li>单行操作符：= != &gt; &gt;= &lt;= &lt;</li>\n<li>编写技巧：\n<ul>\n<li>从里往外写</li>\n<li>从外往里写（需求比较长时）</li>\n</ul>\n</li>\n<li>空值情况：如果子查询的结果为 NULL, 则子查询不返回任何行，主查询不显示任何数据</li>\n<li>非法子查询：如 = 右边返回的是多条数据（如分组）</li>\n</ul>\n<h4 id=\"多行子查询\"><a class=\"anchor\" href=\"#多行子查询\">#</a> 多行子查询</h4>\n<ul>\n<li>内查询返回多行</li>\n<li>使用多行比较运算符</li>\n<li>IN：等于列表中的任意一个</li>\n<li>ANY：和单行操作符一起使用，等于任一个（满足有一个就行）</li>\n<li>ALL：和单行操作符一起使用，与返回的所有值进行比较（满足所有）</li>\n<li>空值情况：如果子查询的结果为 NULL, 则子查询不返回任何行，主查询不显示任何数据</li>\n</ul>\n<h4 id=\"more\"><a class=\"anchor\" href=\"#more\">#</a> more</h4>\n<ul>\n<li>除了 GROUP BY 和 LIMIT , 其他地方都可以使用子查询</li>\n<li>处理 AVG 和 MAX/MIN 时，将 AVG 重写成一个表，将 AVG 定义一个字段，放于 FROM 中，MAX (字段)/MIN (字段) 即可</li>\n</ul>\n<h2 id=\"ddl-创建-修改-删除-库-表\"><a class=\"anchor\" href=\"#ddl-创建-修改-删除-库-表\">#</a> DDL 创建 修改 删除 库、表</h2>\n<h3 id=\"创建数据库\"><a class=\"anchor\" href=\"#创建数据库\">#</a> 创建数据库</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">CREATE</span> DATEBASE <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> mydata <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> ‘utf8’<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看所有数据库 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看建库语句 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> DATEBASE mydata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 切换数据库</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">USE</span> mydata2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 查看当前数据库的表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 查看指定数据库的表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span> <span class=\"token keyword\">FROM</span> mydata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 查看当前使用的数据库</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> DUAL<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"修改数据库\"><a class=\"anchor\" href=\"#修改数据库\">#</a> 修改数据库</h3>\n<ul>\n<li>修改指定字符集 ALTER DATEBASE mydata CHARACTER SET ‘utf8’;</li>\n<li>数据库名不能更改</li>\n</ul>\n<h3 id=\"删除数据库\"><a class=\"anchor\" href=\"#删除数据库\">#</a> 删除数据库</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token keyword\">DATABASE</span> mydata<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"创建表\"><a class=\"anchor\" href=\"#创建表\">#</a> 创建表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 方式一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> mytable<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">date</span> <span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 查看表结构</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">DESC</span> mytable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 查看建表语句</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> mytable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 方式二</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 基于现有的表创建表，并导入数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># SELECT 可有多种语句，如左连接，子查询等，将查询的语句做新表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> mytable2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">AS</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span><span class=\"token keyword\">date</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">from</span> mytable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># WHERE 1 = 2; 只创建字段，不导入数据</span></pre></td></tr></table></figure><h3 id=\"修改表\"><a class=\"anchor\" href=\"#修改表\">#</a> 修改表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加一个字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 默认添加到最后一列</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> mytable01</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ADD</span> salary <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 添加到指定位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> mytable01</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">ADD</span> age <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AFTER</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 修改字段（一般不会修改，可能修改大小）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> mytable01</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">MODIFY</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 重命名字段</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> mytable01</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CHANGE name my_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 删除字段</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> mytable01</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">DROP</span> my_date<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"重命名表\"><a class=\"anchor\" href=\"#重命名表\">#</a> 重命名表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 重命名表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TABLE</span> mytable01</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">TO</span> mytable<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"删除表\"><a class=\"anchor\" href=\"#删除表\">#</a> 删除表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除表 表结构和数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> tasks<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"清空表\"><a class=\"anchor\" href=\"#清空表\">#</a> 清空表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 清空表 数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">TRUNCATE</span> <span class=\"token keyword\">TABLE</span> mytable01<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<h2 id=\"dcl\"><a class=\"anchor\" href=\"#dcl\">#</a> DCL</h2>\n<h3 id=\"commit\"><a class=\"anchor\" href=\"#commit\">#</a> COMMIT；</h3>\n<ul>\n<li>提交数据，一旦执行，数据永久保存到数据库中，不可以回滚</li>\n</ul>\n<h3 id=\"rollback\"><a class=\"anchor\" href=\"#rollback\">#</a> ROLLBACK；</h3>\n<ul>\n<li>回滚数据，一旦执行，实现数据的回滚，回滚到<strong>最近的一次</strong> COMMIT 之后</li>\n</ul>\n</blockquote>\n<h3 id=\"回滚\"><a class=\"anchor\" href=\"#回滚\">#</a> 回滚</h3>\n<ul>\n<li>TRUNCATE TABLE：清除全部表数据，不可以回滚，代表<strong> DDL</strong></li>\n<li>DELETE FROM：不带 WHERE 字句时，表数据可以全部清除，数据可以回滚，代表<strong> DML</strong></li>\n<li>DDL：操作一旦执行，不可回滚，指令 <code>SET autocommit = FALSE;</code>  失效</li>\n<li>DML：默认执行后也不可回滚，如果执行 DML 之前 <code>SET autocommit = FALSE;</code>  则可以实现回滚</li>\n</ul>\n<h2 id=\"dml-增删改-数据\"><a class=\"anchor\" href=\"#dml-增删改-数据\">#</a> DML 增删改 数据</h2>\n<ul>\n<li>默认执行后不可回滚，如果执行 DML 之前 <code>SET autocommit = FALSE;</code>  则可以实现回滚</li>\n</ul>\n<h3 id=\"添加数据\"><a class=\"anchor\" href=\"#添加数据\">#</a> 添加数据</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加多条记录 按照表后括号顺序添加，字段数量可少，但少的字段需要可以设置 NULL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> mytable01<span class=\"token punctuation\">(</span>my_name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Curry'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token string\">'James'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 将查询的结果添加到表中 字段顺序要对应，mytable02 的字段长度不能低于 mytable01 的字段长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> mytable02<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>my_name<span class=\"token punctuation\">,</span>salary</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">FROM</span> mytable01<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"删除数据\"><a class=\"anchor\" href=\"#删除数据\">#</a> 删除数据</h3>\n<ul>\n<li>DELETE…WHERE…</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> mytable02</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"更新数据\"><a class=\"anchor\" href=\"#更新数据\">#</a> 更新数据</h3>\n<ul>\n<li>UPDATE…SET…WHERE…</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> mytable02</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SET</span> salary <span class=\"token operator\">=</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Jordan'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sql80-新特性\"><a class=\"anchor\" href=\"#sql80-新特性\">#</a> sql8.0 新特性</h3>\n<ul>\n<li>计算列</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> cauculate<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    num1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    num2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sum <span class=\"token keyword\">int</span> GENERATED ALWAYS <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                      <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span> VIRTUAL</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"整型\"><a class=\"anchor\" href=\"#整型\">#</a> 整型</h3>\n<h2 id=\"约束\"><a class=\"anchor\" href=\"#约束\">#</a> 约束</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<ul>\n<li>数据完整性是指数据的<strong>精确性</strong>和<strong>可靠性</strong></li>\n<li><strong>实体完整性</strong> ：例如，同一个表中，不能存在两条完全相同无法区分的记录</li>\n<li><strong>域完整性</strong> ：例如：年龄范围 0-120，性别范围 “男 / 女”</li>\n<li><strong>引用完整性</strong> ：例如：员工所在部门，在部门表中要能找到这个部门</li>\n<li><strong>用户自定义完整性</strong> ：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的 5 倍</li>\n</ul>\n<h3 id=\"约束分类\"><a class=\"anchor\" href=\"#约束分类\">#</a> 约束分类</h3>\n<ul>\n<li>\n<p>根据约束数据列的限制</p>\n<ul>\n<li>\n<p>单列约束：每个约束只约束一列</p>\n</li>\n<li>\n<p>多列约束：每个约束可约束多列数据</p>\n</li>\n</ul>\n</li>\n<li>\n<p>根据约束的作用范围</p>\n<ul>\n<li>列级约束：只能作用在一个列上，跟在列的定义后面</li>\n<li>表级约束：可以作用在多个列上，不与列一起，而是单独定义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">位置</th>\n<th style=\"text-align:center\">支持的约束类型</th>\n<th style=\"text-align:center\">是否可以起约束名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">列级约束</td>\n<td style=\"text-align:center\">列的后面</td>\n<td style=\"text-align:center\">语法都支持，但外键没有效果</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表级约束</td>\n<td style=\"text-align:center\">所有列的下面</td>\n<td style=\"text-align:center\"><code>默认和非空</code> 不支持，其他支持</td>\n<td style=\"text-align:center\">可以（主键没有效果）</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>根据约束起的作用，约束可分为：</p>\n<ul>\n<li>NOT NULL 非空约束，规定某个字段不能为空</li>\n<li>UNIQUE 唯一约束，规定某个字段在整个表中是唯一的</li>\n<li>PRIMARY KEY 主键 (非空且唯一) 约束</li>\n<li>FOREIGN KEY 外键约束</li>\n<li>CHECK 检查约束</li>\n<li>DEFAULT 默认值约束</li>\n</ul>\n<blockquote>\n<p>注意： sql 不支持 check 约束，但可以使用 check 约束，而没有任何效果</p>\n</blockquote>\n</li>\n<li>\n<p>查看某个表已有的约束</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#information_schema 数据库名（系统库）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#table_constraints 表名称（专门存储各个表的约束）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span>table_constraints </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> table_name <span class=\"token operator\">=</span> <span class=\"token string\">'表名称'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"非空约束\"><a class=\"anchor\" href=\"#非空约束\">#</a> 非空约束</h3>\n<ul>\n<li>\n<p>NOT NULL</p>\n</li>\n<li>\n<p><code>不支持表级约束</code></p>\n</li>\n<li>\n<p>默认所有的类型的值都可以是 NULL，包括 INT、FLOAT 等数据类型</p>\n</li>\n<li>\n<p>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</p>\n</li>\n<li>\n<p>一个表可以有很多列都分别限定了非空</p>\n</li>\n<li>\n<p>空字符串 '' 不等于 NULL，0 也不等于 NULL</p>\n</li>\n<li>\n<p>添加非空约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#建表时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型 <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型 <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#建表后</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除非空约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#去掉 not null，相当于修改某个非注解字段，该字段允许为空 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型 <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#或</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"唯一性约束\"><a class=\"anchor\" href=\"#唯一性约束\">#</a> 唯一性约束</h3>\n<ul>\n<li>\n<p>UNIQUE KEY</p>\n</li>\n<li>\n<p>同一个表可以有多个唯一约束</p>\n</li>\n<li>\n<p>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一</p>\n</li>\n<li>\n<p><code>唯一性约束允许列值为NULL</code></p>\n</li>\n<li>\n<p>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同</p>\n</li>\n<li>\n<p>添加唯一约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#建表时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">unique</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">constraint</span> 约束名 <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>字段列表<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#表示用户名和密码组合不能重复</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">USER</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> id <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> password <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">-- 使用表级约束语法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">CONSTRAINT</span> uk_name_pwd <span class=\"token keyword\">UNIQUE</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#建表后指定唯一键约束</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#字段列表中如果是一个字段，表示该列的值唯一</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">add</span> <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>字段列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>复合唯一约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>字段列表<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除唯一约束</p>\n<ul>\n<li>\n<p>添加唯一性约束的列上也会自动创建唯一索引</p>\n</li>\n<li>\n<p>删除唯一约束 <code>只能通过</code> 删除唯一索引的方式删除</p>\n</li>\n<li>\n<p>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样</p>\n</li>\n<li>\n<p>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和 () 中排在 <code>第一个的列名</code> 相同。也可以自定义唯一性约束名</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">USER</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">INDEX</span> uk_name_pwd<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<blockquote>\n<p>可以通过  <code>show index from 表名称;</code>  查看表的索引</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"primary-key-约束\"><a class=\"anchor\" href=\"#primary-key-约束\">#</a> PRIMARY KEY 约束</h3>\n<ul>\n<li>\n<p>PRIMARY KEY</p>\n</li>\n<li>\n<p>用来唯一标识表中的一行记录</p>\n</li>\n<li>\n<p>主键约束相当于<strong>唯一约束 + 非空约束</strong>的组合，主键约束列不允许重复，也不允许出现空值</p>\n</li>\n<li>\n<p>一个表最多 <code>只能有一个</code> 主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</p>\n</li>\n<li>\n<p>主键约束对应着表中的一列或者多列（复合主键）</p>\n</li>\n<li>\n<p>如果是多列组合的复合主键约束，那么这些列都 <code>不允许为空值</code> ，并且 <code>组合的值不允许重复</code> 。</p>\n</li>\n<li>\n<p><code>sql的主键名总是PRIMARY</code> ，就算自己命名了主键约束名也没用。</p>\n</li>\n<li>\n<p>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的主键索引（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</p>\n</li>\n<li>\n<p>不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性</p>\n</li>\n<li>\n<p>添加主键约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#建表时添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#列级模式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">constraint</span> 约束名 <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span> <span class=\"token comment\">#表级模式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表后添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名称 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>字段列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 复合主键</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>字段名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>字段名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#表示字段 1 和字段 2 的组合是唯一的，也可以有更多个字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除主键约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">drop</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自增列-auto_increment\"><a class=\"anchor\" href=\"#自增列-auto_increment\">#</a> 自增列 AUTO_INCREMENT</h3>\n<ul>\n<li>\n<p>AUTO_INCREMENT</p>\n</li>\n<li>\n<p>某个字段的值自增</p>\n</li>\n<li>\n<p>一个表最多 <code>只能有一个自增长列</code></p>\n</li>\n<li>\n<p>当需要产生唯一标识符或顺序值时，可设置自增长</p>\n</li>\n<li>\n<p>自增长列约束的列 <code>必须是键列（主键列，唯一键列）</code></p>\n</li>\n<li>\n<p>自增约束的列的数据类型必须是整数类型</p>\n</li>\n<li>\n<p>如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值，且之后按此具体值自增</p>\n</li>\n<li>\n<p>添加自增约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    字段名  数据类型  <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> 默认值<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    字段名  数据类型 <span class=\"token keyword\">default</span> 默认值 <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    字段名  数据类型 <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    字段名  数据类型 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> 默认值<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表后</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型 <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除自增约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>sql 8.0 新特性 — 自增变量的持久化:sql 8.0 将自增主键的计数器持久化到 <code>重做日志</code> 中。每次计数器发生改变，都会将其写入重做日志中。如果数据库重启，InnoDB 会根据重做日志中的信息来初始化计数器的内存值</p>\n</li>\n</ul>\n<h3 id=\"foreign-key-约束了解\"><a class=\"anchor\" href=\"#foreign-key-约束了解\">#</a> *FOREIGN KEY 约束（了解）</h3>\n<ul>\n<li>\n<p>从表的外键列，必须引用 / 参考主表的 <code>主键或唯一约束</code> 的列</p>\n</li>\n<li>\n<p>在创建外键约束时，如果不给外键约束命名，默认名不是列名，而是自动产生一个外键名（例如 student_ibfk_1;），也可以指定外键约束名。(建议起别名)</p>\n</li>\n<li>\n<p>创建 (CREATE) 表时就指定外键约束的话，先创建主表，再创建从表</p>\n</li>\n<li>\n<p>删表时，先删从表（或先删除外键约束），再删除主表</p>\n</li>\n<li>\n<p>在 **“从表”** 中指定外键约束，并且一个表可以建立多个外键约束</p>\n</li>\n<li>\n<p>从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。</p>\n</li>\n<li>\n<p>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引。但是索引名是外键的约束<br />\n名。（根据外键查询效率很高）</p>\n</li>\n<li>\n<p>删除外键约束后，必须手动删除对应的索引</p>\n</li>\n<li>\n<p>添加外键约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 主表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段<span class=\"token number\">1</span>  数据类型  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段<span class=\"token number\">2</span>  数据类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 从表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    字段<span class=\"token number\">1</span>  数据类型  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    字段<span class=\"token number\">2</span>  数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">CONSTRAINT</span> 外键约束名称 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span>（从表的某个字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> 主表名<span class=\"token punctuation\">(</span>被参考字段<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表后</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">CONSTRAINT</span> 外键约束名称 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span>（从表的某个字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> 主表名<span class=\"token punctuation\">(</span>被参考字段<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>Cascade 方式 ：在父表上 update/delete 记录时，同步 update/delete 掉子表的匹配记录</p>\n</li>\n<li>\n<p>对于外键约束，最好是采用:   <code>ON UPDATE CASCADE ON DELETE RESTRICT</code>   的方式</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> emp<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    eid <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">#员工编号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ename <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">#员工姓名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    deptid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">#员工所在的部门</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>deptid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> dept<span class=\"token punctuation\">(</span>did<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">cascade</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">set</span> <span class=\"token boolean\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#把修改操作设置为级联修改等级，把删除操作设置为 set null 等级</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除外键约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第一步先查看约束名和删除外键约束</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span>table_constraints <span class=\"token keyword\">WHERE</span> table_name <span class=\"token operator\">=</span> <span class=\"token string\">'表名称'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#查看某个</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>表的约束名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 从表名 <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> 外键约束名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 第二步查看索引名和删除索引。（注意，只能手动删除）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">FROM</span> 表名称<span class=\"token punctuation\">;</span> <span class=\"token comment\">#查看某个表的索引名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 从表名 <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">INDEX</span> 索引名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>不得使用外键与级联，一切外键概念必须在应用层（用 java 进行外键约束的使用）解决</p>\n</li>\n</ul>\n<h3 id=\"check-约束\"><a class=\"anchor\" href=\"#check-约束\">#</a> CHECK 约束</h3>\n<ul>\n<li>\n<p>CHECK</p>\n</li>\n<li>\n<p>检查某个字段的值是否符号 xx 要求，一般指的是值的范围</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">temp</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NAME <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>age <span class=\"token keyword\">INT</span> <span class=\"token keyword\">CHECK</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"default约束\"><a class=\"anchor\" href=\"#default约束\">#</a> DEFAULT 约束</h3>\n<ul>\n<li>\n<p>DEFAULT</p>\n</li>\n<li>\n<p>给某个字段 / 某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p>\n</li>\n<li>\n<p>默认值约束一般<strong>不在唯一键和主键列</strong>上加</p>\n</li>\n<li>\n<p>添加默认值约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名称<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    字段名  数据类型  <span class=\"token keyword\">unique</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    字段名  数据类型  <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> 默认值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建表后</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型 <span class=\"token keyword\">default</span> 默认值<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除默认值约束</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#删除默认值约束，也不保留非空约束</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型 <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#删除默认值约束，保留非空约束</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名称 <span class=\"token keyword\">modify</span> 字段名 数据类型  <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"视图\"><a class=\"anchor\" href=\"#视图\">#</a> 视图</h2>\n<h3 id=\"视图概述\"><a class=\"anchor\" href=\"#视图概述\">#</a> 视图概述</h3>\n<ul>\n<li>视图是一种 虚拟表 ，本身是<strong>不具有数据</strong>的，占用很少的内存空间</li>\n<li>视图建立在已有表的基础上，视图赖以建立的这些表称为<strong>基表</strong></li>\n<li>视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然</li>\n<li>向视图提供数据内容的语句为 SELECT 语句，可以将视图理解为<strong>存储起来的 SELECT 语句</strong></li>\n</ul>\n<h3 id=\"创建视图\"><a class=\"anchor\" href=\"#创建视图\">#</a> 创建视图</h3>\n<ul>\n<li>\n<p>精简版</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> 视图名称<span class=\"token punctuation\">(</span>列表<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> 查询语句<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> emp_year_salary <span class=\"token punctuation\">(</span>ename<span class=\"token punctuation\">,</span>year_salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> ename<span class=\"token punctuation\">,</span>salary<span class=\"token operator\">*</span><span class=\"token number\">12</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>IFNULL<span class=\"token punctuation\">(</span>commission_pct<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span> t_employee<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> salvu50</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span>  employee_id ID_NUMBER<span class=\"token punctuation\">,</span> last_name NAME<span class=\"token punctuation\">,</span>salary<span class=\"token operator\">*</span><span class=\"token number\">12</span> ANN_SALARY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span>    employees</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">WHERE</span>   department_id <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>多表也如此</p>\n</li>\n</ul>\n</li>\n<li>\n<p>基于视图创建视图以此类推</p>\n</li>\n</ul>\n<h3 id=\"查看视图\"><a class=\"anchor\" href=\"#查看视图\">#</a> 查看视图</h3>\n<ul>\n<li>查看数据库的表对象、视图对象\n<ul>\n<li><code>SHOW TABLES;</code></li>\n</ul>\n</li>\n<li>查看视图的结构\n<ul>\n<li><code>DESC 视图名称;</code></li>\n</ul>\n</li>\n<li>查看视图的属性信息\n<ul>\n<li><code>SHOW TABLE STATUS LIKE '视图名称';</code></li>\n</ul>\n</li>\n<li>查看视图的详细定义信息\n<ul>\n<li><code>SHOW CREATE VIEW 视图名称;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新视图\"><a class=\"anchor\" href=\"#更新视图\">#</a> 更新视图</h3>\n<ul>\n<li>视图作为虚拟表，主要用于<strong>方便查询</strong>，<strong>不建议</strong>更新视图的数据。对视图数据的更改，都是通过对<strong>实际数据表</strong>里数据的操作来完成的</li>\n</ul>\n<h3 id=\"修改-删除视图\"><a class=\"anchor\" href=\"#修改-删除视图\">#</a> 修改 删除视图</h3>\n<h4 id=\"修改视图\"><a class=\"anchor\" href=\"#修改视图\">#</a> 修改视图</h4>\n<ul>\n<li>\n<p>方式一</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> 视图名称</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>字段列表<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">AS</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> 语句<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>方式二</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">VIEW</span> 视图名称 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>查询语句<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除视图\"><a class=\"anchor\" href=\"#删除视图\">#</a> 删除视图</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> 视图名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> 视图名称<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>视图名称<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>视图名称<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"存储过程-函数\"><a class=\"anchor\" href=\"#存储过程-函数\">#</a> 存储过程、函数</h2>\n<h3 id=\"存储过程\"><a class=\"anchor\" href=\"#存储过程\">#</a> 存储过程</h3>\n<h4 id=\"基本介绍-2\"><a class=\"anchor\" href=\"#基本介绍-2\">#</a> 基本介绍</h4>\n<ul>\n<li>一组经过预先编译的 SQL 语句的封装</li>\n<li>存储过程是程序化的 SQL，可以直接操作底层数据表</li>\n<li>存储过程没有返回值</li>\n<li>分类\n<ul>\n<li>没有参数（无参数无返回）</li>\n<li>仅仅带 IN 类型（有参数无返回）</li>\n<li>仅仅带 OUT 类型（无参数有返回）</li>\n<li>既带 IN 又带 OUT（有参数有返回）</li>\n<li>带 INOUT（有参数有返回）</li>\n<li>IN、OUT、INOUT 都可以在一个存储过程中带多个</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建存储过程\"><a class=\"anchor\" href=\"#创建存储过程\">#</a> 创建存储过程</h4>\n<ul>\n<li>\n<p><code>IN</code>  ：当前参数为输入参数，也就是表示入参；如果没有定义参数种类， 默认就是 IN</p>\n</li>\n<li>\n<p><code>OUT</code>  ：当前参数为输出参数，也就是表示出参</p>\n</li>\n<li>\n<p><code>INOUT</code>  ：当前参数既可以为输入参数，也可以为输出参数</p>\n</li>\n<li>\n<p>形参类型可以是 sql 数据库中的任意类型。</p>\n</li>\n<li>\n<p><code>characteristics</code>   表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p>\n</li>\n<li>\n<p><code>LANGUAGE SQL</code>  ：说明存储过程执行体是由 SQL 语句组成的，当前系统支持的语言为 SQL。</p>\n</li>\n<li>\n<p><code>[NOT] DETERMINISTIC</code>  ：指明存储过程执行的结果是否确定。DETERMINISTIC 表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC 表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为 NOT DETERMINISTIC。</p>\n</li>\n<li>\n<p><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</code>  ：指明子程序使用 SQL 语句的限制。</p>\n<ul>\n<li>\n<p>CONTAINS SQL 表示当前存储过程的子程序包含 SQL 语句，但是并不包含读写数据的 SQL 语句；</p>\n</li>\n<li>\n<p>NO SQL 表示当前存储过程的子程序中不包含任何 SQL 语句；</p>\n</li>\n<li>\n<p>READS SQL DATA 表示当前存储过程的子程序中包含读数据的 SQL 语句；</p>\n</li>\n<li>\n<p>MODIFIES SQL DATA 表示当前存储过程的子程序中包含写数据的 SQL 语句。</p>\n</li>\n<li>\n<p>默认情况下，系统会指定为 CONTAINS SQL。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code>  ：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。</p>\n<ul>\n<li>DEFINER 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li>\n<li>INVOKER 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。如果没有设置相关的值，则 sql 默认指定值为 DEFINER。</li>\n</ul>\n</li>\n<li>\n<p><code>COMMENT 'string'</code>  ：注释信息，可以用来描述存储过程。</p>\n</li>\n<li>\n<p>需要设置新的结束标记</p>\n<ul>\n<li>因为 sql 默认的语句结束符号为分号‘;’。为了避免与存储过程中 SQL 语句结束符相冲突，需要使用 <code>DELIMITER</code>  改变存储过程的结束符。<br />\n比如：“DELIMITER //” 语句的作用是将 sql 的结束符设置为 //，并以 “END //” 结束存储过程。存储过程定义完毕之后再使用 “DELIMITER ;” 恢复默认结束符。</li>\n<li>DELIMITER 也可以指定其他符号作为结束符。当使用 DELIMITER 命令时，应该避免使用反斜杠（‘\\’）字符，因为反斜线是 sql 的转义字符</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> select_all_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> emps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">END</span> $</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">call</span> select_all_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> show_min_salary<span class=\"token punctuation\">(</span><span class=\"token keyword\">OUT</span> ms <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> ms <span class=\"token keyword\">FROM</span> emps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">call</span> show_min_salary<span class=\"token punctuation\">(</span><span class=\"token variable\">@ms</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@ms</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> show_someone_salary<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> empname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">FROM</span> emps <span class=\"token keyword\">WHERE</span> ename <span class=\"token operator\">=</span> empname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">call</span> show_someone_salary<span class=\"token punctuation\">(</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> show_mgr_name<span class=\"token punctuation\">(</span><span class=\"token keyword\">INOUT</span> empname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token keyword\">SELECT</span> ename <span class=\"token keyword\">INTO</span> empname <span class=\"token keyword\">FROM</span> emps</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token keyword\">WHERE</span> eid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> MID <span class=\"token keyword\">FROM</span> emps <span class=\"token keyword\">WHERE</span> ename<span class=\"token operator\">=</span>empname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#使用变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">SET</span> <span class=\"token variable\">@name</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">call</span> show_mgr_name<span class=\"token punctuation\">(</span><span class=\"token variable\">@name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">select</span> <span class=\"token variable\">@name</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"存储函数\"><a class=\"anchor\" href=\"#存储函数\">#</a> 存储函数</h3>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> 函数名<span class=\"token punctuation\">(</span>参数名 参数类型<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">RETURNS</span> 返回值类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>characteristics <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    函数体   <span class=\"token comment\">#函数体中肯定有 RETURN 语句</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#调用函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span> 函数名<span class=\"token punctuation\">(</span>实参列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>FUNCTION 中总是默认为 <code>IN</code>  参数。</p>\n</li>\n<li>\n<p><code>RETURNS type;</code>  语句表示函数返回数据的类型</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> email_by_id<span class=\"token punctuation\">(</span>emp_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">DETERMINISTIC</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CONTAINS</span> <span class=\"token keyword\">SQL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">RETURN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> email <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token variable\">@emp_id</span> <span class=\"token operator\">=</span> <span class=\"token number\">102</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> email_by_id<span class=\"token punctuation\">(</span><span class=\"token variable\">@emp_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>关键字</th>\n<th>调用语法</th>\n<th>返回值</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储过程</td>\n<td>PROCEDURE</td>\n<td>CALL</td>\n<td>理解为有 0 个或多个</td>\n<td>一般用于更新</td>\n</tr>\n<tr>\n<td>存储函数</td>\n<td>FUNCTION</td>\n<td>SELECT</td>\n<td>只能是一个</td>\n<td>一般用于查询结果为一个值并返回时</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h3>\n<ul>\n<li>\n<p>只是修改相关特性</p>\n</li>\n<li>\n<p>修改存储过程使用 ALTER PROCEDURE 语句，修改存储函数使用 ALTER FUNCTION 语句</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">PROCEDURE</span> CountProc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">MODIFIES</span> <span class=\"token keyword\">SQL</span> <span class=\"token keyword\">DATA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SQL</span> SECURITY <span class=\"token keyword\">INVOKER</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> CountProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FUNCTION</span> CountProc<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"变量-流程控制-游标\"><a class=\"anchor\" href=\"#变量-流程控制-游标\">#</a> 变量 流程控制 游标</h2>\n<h3 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h3>\n<h4 id=\"基本介绍-3\"><a class=\"anchor\" href=\"#基本介绍-3\">#</a> 基本介绍</h4>\n<ul>\n<li>变量分为 系统变量 用户自定义变量</li>\n</ul>\n<h3 id=\"系统变量\"><a class=\"anchor\" href=\"#系统变量\">#</a> 系统变量</h3>\n<ul>\n<li>属于服务器层面</li>\n<li>全局系统变量（需要添加<strong> global</strong> 关键字）</li>\n<li>会话系统变量（需要添加<strong> session</strong> 关键字）</li>\n<li>如果不写，默认会话级别</li>\n<li>全局系统变量针对于所有会话（连接）有效，但不能跨重启</li>\n<li>会话系统变量仅针对于当前会话（连接）有效</li>\n</ul>\n<h4 id=\"查看系统变量\"><a class=\"anchor\" href=\"#查看系统变量\">#</a> 查看系统变量</h4>\n<ul>\n<li>查看所有或部分系统变量</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看所有全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">GLOBAL</span> VARIABLES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#查看所有会话变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">SESSION</span> VARIABLES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SHOW</span> VARIABLES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#查看满足条件的部分系统变量。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">GLOBAL</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%标识符%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#查看满足条件的部分会话变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">SESSION</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%标识符%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">GLOBAL</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'admin_%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>查看指定系统变量\n<ul>\n<li>sql 中的系统变量以 两个 “@” 开头</li>\n<li>“@@global” 仅用于标记全局系统变量</li>\n<li>“@@session” 仅用于标记会话系统变量</li>\n<li>“@@” 首先标记会话系统变量，如果会话系统变量不存在，<br />\n则标记全局系统变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看指定的系统变量的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@global.</span>变量名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#查看指定的会话变量的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@session.</span>变量名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#或者</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> @@变量名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>修改系统变量的值\n<ul>\n<li>修改 sql 配置文件 ，继而修改 sql 系统变量的值（该方法需要重启 sql 服务）</li>\n<li>在 sql 服务运行期间，使用 “set” 命令重新设置系统变量的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#为某个系统变量赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#方式 1：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#SET @@global. 变量名 = 变量值；</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#方式 2：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token keyword\">GLOBAL</span> 变量名<span class=\"token operator\">=</span>变量值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#为某个会话变量赋值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#方式 1：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#SET @@session. 变量名 = 变量值；</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#方式 2：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token keyword\">SESSION</span> 变量名<span class=\"token operator\">=</span>变量值<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"用户变量\"><a class=\"anchor\" href=\"#用户变量\">#</a> 用户变量</h3>\n<ul>\n<li>会话用户变量：作用域和会话变量一样，只对<strong>当前连接会话</strong>有效。</li>\n<li>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在<strong>存储过程和函数</strong>中使用</li>\n</ul>\n<h4 id=\"会话用户变量\"><a class=\"anchor\" href=\"#会话用户变量\">#</a> 会话用户变量</h4>\n<ul>\n<li>变量的定义</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#方式 1：“=” 或 “:=”</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SET</span> @用户变量 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#SET @用户变量 := 值；</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#方式 2：“:=” 或 INTO 关键字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#SELECT @用户变量 := 表达式 [FROM 等子句];</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">SELECT</span> 表达式 <span class=\"token keyword\">INTO</span> @用户变量  <span class=\"token punctuation\">[</span><span class=\"token keyword\">FROM</span> 等子句<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#SELECT @num := COUNT(*) FROM employees;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#SELECT @num;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@avgsalary</span> <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@avgsalary</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>查看用户变量的值: <code>SELECT @用户变量;</code></li>\n</ul>\n<h4 id=\"局部变量\"><a class=\"anchor\" href=\"#局部变量\">#</a> 局部变量</h4>\n<ul>\n<li>可以使用 DECLARE 语句定义一个局部变量</li>\n<li>作用域：仅仅在定义它的 BEGIN ... END 中有效</li>\n<li>只能放在 BEGIN ... END 中，而且只能放在首部</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">#声明局部变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">#如果没有 DEFAULT 子句，初始值为 NULL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> 变量名<span class=\"token number\">1</span> 变量数据类型 <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span> 变量默认值<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> 变量名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>变量名<span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 变量数据类型 <span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span> 变量默认值<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#为局部变量赋值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">#一般用于赋简单的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">SET</span> 变量名<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">#一般用于赋表中的字段值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> 值 <span class=\"token keyword\">INTO</span> 变量名<span class=\"token number\">2</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">FROM</span> 子句<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">#查看局部变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> 变量<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>变量<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>变量<span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr></table></figure><h2 id=\"定义条件与处理程序\"><a class=\"anchor\" href=\"#定义条件与处理程序\">#</a> 定义条件与处理程序</h2>\n<h3 id=\"定义条件\"><a class=\"anchor\" href=\"#定义条件\">#</a> 定义条件</h3>\n<ul>\n<li>\n<p>给 sql 中的错误码命名</p>\n</li>\n<li>\n<p>将一个错误名字和指定的错误条件关联</p>\n</li>\n<li>\n<p><code>DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）;</code></p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#使用 sql_error_code</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DECLARE</span> Field_Not_Be_NULL CONDITION <span class=\"token keyword\">FOR</span> <span class=\"token number\">1048</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#使用 sqlstate_value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">DECLARE</span> Field_Not_Be_NULL CONDITION <span class=\"token keyword\">FOR</span> SQLSTATE <span class=\"token string\">'23000'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"处理程序\"><a class=\"anchor\" href=\"#处理程序\">#</a> 处理程序</h3>\n<ul>\n<li><code>DECLARE 处理方式 HANDLER FOR 错误类型 处理语句</code></li>\n<li>处理方式\n<ul>\n<li>处理方式有 3 个取值：CONTINUE、EXIT、UNDO。</li>\n<li>CONTINUE ：表示遇到错误不处理，继续执行。</li>\n<li>EXIT ：表示遇到错误马上退出。</li>\n<li>UNDO ：表示遇到错误后撤回之前的操作。sql 中暂时不支持这样的操作</li>\n</ul>\n</li>\n<li>错误类型（即条件）\n<ul>\n<li><code>SQLSTATE '字符串错误码'</code>  ：表示长度为 5 的 sqlstate_value 类型的错误代码；</li>\n<li><code>sql_error_code</code>  ：匹配数值类型错误代码；</li>\n<li>错误名称 ：表示 DECLARE ... CONDITION 定义的错误条件名称。</li>\n<li><code>SQLWARNING</code>  ：匹配所有以 01 开头的 SQLSTATE 错误代码；</li>\n<li><code>NOT FOUND</code> ：匹配所有以 02 开头的 SQLSTATE 错误代码；</li>\n<li><code>SQLEXCEPTION</code>  ：匹配所有没有被 SQLWARNING 或 NOT FOUND 捕获的 SQLSTATE 错误代码</li>\n</ul>\n</li>\n<li>处理语句\n<ul>\n<li><code>SET 变量 = 值 ;</code></li>\n<li><code>BEGIN ... END</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#方法 1：捕获 sqlstate_value</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token keyword\">CONTINUE</span> <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> SQLSTATE <span class=\"token string\">'42S02'</span> <span class=\"token keyword\">SET</span> <span class=\"token variable\">@info</span> <span class=\"token operator\">=</span> <span class=\"token string\">'NO_SUCH_TABLE'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#方法 2：捕获 sql_error_value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token keyword\">CONTINUE</span> <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> <span class=\"token number\">1146</span> <span class=\"token keyword\">SET</span> <span class=\"token variable\">@info</span> <span class=\"token operator\">=</span> <span class=\"token string\">'NO_SUCH_TABLE'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#方法 3：先定义条件，再调用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">DECLARE</span> no_such_table CONDITION <span class=\"token keyword\">FOR</span> <span class=\"token number\">1146</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token keyword\">CONTINUE</span> <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> NO_SUCH_TABLE <span class=\"token keyword\">SET</span> <span class=\"token variable\">@info</span> <span class=\"token operator\">=</span> <span class=\"token string\">'NO_SUCH_TABLE'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#方法 4：使用 SQLWARNING</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token keyword\">EXIT</span> <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> SQLWARNING <span class=\"token keyword\">SET</span> <span class=\"token variable\">@info</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ERROR'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#方法 5：使用 NOT FOUND</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token keyword\">EXIT</span> <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> <span class=\"token operator\">NOT</span> FOUND <span class=\"token keyword\">SET</span> <span class=\"token variable\">@info</span> <span class=\"token operator\">=</span> <span class=\"token string\">'NO_SUCH_TABLE'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#方法 6：使用 SQLEXCEPTION</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">DECLARE</span> <span class=\"token keyword\">EXIT</span> <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> SQLEXCEPTION <span class=\"token keyword\">SET</span> <span class=\"token variable\">@info</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ERROR'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"流程控制\"><a class=\"anchor\" href=\"#流程控制\">#</a> 流程控制</h2>\n<h3 id=\"分支结构之-if\"><a class=\"anchor\" href=\"#分支结构之-if\">#</a> 分支结构之 IF</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">IF</span> 表达式<span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> 操作<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">ELSEIF</span> 表达式<span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span> 操作<span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">ELSE</span> 操作N<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>声明存储过程 “update_salary_by_eid1”，定义 IN 参数 emp_id，输入员工编号。判断该员工薪资如果低于 8000 元并且入职时间超过 5 年，就涨薪 500 元；否则就不变</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> update_salary_by_eid1<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> emp_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> emp_salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> hire_year <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">INTO</span> emp_salary <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> DATEDIFF<span class=\"token punctuation\">(</span>CURDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>hire_date<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">365</span> <span class=\"token keyword\">INTO</span> hire_year</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">IF</span> emp_salary <span class=\"token operator\">&lt;</span> <span class=\"token number\">8000</span> <span class=\"token operator\">AND</span> hire_year <span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">THEN</span> <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> salary <span class=\"token operator\">=</span> salary <span class=\"token operator\">+</span> <span class=\"token number\">500</span> <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"分支结构之-case\"><a class=\"anchor\" href=\"#分支结构之-case\">#</a> 分支结构之 CASE</h3>\n<ul>\n<li>\n<p>类似于 switch</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CASE</span> 表达式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHEN</span> 值<span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> 结果<span class=\"token number\">1</span>或语句<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>如果是语句，需要加分号<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHEN</span> 值<span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span> 结果<span class=\"token number\">2</span>或语句<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>如果是语句，需要加分号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ELSE</span> 结果n或语句n<span class=\"token punctuation\">(</span>如果是语句，需要加分号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">]</span>（如果是放在<span class=\"token keyword\">begin</span> <span class=\"token keyword\">end</span>中需要加上<span class=\"token keyword\">case</span>，如果放在<span class=\"token keyword\">select</span>后面不需要）</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>类似于多重 if</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CASE</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHEN</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> 结果<span class=\"token number\">1</span>或语句<span class=\"token number\">1</span><span class=\"token punctuation\">(</span>如果是语句，需要加分号<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHEN</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span> 结果<span class=\"token number\">2</span>或语句<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>如果是语句，需要加分号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ELSE</span> 结果n或语句n<span class=\"token punctuation\">(</span>如果是语句，需要加分号<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">case</span><span class=\"token punctuation\">]</span>（如果是放在<span class=\"token keyword\">begin</span> <span class=\"token keyword\">end</span>中需要加上<span class=\"token keyword\">case</span>，如果放在<span class=\"token keyword\">select</span>后面不需要）</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>声明存储过程 “update_salary_by_eid4”，定义 IN 参数 emp_id，输入员工编号。判断该员工薪资如果低于 9000 元，就更新薪资为 9000 元；薪资大于等于 9000 元且低于 10000 的，但是奖金比例为 NULL 的，就更新奖金比例为 0.01；其他的涨薪 100 元</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> update_salary_by_eid4<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> emp_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> emp_sal <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> bonus <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">INTO</span> emp_sal <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> commission_pct <span class=\"token keyword\">INTO</span> bonus <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">CASE</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> emp_sal<span class=\"token operator\">&lt;</span><span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">THEN</span> <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> salary<span class=\"token operator\">=</span><span class=\"token number\">9000</span> <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">WHEN</span> emp_sal<span class=\"token operator\">&lt;</span><span class=\"token number\">10000</span> <span class=\"token operator\">AND</span> bonus <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">THEN</span> <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> commission_pct<span class=\"token operator\">=</span><span class=\"token number\">0.01</span> <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">ELSE</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> salary<span class=\"token operator\">=</span>salary<span class=\"token operator\">+</span><span class=\"token number\">100</span> <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> emp_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">CASE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环结构之loop\"><a class=\"anchor\" href=\"#循环结构之loop\">#</a> 循环结构之 LOOP</h3>\n<ul>\n<li>loop_label 表示 LOOP 语句的标注名称，该参数可以省略</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>loop_label:<span class=\"token punctuation\">]</span> <span class=\"token keyword\">LOOP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    循环执行的语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span> <span class=\"token punctuation\">[</span>loop_label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>使用 LOOP 语句进行循环操作，id 值小于 10 时将重复执行循环过程</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DECLARE</span> id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>add_loop:<span class=\"token keyword\">LOOP</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SET</span> id <span class=\"token operator\">=</span> id <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">IF</span> id <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token keyword\">THEN</span> <span class=\"token keyword\">LEAVE</span> add_loop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span> add_loop<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环结构之while\"><a class=\"anchor\" href=\"#循环结构之while\">#</a> 循环结构之 WHILE</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>while_label:<span class=\"token punctuation\">]</span> <span class=\"token keyword\">WHILE</span> 循环条件  <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    循环体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span> <span class=\"token punctuation\">[</span>while_label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">WHILE</span> avg_sal <span class=\"token operator\">></span> <span class=\"token number\">5000</span> <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> salary <span class=\"token operator\">=</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">SET</span> while_count <span class=\"token operator\">=</span> while_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> avg_sal <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"循环结构之repeat\"><a class=\"anchor\" href=\"#循环结构之repeat\">#</a> 循环结构之 REPEAT</h3>\n<ul>\n<li>REPEAT 循环首先会执行一次循环</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>repeat_label:<span class=\"token punctuation\">]</span> <span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    循环体的语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>UNTIL 结束循环的条件表达式<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span> <span class=\"token punctuation\">[</span>repeat_label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> salary <span class=\"token operator\">=</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">1.15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">SET</span> repeat_count <span class=\"token operator\">=</span> repeat_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> avg_sal <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UNTIL avg_sal <span class=\"token operator\">>=</span> <span class=\"token number\">13000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"跳转语句之leave语句\"><a class=\"anchor\" href=\"#跳转语句之leave语句\">#</a> 跳转语句之 LEAVE 语句</h3>\n<ul>\n<li>\n<p>LEAVE 语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作 (break)</p>\n</li>\n<li>\n<p><code>LEAVE 标记名;</code></p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#循环条件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while_label:<span class=\"token keyword\">WHILE</span> <span class=\"token boolean\">TRUE</span> <span class=\"token keyword\">DO</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">#循环体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">IF</span> avg_sal <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10000</span> <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">LEAVE</span> while_label<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">UPDATE</span> employees <span class=\"token keyword\">SET</span> salary  <span class=\"token operator\">=</span> salary <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">SET</span> while_count <span class=\"token operator\">=</span> while_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#迭代条件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> avg_sal <span class=\"token keyword\">FROM</span> employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"跳转语句之iterate语句\"><a class=\"anchor\" href=\"#跳转语句之iterate语句\">#</a> 跳转语句之 ITERATE 语句</h3>\n<ul>\n<li>\n<p>只能用在循环语句（LOOP、REPEAT 和 WHILE 语句）内，表示重新开始循环 (continue)</p>\n</li>\n<li>\n<p><code>ITERATE label;</code></p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_loop:<span class=\"token keyword\">LOOP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">SET</span> num <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">IF</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">THEN</span> <span class=\"token keyword\">ITERATE</span> my_loop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">ELSEIF</span> num <span class=\"token operator\">></span> <span class=\"token number\">15</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">THEN</span> <span class=\"token keyword\">LEAVE</span> my_loop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">SELECT</span> <span class=\"token string\">'尚硅谷：让天下没有难学的技术'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span> my_loop<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"游标光标\"><a class=\"anchor\" href=\"#游标光标\">#</a> 游标 (光标)</h3>\n<ul>\n<li>\n<p>随意定位到某一条记录，并对记录的数据进行处理</p>\n</li>\n<li>\n<p>游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针</p>\n</li>\n<li>\n<p>使用游标步骤</p>\n<p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明</p>\n<ul>\n<li>声明游标\n<ul>\n<li><code>DECLARE cursor_name CURSOR FOR select_statement;</code></li>\n</ul>\n</li>\n<li>打开游标\n<ul>\n<li><code>OPEN cursor_name;</code></li>\n</ul>\n</li>\n<li>使用游标（从游标中取得数据）\n<ul>\n<li><code>FETCH cursor_name INTO var_name [, var_name] ...</code></li>\n<li>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可</li>\n<li>var_name 必须在声明游标之前就定义好</li>\n<li><code>FETCH cur_emp INTO emp_id, emp_sal ;</code></li>\n<li>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</li>\n</ul>\n</li>\n<li>关闭游标\n<ul>\n<li><code>CLOSE cursor_name;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>创建存储过程 “get_count_by_limit_total_salary ()”，声明 IN 参数 limit_total_salary，DOUBLE 类型；声明 OUT 参数 total_count，INT 类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到 limit_total_salary 参数的值，返回累加的人数给 total_count</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> get_count_by_limit_total_salary<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> limit_total_salary <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">OUT</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>total_count <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> sum_salary <span class=\"token keyword\">DOUBLE</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#记录累加的总工资</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> cursor_salary <span class=\"token keyword\">DOUBLE</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#记录某一个工资值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> emp_count <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#记录循环个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">#定义游标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> emp_cursor <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> salary <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">#打开游标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">OPEN</span> emp_cursor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">#使用游标（从游标中获取数据）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">FETCH</span> emp_cursor <span class=\"token keyword\">INTO</span> cursor_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">SET</span> sum_salary <span class=\"token operator\">=</span> sum_salary <span class=\"token operator\">+</span> cursor_salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">SET</span> emp_count <span class=\"token operator\">=</span> emp_count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        UNTIL sum_salary <span class=\"token operator\">>=</span> limit_total_salary</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">SET</span> total_count <span class=\"token operator\">=</span> emp_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">#关闭游标</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">CLOSE</span> emp_cursor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>逐条读取结果集中的数据</p>\n</li>\n</ul>\n<h2 id=\"触发器\"><a class=\"anchor\" href=\"#触发器\">#</a> 触发器</h2>\n<ul>\n<li>\n<p>你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数<br />\n据的插入操作</p>\n</li>\n<li>\n<p>触发器是由 事件来触发 某个操作，这些事件包括 INSERT 、 UPDATE 、 DELETE 事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生了，就会自动激发触发器执行相应的操作</p>\n</li>\n</ul>\n<h3 id=\"触发器的创建\"><a class=\"anchor\" href=\"#触发器的创建\">#</a> 触发器的创建</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> 触发器名称 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;BEFORE<span class=\"token operator\">|</span><span class=\"token keyword\">AFTER</span>&#125; &#123;<span class=\"token keyword\">INSERT</span><span class=\"token operator\">|</span><span class=\"token keyword\">UPDATE</span><span class=\"token operator\">|</span><span class=\"token keyword\">DELETE</span>&#125; <span class=\"token keyword\">ON</span> 表名 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>触发器执行的语句块<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>表名 ：表示触发器监控的对象。</li>\n<li>BEFORE|AFTER ：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。</li>\n<li>INSERT|UPDATE|DELETE ：表示触发的事件。\n<ul>\n<li>INSERT 表示插入记录时触发；</li>\n<li>UPDATE 表示更新记录时触发；</li>\n<li>DELETE 表示删除记录时触发。</li>\n</ul>\n</li>\n<li>触发器执行的语句块 ：可以是单条 SQL 语句，也可以是由 BEGIN...END 结构组成的复合语句块</li>\n</ul>\n<h4 id=\"举例\"><a class=\"anchor\" href=\"#举例\">#</a> 举例</h4>\n<ul>\n<li>\n<p>创建表</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> test_trigger <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t_note <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> test_trigger_log <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>t_log <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>创建触发器：创建名称为 before_insert 的触发器，向 test_trigger 数据表插入数据之前，向 test_trigger_log 数据表中插入 before_insert 的日志信息</p>\n<ul>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> before_insert</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BEFORE <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">ON</span> test_trigger </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> test_trigger_log <span class=\"token punctuation\">(</span>t_log<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before_insert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看触发器\"><a class=\"anchor\" href=\"#查看触发器\">#</a> 查看触发器</h3>\n<ul>\n<li>查看当前数据库的所有触发器的定义\n<ul>\n<li>SHOW TRIGGERS;</li>\n</ul>\n</li>\n<li>查看当前数据库中某个触发器的定义\n<ul>\n<li>SHOW CREATE TRIGGER 触发器名；</li>\n</ul>\n</li>\n<li>从系统库 information_schema 的 TRIGGERS 表中查询触发器的信息\n<ul>\n<li>SELECT * FROM information_schema.TRIGGERS;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"删除触发器\"><a class=\"anchor\" href=\"#删除触发器\">#</a> 删除触发器</h3>\n<ul>\n<li>DROP TRIGGER  IF EXISTS 触发器名称；</li>\n</ul>\n<h2 id=\"sql80新特性\"><a class=\"anchor\" href=\"#sql80新特性\">#</a> sql8.0 新特性</h2>\n<h3 id=\"窗口函数\"><a class=\"anchor\" href=\"#窗口函数\">#</a> 窗口函数</h3>\n<h4 id=\"基本介绍-4\"><a class=\"anchor\" href=\"#基本介绍-4\">#</a> 基本介绍</h4>\n<ul>\n<li><code>函数 OVER (PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC)</code></li>\n<li>PARTITION BY 子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分<br />\n别执行。</li>\n<li>ORDER BY 子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据<br />\n记录的顺序进行编号</li>\n</ul>\n<h4 id=\"序号函数-row_number函数\"><a class=\"anchor\" href=\"#序号函数-row_number函数\">#</a> 序号函数 - ROW_NUMBER () 函数</h4>\n<ul>\n<li>\n<p>ROW_NUMBER () 函数能够对数据中的序号进行顺序显示</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> ROW_NUMBER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>row_num<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span> category_id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> stock</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"序号函数-rank函数\"><a class=\"anchor\" href=\"#序号函数-rank函数\">#</a> 序号函数 - RANK () 函数</h4>\n<ul>\n<li>\n<p>使用 RANK () 函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为 1、1、3</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>row_num<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span> category_id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> stock</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"序号函数-dense_rank函数\"><a class=\"anchor\" href=\"#序号函数-dense_rank函数\">#</a> 序号函数 - DENSE_RANK () 函数</h4>\n<ul>\n<li>\n<p>DENSE_RANK () 函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为 1、1、2</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> dense_rank<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>row_num<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span> category_id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> stock</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"分布函数-percent_rank函数\"><a class=\"anchor\" href=\"#分布函数-percent_rank函数\">#</a> 分布函数 - PERCENT_RANK () 函数</h4>\n<ul>\n<li>\n<p>PERCENT_RANK () 函数是等级值百分比函数</p>\n</li>\n<li>\n<p>(rank - 1) / (rows - 1)</p>\n<ul>\n<li>rank 的值为使用 RANK () 函数产生的序号，rows 的值为当前窗口的总记录数</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> rank_num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PERCENT_RANK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> per_sum<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    id<span class=\"token punctuation\">,</span> category_id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> stock</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"分布函数-cume_dist函数\"><a class=\"anchor\" href=\"#分布函数-cume_dist函数\">#</a> 分布函数 - CUME_DIST () 函数</h4>\n<ul>\n<li>\n<p>CUME_DIST () 函数主要用于查询小于或等于某个值的比例</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查询 goods 数据表中小于或等于当前价格的比例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> CUME_DIST<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cum<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span> category_id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> stock</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"前后函数-lagexprn函数\"><a class=\"anchor\" href=\"#前后函数-lagexprn函数\">#</a> 前后函数 - LAG (expr,n) 函数</h4>\n<ul>\n<li>\n<p>返回当前行的前 n 行的 expr 的值</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> pre</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> LAG<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> pre</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">from</span> goods <span class=\"token punctuation\">)</span> pre_num<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"前后函数-leadexprn函数\"><a class=\"anchor\" href=\"#前后函数-leadexprn函数\">#</a> 前后函数 - LEAD (expr,n) 函数</h4>\n<ul>\n<li>\n<p>返回当前行的后 n 行的 expr 的值</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> later_price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SELECT</span>  id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>LEAD<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> later_price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"首尾函数-first_valueexpr函数\"><a class=\"anchor\" href=\"#首尾函数-first_valueexpr函数\">#</a> 首尾函数 - FIRST_VALUE (expr) 函数</h4>\n<ul>\n<li>\n<p>返回第一个 expr 的值</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> first_price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SELECT</span>  id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>FIRST_VALUE<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> first_price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"首尾函数-last_valueexpr函数\"><a class=\"anchor\" href=\"#首尾函数-last_valueexpr函数\">#</a> 首尾函数 - LAST_VALUE (expr) 函数</h4>\n<ul>\n<li>\n<p>返回最后一个 expr 的值</p>\n</li>\n<li>\n<p>默认返回第一行到当前行，不加 range 时 值恒等于当前行的值</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> last_price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SELECT</span>  id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>LAST_VALUE<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price RANGE <span class=\"token operator\">BETWEEN</span> <span class=\"token keyword\">UNBOUNDED</span> <span class=\"token keyword\">PRECEDING</span> <span class=\"token operator\">AND</span> <span class=\"token keyword\">UNBOUNDED</span> <span class=\"token keyword\">FOLLOWING</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> last_price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"其它函数-nth_valueexprn函数\"><a class=\"anchor\" href=\"#其它函数-nth_valueexprn函数\">#</a> 其它函数 - NTH_VALUE (expr,n) 函数</h4>\n<ul>\n<li>\n<p>返回第 n 个 expr 的值</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>nth_price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SELECT</span>  id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>NTH_VALUE<span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> nth_price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">)</span> t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>返回第三行的 price 数据，不满足 3 行，即 1 2 行置于 NULL</p>\n</li>\n</ul>\n<h4 id=\"其它函数-ntilen函数\"><a class=\"anchor\" href=\"#其它函数-ntilen函数\">#</a> 其它函数 - NTILE (n) 函数</h4>\n<ul>\n<li>\n<p>将分区中的有序数据分为 n 个桶，记录桶编号</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> ntile<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> category_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> nth<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span> category<span class=\"token punctuation\">,</span> NAME<span class=\"token punctuation\">,</span> price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> goods<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"公用表表达式\"><a class=\"anchor\" href=\"#公用表表达式\">#</a> 公用表表达式</h3>\n<ul>\n<li>CTE 可以理解成一个可以复用的子查询</li>\n</ul>\n<h4 id=\"普通公用表表达式\"><a class=\"anchor\" href=\"#普通公用表表达式\">#</a> 普通公用表表达式</h4>\n<ul>\n<li>\n<p>可以被多次引用，而且可以被其他的普通公用表表达式所引用</p>\n</li>\n<li>\n<p>WITH CTE 名称<br />\n AS （子查询）<br />\nSELECT|DELETE|UPDATE 语句；</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">WITH</span> price_</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span> goods</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">&lt;=</span> <span class=\"token number\">500</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> price_ p <span class=\"token keyword\">JOIN</span> goods g</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">ON</span> p<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"递归公用表表达式\"><a class=\"anchor\" href=\"#递归公用表表达式\">#</a> 递归公用表表达式</h4>\n<ul>\n<li>\n<p>可以调用自己</p>\n</li>\n<li>\n<p>WITH RECURSIVE<br />\nCTE 名称 AS （子查询）<br />\nSELECT|DELETE|UPDATE 语句；</p>\n</li>\n<li>\n<p>种子查询和递归查询，中间通过关键字 UNION [ALL] 进行连接</p>\n</li>\n<li>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">WITH</span> RECURSIVE cte </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">AS</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name<span class=\"token punctuation\">,</span>manager_id<span class=\"token punctuation\">,</span><span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> n <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> employee_id <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 种子查询，找到第一代领导</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">ALL</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> a<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>manager_id<span class=\"token punctuation\">,</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">AS</span> a <span class=\"token keyword\">JOIN</span> cte</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">ON</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>manager_id <span class=\"token operator\">=</span> cte<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 递归查询，找出以递归公用表表达式的人为领导的人</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">SELECT</span> employee_id<span class=\"token punctuation\">,</span>last_name <span class=\"token keyword\">FROM</span> cte <span class=\"token keyword\">WHERE</span> n <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "MySQL",
                "MySQL基础",
                "sql,MySQL"
            ]
        },
        {
            "id": "https://blog.fxink.cn/java-javase-2024-11-25-JavaSE/",
            "url": "https://blog.fxink.cn/java-javase-2024-11-25-JavaSE/",
            "title": "JavaSE",
            "date_published": "2024-11-25T15:26:46.000Z",
            "content_html": "<h1 id=\"javase\"><a class=\"anchor\" href=\"#javase\">#</a> JavaSE</h1>\n<h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<h3 id=\"继承的好处\"><a class=\"anchor\" href=\"#继承的好处\">#</a> 继承的好处</h3>\n<ol>\n<li>提高代码复用性</li>\n<li>扩展性和维护性提高</li>\n</ol>\n<h3 id=\"继承细节\"><a class=\"anchor\" href=\"#继承细节\">#</a> 继承细节</h3>\n<ul>\n<li>\n<p>子类继承父类所有属性和方法，但是父类私有成员必须通过父类提供的公共方法才能访问</p>\n</li>\n<li>\n<p>子类必须调用父类构造器，完成父类初始化 —–子类构造器调用时，首先调用父类构造器</p>\n</li>\n<li>\n<p>创建子类对象时，不管使用子类哪个构造器，默认总会调用父类的无参构造器，如果父类没有无参构造器，则必须在子类用  <mark>super</mark> 去指定使用哪个父类构造器完成对父类的初始化</p>\n</li>\n<li>\n<p>super 使用需要放在构造器第一行，this 和 super 都需要放在构造器第一行，所以它俩不能同时存在构造器</p>\n</li>\n<li>\n<p><mark>Object</mark> 是 JAVA 所有类的基类，父类构造器的调用不限于直接父类，可以一直追溯到 Object 类</p>\n</li>\n<li>\n<p>子类只能直接继承一个父类（单继承机制），但是可以多层继承</p>\n</li>\n<li>\n<p>继承需要符合<mark> is-a</mark> 逻辑（符合常理，不能人继承机器）</p>\n</li>\n<li>\n<p>子类对象查找信息时（<mark>就近原则</mark>）：</p>\n<ul>\n<li>\n<p>首先查看子类局部代码是否有该成员，没有则查看子类是否具有该成员，如果子类有则返回信息</p>\n</li>\n<li>\n<p>如果没有则追溯父类，以此类推追溯到 Object 类</p>\n</li>\n<li>\n<p>Object 类如果还是没有则报错</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问权限修饰符\"><a class=\"anchor\" href=\"#访问权限修饰符\">#</a> 访问权限修饰符</h2>\n<ul>\n<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>\n<li><strong>default</strong> (即默认，什么也不写）: 只有<strong>同包</strong>内的<strong>所有类</strong>可见，其他包不可见 ，不使用任何修饰符 使用对象：类、接口、变量、方法。</li>\n<li><strong>protected</strong> : 同包内的所有类和其他包<strong>子类</strong>可见。protected 修饰的对象：变量、方法，类 <strong>注意：不能修饰外部类，可以修饰内部类</strong>。</li>\n<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法，类 <strong>注意：不能修饰外部类，可以修饰内部类</strong></li>\n</ul>\n<h2 id=\"super\"><a class=\"anchor\" href=\"#super\">#</a> super</h2>\n<h3 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h3>\n<ul>\n<li>访问父类的非<mark> private 属性</mark> <mark>super. 属性名</mark></li>\n<li>访问父类的非<mark> private</mark> 方法 <mark>super. 方法名（参数列表）</mark></li>\n<li>访问父类构造器<mark> super (参数列表）</mark>，只能出现在构造器的第一行且只能出现一句</li>\n</ul>\n<h3 id=\"super细节\"><a class=\"anchor\" href=\"#super细节\">#</a> super 细节</h3>\n<ul>\n<li>\n<p>子类有和父类成员重名的属性和方法时，访问父类成员必须用 super</p>\n</li>\n<li>\n<p>子类没有重名的属性或方法时，super（直接从父类找），this == 直接调用方法或属性（从本类开始找，效果等价）</p>\n<h3 id=\"super和this的比较\"><a class=\"anchor\" href=\"#super和this的比较\">#</a> super 和 this 的比较</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">NO.</th>\n<th style=\"text-align:left\">区别</th>\n<th style=\"text-align:left\">this</th>\n<th style=\"text-align:left\">super</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">访问属性</td>\n<td style=\"text-align:left\">访问本类属性，如果没有则向上追溯父类</td>\n<td style=\"text-align:left\">从父类查找属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">调用方法</td>\n<td style=\"text-align:left\">访问本类方法，如果没有则向上追溯父类</td>\n<td style=\"text-align:left\">从父类查找方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">调用构造器</td>\n<td style=\"text-align:left\">调用本类构造器，必须放在构造器首行</td>\n<td style=\"text-align:left\">调用父类构造器，必须放在构造器首行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">特殊</td>\n<td style=\"text-align:left\">表示当前对象</td>\n<td style=\"text-align:left\">子类中访问父类对象</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h2 id=\"方法重写\"><a class=\"anchor\" href=\"#方法重写\">#</a> 方法重写</h2>\n<h3 id=\"重写细节\"><a class=\"anchor\" href=\"#重写细节\">#</a> 重写细节</h3>\n<ul>\n<li>子类方法的参数，方法名称要和父类完全一样</li>\n<li>子类方法返回类型 == 父类方法返回类型 OR 父类方法返回类型的子类（ege: 父类 Object, 子类 String)</li>\n<li>子类方法不能缩小父类方法的访问权限 （父：public 子：protected ——&gt; 错误）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">发生范围</th>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">形参列表</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">重载 (overload)</td>\n<td style=\"text-align:left\">本类</td>\n<td style=\"text-align:left\">必须一样</td>\n<td style=\"text-align:left\">类型、个数至少一个不同</td>\n<td style=\"text-align:left\">无要求</td>\n<td style=\"text-align:left\">无要求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重写 (override)</td>\n<td style=\"text-align:left\">父子类</td>\n<td style=\"text-align:left\">必须一样</td>\n<td style=\"text-align:left\">必须相同</td>\n<td style=\"text-align:left\">子类返回类型可以是父类返回类型的子类</td>\n<td style=\"text-align:left\">子类方法不能缩小父类访问范围</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h2>\n<h3 id=\"方法多态\"><a class=\"anchor\" href=\"#方法多态\">#</a> 方法多态</h3>\n<ul>\n<li>方法的重载（同类）和重写（不同类，继承）体现多态</li>\n</ul>\n<h3 id=\"对象多态披着羊皮的狼\"><a class=\"anchor\" href=\"#对象多态披着羊皮的狼\">#</a> 对象多态 (披着羊皮的狼)</h3>\n<ol>\n<li>\n<p>importent</p>\n<ul>\n<li>\n<p>一个对象的编译类型和运行类型可以不一致</p>\n</li>\n<li>\n<p>编译类型在定义对象时确定，不能改变</p>\n</li>\n<li>\n<p>运行类型可以变化</p>\n</li>\n<li>\n<p>编译类型看定义时  <code>=</code>  左边</p>\n</li>\n<li>\n<p>运行定义看定义时  <code>=</code>  右边</p>\n</li>\n<li>\n<p><code>Animal animal = new Cat()</code>  运行类型：Cat\t编译类型：Animal</p>\n</li>\n</ul>\n</li>\n<li>\n<p>向上转型（父类引用指向子类对象）</p>\n<ul>\n<li>可以调用父类的所有成员（遵守访问权限）</li>\n<li>不能调用子类的特有成员（子类重写父类的方法可以调用）\n<ul>\n<li>在编译阶段由编译类型绝对能调用的成员</li>\n</ul>\n</li>\n<li>最终运行结果看子类（运行类型）的具体实现\n<ul>\n<li>调用方法时，从子类按照就近原则开始查找实现</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>向下转型（子类类型 引用名 = （子类类型）父类引用）</p>\n<ul>\n<li>\n<p>只能强转父类的引用，不能强转父类的对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">)</span> animal<span class=\"token punctuation\">;</span><span class=\"token comment\">// 强转</span></pre></td></tr></table></figure><blockquote>\n<p>编译类型 Cat = 运行类型 Cat</p>\n</blockquote>\n</li>\n<li>\n<p>父类的引用必须指向当前目标类型的对象</p>\n<blockquote>\n<p>引用 animal 原本就指向 Cat，则可以将其强制转换成 Cat 类型，而不能转成 Dog 类型（猫不是狗）</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多态细节\"><a class=\"anchor\" href=\"#多态细节\">#</a> 多态细节</h3>\n<ol>\n<li>属性没有重写，属性值看编译类型</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">Base</span> base <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向上转型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果为 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>instanceOf 比较操作符，判断对象类型是否为<strong> XX 运行类型</strong>或<strong> XX 运行类型</strong>的子类型</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BB</span> bb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bb instanceOf <span class=\"token constant\">BB</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>3. 动态绑定机制（<mark>非常重要</mark>）</p>\n<ul>\n<li>\n<p>当调用<mark>对象方法</mark>时，该方法和该对象的<mark>内存地址 / 运行类型</mark>绑定</p>\n</li>\n<li>\n<p>当调用<mark>对象属性</mark>时，<mark>没有动态绑定机制</mark>，哪里声明，哪里使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token constant\">BASIC</span><span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> dynamic_binding <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向上转型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//30</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token constant\">BASIC</span><span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">geti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">geti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token constant\">BASIC</span><span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    public int sum()&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//    return geti() + 10;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//  &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//    public int sum1()&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        return i + 10;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">geti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>执行 <code>System.out.println(a.sum());//30</code>  时，首先查找 a 的 sum () 方法，发现 a 没有，故就近原则，查找父类的方法，发现父类存在此方法，但是其中 geti () 方法由于<mark>动态绑定机制</mark>，会调用回 a 的 geti () 方法；</p>\n<p>执行 <code>System.out.println(a.sum1());//20</code>  时，首先查找 a 的 sum1 () 方法，发现 a 没有，故就近原则，查找父类的方法，发现父类存在此方法，但是其中 i 是对象属性，没有动态绑定机制，此时在父类声明，则使用父类的属性 i。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"object\"><a class=\"anchor\" href=\"#object\">#</a> Object</h2>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> == 运算符</h3>\n<ol>\n<li>既可以判断基本类型，又可以判断引用类型</li>\n<li>基本类型判断：<strong>值</strong>是否相等</li>\n<li>引用类型判断：<strong>地址</strong>是否相等，即判断是不是同一个对象</li>\n</ol>\n<h3 id=\"equals方法\"><a class=\"anchor\" href=\"#equals方法\">#</a> equals 方法</h3>\n<ol>\n<li>是 Object 类的方法，只能判断<strong>引用类型</strong></li>\n<li>默认判断地址是否相等，子类往往重写此方法 —&gt; 判断<strong>内容</strong>是否相等</li>\n</ol>\n<h3 id=\"hashcode方法\"><a class=\"anchor\" href=\"#hashcode方法\">#</a> hashCode 方法</h3>\n<ol>\n<li>提高具有哈希结构的容器的效率</li>\n<li>两个引用，如果指向同一个对象，哈希值一定相等，否则不同（即返回的值不同）</li>\n<li>哈希值根据地址号由来，哈希值不等同于地址</li>\n</ol>\n<h3 id=\"tostring方法\"><a class=\"anchor\" href=\"#tostring方法\">#</a> toString 方法</h3>\n<ol>\n<li>默认返回：全类名 + @ + 哈希值的十六进制字符串</li>\n<li>一般重写方法输出属性信息</li>\n<li>直接输出对象时，默认调用 toString 方法 <code>System.out.println(monster)</code> &lt;==&gt; <code>monster.toString</code></li>\n</ol>\n<h2 id=\"类变量方法\"><a class=\"anchor\" href=\"#类变量方法\">#</a> 类变量 / 方法</h2>\n<h3 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<ul>\n<li>即 static 修饰的类成员</li>\n</ul>\n<h3 id=\"细节\"><a class=\"anchor\" href=\"#细节\">#</a> 细节</h3>\n<ol>\n<li>同一个类所有对象共享一份类变量 / 方法</li>\n<li>推荐使用<mark>类名。类变量 / 方法名</mark>访问</li>\n<li>希望不创建实例也能使用方法，则可以将方法设置成静态方法，当做工具使用。如 Math,Arrary 类等</li>\n<li>类方法和普通方法随着类加载而加载，将结构信息存储在方法区，类方法无 this 参数</li>\n<li>静态方法只能访问静态成员（遵守访问权限）</li>\n<li>非静态方法可以访问静态 / 非静态成员（遵守访问权限）</li>\n</ol>\n<h3 id=\"main方法\"><a class=\"anchor\" href=\"#main方法\">#</a> main 方法</h3>\n<ol>\n<li>静态方法 main 可以访问所在类的静态成员，不能访问非静态成员</li>\n<li>要访问非静态成员，在 main 方法里创建一个实例即可调用</li>\n</ol>\n<h2 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h2>\n<ol>\n<li>\n<p>static 代码块作用是对类初始化，随着类的加载执行，只执行<strong>一次</strong>，如果是普通代码块，每创建一个对象就执行一次</p>\n</li>\n<li>\n<p>类加载的时机</p>\n<ul>\n<li>创建对象实例时</li>\n<li>创建子类对象实例，父类及父类往上的类也会被加载</li>\n<li>使用类的静态成员时</li>\n</ul>\n</li>\n<li>\n<p>调用顺序：</p>\n<ul>\n<li>调用静态代码块和静态属性的优先级一样，如果有多个，按照定义的顺序调用，普通代码块和普通属性同理</li>\n</ul>\n</li>\n<li>\n<p>构造器最前面隐含了 super () 和调用普通代码块，最后再执行构造器自己的代码，而静态代码块在类加载时就执行完毕，优先于普通代码块和构造器</p>\n</li>\n<li>\n<p>创建子类对象时（含继承关系），调用顺序如下：</p>\n<ul>\n<li>父类静态代码块和静态属性初始化（如果有多个，按照定义的顺序调用）</li>\n<li>子类静态代码块和静态属性初始化（如果有多个，按照定义的顺序调用）</li>\n<li>父类普通代码块和普通属性初始化（如果有多个，按照定义的顺序调用）</li>\n<li>父类构造方法</li>\n<li>子类普通代码块和普通属性初始化（如果有多个，按照定义的顺序调用）</li>\n<li>子类构造方法</li>\n</ul>\n</li>\n<li>\n<p>执行时被放在构造器除了 super 方法的最前面</p>\n</li>\n</ol>\n<h2 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h2>\n<h3 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h3>\n<ol>\n<li>修饰的类不可继承</li>\n<li>修饰的父类某个方法不可重写</li>\n<li>修饰的属性不可更改</li>\n<li>修饰的局部变量不可更改</li>\n</ol>\n<h3 id=\"细节-2\"><a class=\"anchor\" href=\"#细节-2\">#</a> 细节</h3>\n<ol>\n<li>修饰的属性叫常量，命名要大写</li>\n<li>修饰的属性定义时必须赋初值，以后不能再更改（定义时，在构造器中，在代码块中）</li>\n<li>修饰的静态属性只能在定义时或静态代码块中赋初值</li>\n<li>final 类不能被继承，但可以实例化对象</li>\n<li>非 final 类含 final 方法，方法不能重写，可以被继承</li>\n<li>如果一个类已经是 final 类，不用再将方法修饰成 final 方法</li>\n<li>final 不能修饰构造器</li>\n<li>final 和 static 搭配使用，不会导致类加载</li>\n</ol>\n<h2 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h2>\n<h3 id=\"基础-2\"><a class=\"anchor\" href=\"#基础-2\">#</a> 基础</h3>\n<ul>\n<li>\n<p>当父类的一些方法不能确定时，可以用 abstract 关键字修饰方法，该方法是抽象方法，修饰的类是抽象类</p>\n</li>\n<li>\n<p>一般抽象类会被继承</p>\n</li>\n</ul>\n<h3 id=\"细节-3\"><a class=\"anchor\" href=\"#细节-3\">#</a> 细节</h3>\n<ol>\n<li>抽象方法没有方法体</li>\n<li>抽象类可以没有抽象方法，但可以有实现方法</li>\n<li>抽象方法必须在抽象类中</li>\n<li>abstract 只能修饰类和方法</li>\n<li>抽象类还是类，可以有任意成员</li>\n<li>一个类继承了抽象类，必须实现所有的抽象方法，否则它就必须是抽象类</li>\n</ol>\n<h2 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h2>\n<h3 id=\"基础-3\"><a class=\"anchor\" href=\"#基础-3\">#</a> 基础</h3>\n<ul>\n<li>\n<p>概念：接口给出一些没有实现的方法，封装到一起，某个类要使用时，根据情况实现这些抽象方法</p>\n</li>\n<li>\n<p>语法： <code>interface 接口名&#123;……&#125;</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名 <span class=\"token keyword\">implements</span> 接口<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    属性；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    方法；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    必须实现的接口抽象方法；    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>接口可以有静态方法，默认方法</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 默认方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">okk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 静态方法</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"细节-4\"><a class=\"anchor\" href=\"#细节-4\">#</a> 细节</h3>\n<ol>\n<li>接口不能被实例化</li>\n<li>接口中所有方法是 public 方法，抽象方法不必再用 abstract 修饰</li>\n<li>一个普通类使用接口，必须实现接口的所有方法</li>\n<li>抽象类实现接口，可以不实现接口方法</li>\n<li>一个类可以实现多个接口</li>\n<li>接口的属性只能是 final，默认隐藏修饰  <code>public static final</code> , 如 int i = 1;  默认 public static final int i = 1, 因此属性必须初始化 (final)</li>\n<li>接口属性访问： <code>接口名.属性名</code></li>\n<li>接口可以继承多个其它接口，但不能继承类</li>\n<li>接口修饰符只能是 public 或默认（什么也不写），和类一样</li>\n</ol>\n<h3 id=\"接口-vs-继承\"><a class=\"anchor\" href=\"#接口-vs-继承\">#</a> 接口 VS 继承</h3>\n<ol>\n<li>解决的问题不同\n<ul>\n<li>继承：代码的复用性和可维护性</li>\n<li>接口：设计各种规范方法，让类实现</li>\n</ul>\n</li>\n<li>继承是 <strong>is-a</strong> 关系，接口是<strong> like-a</strong> 关系，接口更灵活</li>\n<li>接口在一定程度实现代码解耦</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>interface_all<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 继承和类的区别</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 继承是子类生来就有的技能</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 接口相当于在后期学习扩展获得的技能</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> extendsVSinterface <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        monkeySon monkey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">monkeySon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"悟空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        monkey<span class=\"token punctuation\">.</span><span class=\"token function\">climb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        monkey<span class=\"token punctuation\">.</span><span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * fish 接口</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">interface</span> fish <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * monkey 父类</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> monkey <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">monkey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">climb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"会爬树\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * monkeySon 子类</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> monkeySon <span class=\"token keyword\">extends</span> monkey <span class=\"token keyword\">implements</span> fish <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">monkeySon</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 子类生来就有的技能</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">climb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"会爬树\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 子类后期学习获得技能</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"会游泳\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"接口的多态特性\"><a class=\"anchor\" href=\"#接口的多态特性\">#</a> 接口的多态特性</h3>\n<ol>\n<li>多态参数</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>interface_all<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 接口的多态参数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> polParameter <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 创建手机和相机对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 接口类型的变量 computer 可以指向实现了接口的类的对象实例</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        computer computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">camera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * computer</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">interface</span> computer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * phone</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> phone <span class=\"token keyword\">implements</span> computer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机在运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * camera</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">class</span> camera <span class=\"token keyword\">implements</span> computer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"相机在运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>多态数组</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> computers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> computer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        computers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        computers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">camera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>接口存在多态传递现象\n<ul>\n<li>由于 object &lt;— camera ,phone 实现接口的同时，也相当于实现了 object</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//object</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> object <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//computer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> computer <span class=\"token keyword\">extends</span> object <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//phone</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> phone <span class=\"token keyword\">implements</span> computer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//phone 类实现了 object 接口，并实现了接口中的方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//phone 类实现了 computer 接口，并实现了接口中的方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机在运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//phone 类还实现了额外的 call 方法</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机在打电话...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//camera</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> camera <span class=\"token keyword\">implements</span> computer <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//camera 类实现了 object 接口，并实现了接口中的方法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"相机object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//camera 类实现了 computer 接口，并实现了接口中的方法</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"相机在运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> polParameter <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 多态传递</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        object object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        object<span class=\"token punctuation\">.</span><span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h2>\n<h3 id=\"基础-4\"><a class=\"anchor\" href=\"#基础-4\">#</a> 基础</h3>\n<p><em><strong>一个类的内部又完整嵌套了另一个类的结构</strong></em></p>\n<p><em><strong>类的 5 大成员</strong></em></p>\n<ul>\n<li>属性</li>\n<li>方法</li>\n<li>构造器</li>\n<li>代码块</li>\n<li>内部类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> outer<span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 外部类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">class</span> inner<span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 内部类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> otherouter<span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 外部其他类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>分类</strong></em></p>\n<ul>\n<li>\n<p>定义在外部类局部位置（比如方法内）</p>\n<ul>\n<li>局部内部类（有类名）</li>\n<li>匿名内部类（没有类名，重点）</li>\n</ul>\n</li>\n<li>\n<p>定义在外部类的成员位置</p>\n<ul>\n<li>成员内部类（没有 static 修饰）</li>\n<li>静态内部类（有 static 修饰）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"局部内部类\"><a class=\"anchor\" href=\"#局部内部类\">#</a> 局部内部类</h3>\n<h4 id=\"细节-5\"><a class=\"anchor\" href=\"#细节-5\">#</a> 细节</h4>\n<ol>\n<li>局部内部类定义在外部类的局部位置（方法 / 代码块）</li>\n<li>可以<strong>直接访问</strong>外部类的所有成员，包括私有的</li>\n<li>局部内部类不能添加访问修饰符，但可以用 <code>final</code>  修饰（看作变量就好理解）</li>\n<li>作用域：仅在定义它的<strong>方法</strong>或者<strong>代码块</strong>中</li>\n<li>外部类 —— 访问 —— 局部内部类成员（创建对象再访问，必须在作用域内）</li>\n<li>外部其它类 —— 不能访问 —— 局部内部类（局部内部类的地位是局部变量）</li>\n<li>外部类成员 与 内部类成员 重名，默认遵循就近原则，访问外部类成员用 <code>外部类名.this.成员</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalInnerClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Outer</span> outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        outer<span class=\"token punctuation\">.</span><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Outer</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 外部类属性和方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内部类成功直接调用外部类私有成员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 内部类作用域：仅在定义它的方法或者代码块中</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 局部内部类定义在外部类的局部位置（方法 / 代码块）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 局部内部类不能添加访问修饰符，但可以用 `final` 修饰（看作变量就好理解）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 局部内部类</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 外部类成员 与 内部类成员 重名，默认遵循就近原则，</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 访问外部类成员用 `外部类名.this. 成员`</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// 可以直接访问外部类的所有成员，包括私有的</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内部类方法f1执行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inner's n = \"</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">+</span> <span class=\"token string\">\" 就近原则（Outer's n = 100,Inner's = 200)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outer's n = \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\" Outer.this.n访问外部类重名成员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 外部类 —— 访问 —— 局部内部类成员（创建对象再访问，必须在作用域内）</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Inner</span> inner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        inner<span class=\"token punctuation\">.</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 内部类作用域：仅在定义它的方法或者代码块中</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Outer.this &lt;==&gt; outer 对象</p>\n<p>this &lt;==&gt; Inner 对象</p>\n</blockquote>\n<h3 id=\"匿名内部类\"><a class=\"anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h3>\n<h4 id=\"细节-6\"><a class=\"anchor\" href=\"#细节-6\">#</a> 细节</h4>\n<ol>\n<li>\n<p>定义在外部类的局部位置（方法或代码块），没有类名），本质是类或对象</p>\n</li>\n<li>\n<p>语法： <code>new 类/接口（参数列表）&#123;类体&#125;；</code></p>\n</li>\n<li>\n<p>需求：只使用一次，后面不再使用</p>\n</li>\n<li>\n<p>匿名内部类使用一次即死亡，但是它的对象可以一直使用</p>\n</li>\n<li>\n<p>编译类型是接口或类，运行类型是匿名内部类</p>\n</li>\n<li>\n<p>使用时，底层会实现一个 <code>外部类$ + 序号</code>  的类实现接口或继承类，并返回实例地址</p>\n</li>\n<li>\n<p>匿名内部类既是类，也是 <code>对象</code> ，可以有两种方式调用方法</p>\n<ul>\n<li>\n<p>创建匿名内部类的对象调用</p>\n</li>\n<li>\n<p>}. 方法；</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重写了匿名内部类方法...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动态绑定运行类型...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"就近原则（\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>作用域：定义的方法或代码块，即外部其它类不能访问匿名内部类</p>\n</li>\n<li>\n<p>外部类和匿名内部类成员重名，默认就近原则，使用外部类成员： <code>外部类名.this.成员</code></p>\n</li>\n<li>\n<p>应用场景：匿名内部类可以传递实参</p>\n</li>\n</ol>\n<h4 id=\"代码时间\"><a class=\"anchor\" href=\"#代码时间\">#</a> 代码时间</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 基于接口 匿名内部类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> anonymityInnerClass01 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Outer01</span> outer01 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        outer01<span class=\"token punctuation\">.</span><span class=\"token function\">fun01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * 接口 A</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * Outer01</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 方法里的匿名内部类</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         * java 底层创建：</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * class Outer01$1 implements A1 &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         * \t\t     @Override</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         *           public void show () &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         *           System.out.println (\"重写了接口方法...\");</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         *           &#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         * &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         *           // 结束后返回 Outer01$1 类的实例给引用 a，Outer01$1 死亡，但 a 可以继续多次使用</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">A1</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重写了接口A1方法...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 基于类的匿名内部类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> anonymityInnerClass02 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Outer02</span> outer02 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        outer02<span class=\"token punctuation\">.</span><span class=\"token function\">fun02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * A</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收了name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是A类...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * Outer02d</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a02 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         * java 底层创建：</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         * class Outer02$1 extends A &#123;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         * \t\t\t @Override</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         *           public void show () &#123;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         *           System.out.println (\"重写了匿名内部类方法...\");</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         *           System.out.println (\"动态绑定运行类型...\");</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         *           System.out.println (\"就近原则（\");</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         * &#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         *           // 结束后返回 Outer02$1 的实例给引用 a，Outer02$1 死亡，但 a 可以继续多次使用</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 传入 String 类型参数给构造器</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a02 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重写了匿名内部类方法...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动态绑定运行类型是：\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"就近原则(匿名内部类a02 = 30) 验证：a02 = \"</span> <span class=\"token operator\">+</span> a02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用外部类成员(外部类a02 = 20 验证：a02 = \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Outer02</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 动态绑定，运行类型是 Outer02$1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 基于抽象类的匿名内部类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> anonymityInnerClass03 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Outer03</span> outer03 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        outer03<span class=\"token punctuation\">.</span><span class=\"token function\">fun03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * Abstract_A 抽象类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Abstract_A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Outer03</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         * 匿名内部类</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Abstract_A</span> abstract_A <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Abstract_A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             * java 底层创建：</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             * class Outer03$1 extends A &#123;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             * </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             * @Override</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *           public void show () &#123;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             *           System.out.println (\"重写了抽象类 Abstract_A 的方法...\");</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             *           &#125;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>             *           结束后返回 Outer03$1 的实例给 abstract_A 引用，Outer03$1 死亡，但 abstract_A 可以继续多次使用</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 重写抽象类的抽象方法</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重写了抽象类Abstract_A的方法...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        abstract_A<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 匿名内部类的实践一：传递实参</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> anonymityInnerClass04 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类传递实参</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"匿名内部类传递了实参...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 定义静态方法，main 方法是静态方法，main 只能调用本类静态成员</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A04</span> a04<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        a04<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * 接口 A</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A04</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 有一个铃声接口 Bell， 里面有个 ring 方法。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 有一个手机类 cellPhone， 具有闹钟功能 alarmClock, 参数是 Bell 类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 测试手机类的闹钟功能，通过匿名内部类 (对象) 作为参数，打印：懒猪起床了</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 再传入另一个匿名内部类 (对象)，打印：小伙伴上课了</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ring</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cellPhone cellphone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">cellPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 匿名内部类传参</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cellphone<span class=\"token punctuation\">.</span><span class=\"token function\">alarmClock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"懒猪起床了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        cellphone<span class=\"token punctuation\">.</span><span class=\"token function\">alarmClock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小伙伴上课了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * Bell 接口</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">ring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * cellPhone</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> cellPhone <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">alarmClock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bell</span> bell<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        bell<span class=\"token punctuation\">.</span><span class=\"token function\">ring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"成员内部类\"><a class=\"anchor\" href=\"#成员内部类\">#</a> 成员内部类</h3>\n<h4 id=\"细节-7\"><a class=\"anchor\" href=\"#细节-7\">#</a> 细节</h4>\n<ol>\n<li>在外部类的成员位置上</li>\n<li>可以直接访问外部类的所有成员</li>\n<li>可以添加任意修饰符（public,rotected,private, 默认）</li>\n<li>作用域：整个外部类的类体，外部类访问内部类成员：在外部类成员方法创建内部类对象，再调用内部类方法</li>\n<li>外部其他类访问成员内部类：\n<ul>\n<li><em>第一种方式 固定语法</em></li>\n<li><em>第二种方式，在外部类创建方法返回内部类对象</em></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> memberInnerClass <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 调用成员内部类的成员</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Outer05</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer05</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        member<span class=\"token punctuation\">.</span><span class=\"token function\">memberFun01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 外部类访问成员内部类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 第一种方式 固定语法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Outer05</span><span class=\"token punctuation\">.</span>memberInner01 inner01 <span class=\"token operator\">=</span> member<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token function\">memberInner01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        inner01<span class=\"token punctuation\">.</span><span class=\"token function\">show01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 第二种方式，在外部类创建方法返回内部类对象，通过外部类对象调用非静态方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Outer05</span><span class=\"token punctuation\">.</span>memberInner01 inner02 <span class=\"token operator\">=</span> member<span class=\"token punctuation\">.</span><span class=\"token function\">returnmember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        inner02<span class=\"token punctuation\">.</span><span class=\"token function\">show02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * Outer05</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer05</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"member\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * memberInner01</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> memberInner01 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成员内部类...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"直接调用外部类成员（私有）：\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"m1 = \"</span> <span class=\"token operator\">+</span> m1 <span class=\"token operator\">+</span> <span class=\"token string\">\" name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部其他类访问成员内部类第一种方式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部其他类访问成员内部类第二种方式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 写一个方法供 mian 函数调用</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">memberFun01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        memberInner01 mInner01 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">memberInner01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        mInner01<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 返回内部类对象</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> memberInner01 <span class=\"token function\">returnmember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">memberInner01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"静态内部类\"><a class=\"anchor\" href=\"#静态内部类\">#</a> 静态内部类</h3>\n<h4 id=\"细节-8\"><a class=\"anchor\" href=\"#细节-8\">#</a> 细节</h4>\n<ol>\n<li>在外部类的成员位置上</li>\n<li>必须有 <code>static</code>  修饰，可以添加任意修饰符（public,rotected,private, 默认）</li>\n<li>可以直接访问外部类的所有静态成员，但不能访问非静态成员</li>\n<li>作用域：整个外部类的类体</li>\n<li>外部类访问静态内部类的三种方式</li>\n<li>外部类和静态内部类成员重名时，默认就近原则，访问外部类成员用 <code>外部类名.外部成员</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>localInnerClass<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> staticInnerClass <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Outer06</span> outer06 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        outer06<span class=\"token punctuation\">.</span><span class=\"token function\">fun04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 外部其他类访问静态内部类的三种方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 方式一 ---- 固定语法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">.</span>staticClass inClass1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">.</span><span class=\"token function\">staticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        inClass1<span class=\"token punctuation\">.</span><span class=\"token function\">show03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 方式二 ---- 在外部类创建方法返回内部类对象，通过外部类对象调用非静态方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">.</span>staticClass inClass2 <span class=\"token operator\">=</span> outer06<span class=\"token punctuation\">.</span><span class=\"token function\">fun05</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        inClass2<span class=\"token punctuation\">.</span><span class=\"token function\">show04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 方式三 ---- 通过外部类直接调用静态方法返回静态类对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">.</span>staticClass inClass3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">.</span><span class=\"token function\">fun06</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        inClass3<span class=\"token punctuation\">.</span><span class=\"token function\">show05</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * Outer06</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer06</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * staticClass</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> staticClass <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部类访问外部类静态成员n = \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Outer06</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部类访问本类静态成员n = \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部类第一种访问内部类方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部类第二种访问内部类方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show05</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部类第三种访问内部类方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        staticClass staticclass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">staticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        staticclass<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 编写方法返回静态内部类对象</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> staticClass <span class=\"token function\">fun05</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">staticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 静态方法返回静态内部类对象</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> staticClass <span class=\"token function\">fun06</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">staticClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h2>\n<h3 id=\"自定义枚举类型\"><a class=\"anchor\" href=\"#自定义枚举类型\">#</a> 自定义枚举类型</h3>\n<ol>\n<li>将构造器私有化，防止被直接 new</li>\n<li>不设置 set () 方法，防止被篡改，可以设置 get () 方法</li>\n<li>暴露对象 public，并用 final + static 修饰对象优化</li>\n<li>枚举对象名大写</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>enumeration<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 自定义枚举类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> selfDefineEnumeration <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SPRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUMMER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AUTUMN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * Season</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Season</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 定义固定对象 暴露对象，final + static 底层优化</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">SPRING</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"温暖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">SUMMER</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"炎热\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">AUTUMN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"凉爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">WINTER</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"寒冷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 将构造器私有化 并且不设置 set 方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"The name:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" The Desc:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用enum关键字实现枚举\"><a class=\"anchor\" href=\"#使用enum关键字实现枚举\">#</a> 使用 enum 关键字实现枚举</h3>\n<h4 id=\"基础-5\"><a class=\"anchor\" href=\"#基础-5\">#</a> 基础</h4>\n<ol>\n<li>使用 enum 开发一个枚举类时，默认继承 Enum 类（终端 javap ***.class 验证）</li>\n<li>传统的 <code>public final static Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);</code>  简化为 <code>SPRING(“春天”，“温暖”);</code></li>\n<li>使用无参构造器创建枚举对象，实参列表和小括号都可以省略</li>\n<li>有多个枚举对象用  <code>,</code>  间隔，最后 <code>;</code>  结尾</li>\n<li>枚举对象必须放在枚举类体的行首</li>\n<li>Enum 的 <code>toString()</code>  方法（子类可以重写）返回的是枚举类对象的 name，如 SPRING</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> selfDefineEnumeration02 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SPRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUMMER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AUTUMN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Season</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 有多个枚举对象用 `,` 间隔，最后 `;` 结尾</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 枚举对象必须放在枚举类体的行首</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">SPRING</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"温暖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUMMER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"炎热\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">AUTUMN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"凉爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WINTER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"寒冷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WHAT</span><span class=\"token comment\">// 使用无参构造器创建枚举对象，实参列表和小括号都可以省略</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h4 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h4>\n<ol>\n<li>name ()：返回当前对象名，子类不能重写</li>\n<li>ordinal ()：返回位置，默认从 0 开始</li>\n<li>values ()：返回包含所有枚举常量的一个数组</li>\n<li>valueOf ()：将字符串转换成枚举常量（常量须存在类中）</li>\n<li>compareTo：比较两个，枚举常量的位置</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>enumeration<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * Enum 类的方法演示</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> selfDefineEnumeration03 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//name ()：返回当前对象名，子类不能重写</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SPRING</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//ordinal ()：返回位置，默认从 0 开始</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WINTER's position:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINTER</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//values ()：返回包含所有枚举常量的一个数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values_ <span class=\"token operator\">=</span> <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span> season2 <span class=\"token operator\">:</span> values_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>season2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//valueOf ()：将字符串转换成枚举常量（常量须存在类中）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Season2</span> value <span class=\"token operator\">=</span> <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SUMMER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//compareTo：比较两个，枚举常量的位置</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINTER</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Season2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SPRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * Season</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Season2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 有多个枚举对象用 `,` 间隔，最后 `;` 结尾</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 枚举对象必须放在枚举类体的行首</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">SPRING</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"温暖\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUMMER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"炎热\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">AUTUMN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"凉爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WINTER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"寒冷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WHAT</span><span class=\"token comment\">// 使用无参构造器创建枚举对象，实参列表和小括号都可以省略</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 将构造器私有化 并且不设置 set 方法</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Season2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"The name:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" The Desc:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用细节\"><a class=\"anchor\" href=\"#使用细节\">#</a> 使用细节</h4>\n<ol>\n<li>使用 enum 关键字后，就不能再继承其它类，因为 enum 隐式继承 Enum</li>\n<li>枚举类和普通类一样可以实现接口 <code>enum 类名 implements 接口1...&#123;&#125;</code>  可重写接口方法</li>\n</ol>\n<h2 id=\"注解\"><a class=\"anchor\" href=\"#注解\">#</a> 注解</h2>\n<h4 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> @Override</h4>\n<ul>\n<li>限定某个方法，重写父类方法，该注解只能用于方法</li>\n<li>如果写了此注解，编译器会判断是否重写成功，没有则编译错误</li>\n</ul>\n<h4 id=\"deprecated\"><a class=\"anchor\" href=\"#deprecated\">#</a> @Deprecated</h4>\n<ul>\n<li>用于某个程序元素已经过时（类，方法等）</li>\n<li>不推荐使用，但仍可以使用</li>\n</ul>\n<h4 id=\"suppresswarnings\"><a class=\"anchor\" href=\"#suppresswarnings\">#</a> @SuppressWarnings</h4>\n<ul>\n<li>抑制编译器警告</li>\n<li>unchecked 忽略没有检查的警告</li>\n<li>rawtypes 忽略没有指定泛型的警告</li>\n<li>unused 忽略没有使用某个变量的警告</li>\n<li>作用范围和放置的位置有关</li>\n</ul>\n<h4 id=\"元注解了解\"><a class=\"anchor\" href=\"#元注解了解\">#</a> 元注解（了解）</h4>\n<ul>\n<li>\n<p>Retention 指定注解的作用范围（SOURCE CLASS RUNTIME）</p>\n<ul>\n<li>RetentionPolicy.SOURCE: 编译器使用后，丢弃这种策略的注解</li>\n<li>RetentionPolicy.CLASS：编译器把注解保存在 class 文件，JVM 不会保留此注解，这是默认值</li>\n<li>RetentionPolicy.RUNTIME: 编译器把注解保存在 class 文件，JVM 保留此注解，可以用反射获取该注解信息</li>\n</ul>\n</li>\n<li>\n<p>Target 指定注解可以使用在哪些地方（字段，类，方法，包等）</p>\n</li>\n<li>\n<p>Documented 修饰注解，指定注解是否会在 javadoc 体现，即生成文档时会保留在其中</p>\n</li>\n<li>\n<p>Inherited 子类继承父类注解</p>\n</li>\n</ul>\n<h2 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h2>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>将程序执行中发生的不正常情况称为异常，开发过程中语法错误和逻辑错误不是异常</p>\n<ul>\n<li>异常 (Exception) 分为两类\n<ul>\n<li>Error（错误）：Java 虚拟机无法解决的严重问题，如 JVM 系统内部错误、资源耗尽等。StackOverflowError（栈溢出）和 OOM（OutOfMemoryError），Error 是严重错误，程序会崩溃</li>\n<li>Exception：因为编程错误或偶然外在因素导致的一般性问题，可以使用针对性代码处理\n<ul>\n<li>运行时异常 (RuntimeException)，编译器检查不出来</li>\n<li>编译时异常 (……)，编译器要求必须处理的异常</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异常体系图\"><a class=\"anchor\" href=\"#异常体系图\">#</a> 异常体系图</h3>\n<p><img loading=\"lazy\" data-src=\"RuntimeException.jpg\" alt=\"RuntimeException\" /></p>\n<h3 id=\"常见的运行时异常\"><a class=\"anchor\" href=\"#常见的运行时异常\">#</a> 常见的运行时异常</h3>\n<h4 id=\"nullpointerexception空指针异常\"><a class=\"anchor\" href=\"#nullpointerexception空指针异常\">#</a> NullPointerException（空指针异常）</h4>\n<ul>\n<li>当程序试图在需要使用对象的地方而对象为 null 时，抛出异常</li>\n</ul>\n<h4 id=\"arithmeticexception数学运算异常\"><a class=\"anchor\" href=\"#arithmeticexception数学运算异常\">#</a> ArithmeticException（数学运算异常）</h4>\n<ul>\n<li>当出现异常运算条件时抛出异常，如除以 0</li>\n</ul>\n<h4 id=\"arrayindexoutexception数组下标越界异常\"><a class=\"anchor\" href=\"#arrayindexoutexception数组下标越界异常\">#</a> ArrayIndexOutException（数组下标越界异常）</h4>\n<ul>\n<li>索引为负数或大于等于数组大小时抛出异常</li>\n</ul>\n<h4 id=\"classcastexception类型转换异常但对象不是实例的子类时抛出异常\"><a class=\"anchor\" href=\"#classcastexception类型转换异常但对象不是实例的子类时抛出异常\">#</a> ClassCastException（类型转换异常）但对象不是实例的子类时抛出异常</h4>\n<ul>\n<li>强转时但对象不是实例的子类时抛出异常</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">C</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">C</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">// 抛出异常</span></pre></td></tr></table></figure><h4 id=\"numberformatexception数字格式不正确异常\"><a class=\"anchor\" href=\"#numberformatexception数字格式不正确异常\">#</a> NumberFormatException（数字格式不正确异常）</h4>\n<ul>\n<li>试图将字符串转换成一种数值类型但不能转换成适当格式时抛出异常</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"枫\"</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 抛出异常</span></pre></td></tr></table></figure><h3 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h3>\n<h4 id=\"try-catch-finally\"><a class=\"anchor\" href=\"#try-catch-finally\">#</a> try-catch-finally</h4>\n<ul>\n<li>\n<p>程序员在代码中捕获发生的异常自行处理</p>\n</li>\n<li>\n<p>可以有多个 catch，捕获不同的异常，要求父类在后，子类在前（先捕捉子类异常，再捕捉父类异常）：</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>允许 try - finally 配合使用，没有捕获异常，程序会直接崩溃。应用于执行一段代码是否发生异常都必须执行某个业务逻辑</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>try_catch_finally<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 测试空指针异常 Exception</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionForNull</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"FENG\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"细节-9\"><a class=\"anchor\" href=\"#细节-9\">#</a> 细节</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可能发生异常的代码块放在这里</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 捕获到异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 系统将异常封装成 Exception 对象 e，传递给 catch 方法，</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 得到异常对象后程序员自行处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 如果没有发生异常则不执行 catch 代码块</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 可有可省略</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 不管 try 代码块是否执行，finally 始终都要执行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 通常把资源的释放放在这里</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"throws\"><a class=\"anchor\" href=\"#throws\">#</a> throws</h4>\n<ul>\n<li>将发生的异常抛出交给调用方法处理，最顶级的处理者是 JVM</li>\n<li>JVM 输出异常信息，退出程序</li>\n<li>如果程序员没有显式处理异常，系统默认使用 throws</li>\n<li>如果一个方法可能生成某种异常，但不能确定如何处理，则此方法应显式抛出异常，由调用该方法的调用者处理</li>\n<li>在<strong>方法声明</strong>中用 throws 语句可以声明抛出异常的<strong>列表</strong>，throws 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li>\n</ul>\n<h5 id=\"细节-10\"><a class=\"anchor\" href=\"#细节-10\">#</a> 细节</h5>\n<p><img loading=\"lazy\" data-src=\"throws.png\" alt=\"throws\" /></p>\n<ul>\n<li>编译异常必须处理，可以使用 try-catch 或 throws</li>\n<li>子类重写父类方法时，规定：子类重写的方法抛出的 <code>异常类型 == 父类异常类型</code> ，或  <code>父类抛出异常类型的子类型</code></li>\n<li>try-catch 和 throws 选择一个处理就行</li>\n</ul>\n<h4 id=\"自定义异常\"><a class=\"anchor\" href=\"#自定义异常\">#</a> 自定义异常</h4>\n<ol>\n<li>定义类\n<ul>\n<li>自定义异常类名继承 Exception 或 RuntimeException (一般继承这个)</li>\n</ul>\n</li>\n<li>如果继承 Exception，属于编译异常</li>\n<li>如果继承 RuntimeException，属于运行时异常</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">basic<span class=\"token punctuation\">.</span>try_catch_finally<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token constant\">YEAR</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">YEAR</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YearException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年份不能是负数！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 把信息传给异常类的构造器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 自定义异常类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">YearException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">YearException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 传递给父类信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"throw和throws的区别\"><a class=\"anchor\" href=\"#throw和throws的区别\">#</a> throw 和 throws 的区别</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>意义</th>\n<th>位置</th>\n<th>后面跟</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>throws</td>\n<td>异常处理的一种方式，表示出现异常的一种可能性，并不一定会发生这种异常</td>\n<td>方法声明处，可以是异常列表</td>\n<td>异常类型</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>手动生成异常对象的关键字</td>\n<td>方法体中</td>\n<td>异常对象</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"信息...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常用类\"><a class=\"anchor\" href=\"#常用类\">#</a> 常用类</h2>\n<h3 id=\"包装类wrapper\"><a class=\"anchor\" href=\"#包装类wrapper\">#</a> 包装类 (Wrapper)</h3>\n<h4 id=\"八大包装类\"><a class=\"anchor\" href=\"#八大包装类\">#</a> 八大包装类</h4>\n<p><img loading=\"lazy\" data-src=\"Boolean-1714317177903-4.png\" alt=\"Boolean-1714317177903-4\" /></p>\n<p><img loading=\"lazy\" data-src=\"Character-1714317222011-6.png\" alt=\"Character-1714317222011-6\" /></p>\n<p><img loading=\"lazy\" data-src=\"Wrapper-1714317230290-8.jpg\" alt=\"Wrapper-1714317230290-8\" /></p>\n<h4 id=\"包装类和基本数据类型的转换装箱和拆箱\"><a class=\"anchor\" href=\"#包装类和基本数据类型的转换装箱和拆箱\">#</a> 包装类和基本数据类型的转换（装箱和拆箱）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    jdk5 以前，手动装、拆箱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 手动装箱</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>valueOf <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 手动拆箱</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> j1 <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> j2 <span class=\"token operator\">=</span> i2<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//jdk5 以后，自动装、拆箱</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 自动装箱</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 自动拆箱</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> j3 <span class=\"token operator\">=</span> i3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"包装类和string相互转换\"><a class=\"anchor\" href=\"#包装类和string相互转换\">#</a> 包装类和 String 相互转换</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>wrapper</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @data 2024.4.28</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @date 2024.4.28</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * Integer 和 String 类的相互转换，其他包装类类似</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Integer_String</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//    Integer 转 String</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//    1. 使用 toString () 方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Integer</span> integer1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> integer1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//    2. 使用 String.valueOf () 方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Integer</span> integer2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>valueOf <span class=\"token punctuation\">(</span>integer2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//     String 转 Integer</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//     1. 使用 Integer.parseInt () 方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"40\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Integer</span> integer4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>parseInt <span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">//     2. 使用 Integer.valueOf () 方法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">String</span> str5 <span class=\"token operator\">=</span> <span class=\"token string\">\"50\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Integer</span> integer5 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>valueOf <span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">//     3. 使用 Integer 的构造器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> str6 <span class=\"token operator\">=</span> <span class=\"token string\">\"60\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Integer</span> integer6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span> <span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"包装类integer和charater的常用方法举例\"><a class=\"anchor\" href=\"#包装类integer和charater的常用方法举例\">#</a> 包装类 Integer 和 Charater 的常用方法（举例）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Integermethods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer的最大值：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取最大值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer的最小值：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取最小值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>isDigit <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断是否为数字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>isLetter <span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断是否为字母</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>isUpperCase <span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断是否为大写字母</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>isLowerCase <span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断是否为小写字母</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>toUpperCase <span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换为大写</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>toLowerCase <span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转换为小写</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"integer面试\"><a class=\"anchor\" href=\"#integer面试\">#</a> Integer 面试</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 首先，检查传入的 int 值 i 是否在 IntegerCache.low（-128）和 IntegerCache.high（127）之间。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 如果在范围内，直接从 IntegerCache.cache 数组中取出对应位置的 Integer 对象，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 并将其加 - IntegerCache.low 偏移量，以匹配原始的 int 值。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 如果传入的 int 值 i 不在范围内，说明是一个新的值，需要创建一个新的 Integer 对象。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     @IntrinsicCandidate</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     public static Integer valueOf (int i) &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *         if (i >= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *             return IntegerCache.cache [i + (-IntegerCache.low)];</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *         return new Integer (i);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *     private static final class IntegerCache &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> *         static final int low = -128;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *         static final int high;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> *         ......</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *         ......</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> *         Integer [] c = new Integer [size];</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *          int j = low;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> *          for (int i = 0; i &lt; c.length; i++) &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> *             c [i] = new Integer (j++);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> *          &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i4 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i5 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i6 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i7 <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Integer</span> i8 <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> i9 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false new 关键字的两个对象地址不同，== 比较的是地址</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i3 <span class=\"token operator\">==</span> i4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 自动装箱，编译器自动调用 valueOf 方法，缓存 [-128,127]，范围内直接比较值，否则返回 new 对象 为 false</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i5 <span class=\"token operator\">==</span> i6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 自动装箱，编译器自动调用 valueOf 方法，缓存 [-128,127], 范围内直接比较值，否则返回 new 对象 为 false</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i7 <span class=\"token operator\">==</span> i8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 自动装箱，编译器自动调用 valueOf 方法，缓存 [-128,127], 范围内直接比较值，否则返回 new 对象 为 false</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 自动拆箱，比较值 (含基本类型的则自动拆箱比较值)</span></pre></td></tr></table></figure><h3 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h3>\n<h4 id=\"string结构\"><a class=\"anchor\" href=\"#string结构\">#</a> String 结构</h4>\n<ol>\n<li>\n<p>String 对象用于保存字符串，即字符串序列</p>\n</li>\n<li>\n<p>“jack” 字符串常量，即字符串序列</p>\n</li>\n<li>\n<p>字符串的字符不论是字母还是汉字，都是占用两个字节</p>\n</li>\n<li>\n<p>String 有很多构造器</p>\n<ul>\n<li><code>String s1 = new String();</code></li>\n<li><code>String s2 = new String(String original);</code></li>\n</ul>\n</li>\n<li>\n<p>String 类实现了 Serializable 接口，可以串行化，允许在网络传输</p>\n</li>\n<li>\n<p>String 类实现了 Comparable 接口，可以比较大小</p>\n</li>\n<li>\n<p>String 是 final 类，不能被继承</p>\n</li>\n<li>\n<p>String 有属性 <code>private final char value[];</code> value 存放字符串内容，不可以修改地址，但可以修改地址所指向的内容</p>\n</li>\n</ol>\n<h4 id=\"string-对象的两种创建方式\"><a class=\"anchor\" href=\"#string-对象的两种创建方式\">#</a> String 对象的两种创建方式</h4>\n<ol>\n<li><code>String s1 = &quot;fx&quot;;</code></li>\n</ol>\n<blockquote>\n<p>先从常量池检查是否有 “fx” 数据空间，有：s1 直接指向；没有：重新创建 “fx”, 然后指向。<strong>s1 指向常量池的空间地址</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"fx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"fx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">;</span><span class=\"token comment\">//true 指向常量池同一个对象</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>String s2 = new String(&quot;fx&quot;);</code></li>\n</ol>\n<blockquote>\n<p>先在堆中创建空间，里面维护 value 属性，指向常量池 “fx” 空间；若没有 “fx”，则重新创建 “fx”，如果有，value 直接指向。<strong>s2 指向堆的地址</strong></p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"jvm.png\" alt=\"jvm\" /></p>\n<blockquote>\n<p>调用 <code>intern</code>  方法时，如果池中包含一个等于此 String 对象的字符串（用 <code>equals(Object)</code>  方法确定），返回池中的字符串地址；否则将此对象添加到常量池中并返回 String 对象的引用</p>\n<p>最终返回常量池的地址</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"fx\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向常量池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"fx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向堆内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>equals <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 比较字符串内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 比较引用地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>intern <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 比较引用地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span>intern <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 比较引用地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"字符串的特性\"><a class=\"anchor\" href=\"#字符串的特性\">#</a> 字符串的特性</h4>\n<ul>\n<li>String 是 final 类，代表不可变的字符序列</li>\n<li>字符串是不可变的，一个字符串对象一旦被分配，其内容不可变</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建 2 个对象，s1 从 \"hello\" 指向 \"name\"，hello 和 name 存在于常量池中</span></pre></td></tr></table></figure><ul>\n<li>编译器做优化 <code>String a = &quot;hello&quot; + &quot;abc&quot;</code> ==&gt; <code>String a = &quot;helloabc&quot;;</code></li>\n</ul>\n<pre><code>String a = &quot;hello&quot; + &quot;abc&quot;;//只有一个对象\n</code></pre>\n<ul>\n<li>StringBuilder</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">//3 个对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 先创建 StringBuilder sb = StringBuilder ();</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 执行 sb.append (\"hello\");</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 执行 sb.append (\"abc\");</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//String c = sb.toString ();toString 返回的是 new 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 最后 c 指向堆对象中的 (String) value [] -> \"helloabc\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 数组存放在堆中</span></pre></td></tr></table></figure><blockquote>\n<p><code>String &quot;a&quot; + &quot;b&quot;;</code>  常量相加，在<strong>常量池</strong>； <code>String c = a + b;</code>  变量相加，在<strong>堆中</strong></p>\n</blockquote>\n<h4 id=\"string常用方法补充\"><a class=\"anchor\" href=\"#string常用方法补充\">#</a> String 常用方法补充</h4>\n<ul>\n<li>\n<p>equalsIgnoreCase ()：忽略大小写判断内容是否相等</p>\n</li>\n<li>\n<p>indexOf (‘字符’/“字符串”)：返回字符串中某个字符 / 字符串<strong>第一次</strong>出现的索引位置（从 0 开始）</p>\n</li>\n<li>\n<p>lastIndexOf (‘字符’/“字符串”)：返回字符串中某个字符 / 字符串<strong>最后一次</strong>出现的索引位置（从 0 开始）</p>\n</li>\n<li>\n<p>subString ()：截取指定内容的字符串（包括索引）</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">subString</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//world</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">subString</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span>，<span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//wo 截取从索引 6 到（8-1) 的位置</span></pre></td></tr></table></figure><ul>\n<li>concat ()：拼接字符串</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>replace (“a”,”b)：将所有”a” 替换成 “b”, 原字符串没有变化，方法执行后<strong>返回的结果</strong>才是替换后的</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hello,world</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hi,world</span></pre></td></tr></table></figure><ul>\n<li>split ()：对字符串用某个字符分割，返回一个数组（有的特殊字符需要使用转义字符）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\aa\\\\bb\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>转义字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>toCharArray ()：返回一个字符数组</p>\n</li>\n<li>\n<p>campareTo():</p>\n<ul>\n<li>\n<p>长度相等，每个字符相同，返回 0</p>\n</li>\n<li>\n<p>长度相等，字符不相同，返回第一个不相同字符的差值</p>\n</li>\n<li>\n<p>字符一部分相同，长度不同，返回长度的差值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>format ()：格式转换，占位符由变量替换</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"枫叶\"</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"姓名：%s 年龄：%d 性别：%c\"</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"stringbuffer\"><a class=\"anchor\" href=\"#stringbuffer\">#</a> StringBuffer</h4>\n<h5 id=\"基本概念-2\"><a class=\"anchor\" href=\"#基本概念-2\">#</a> 基本概念</h5>\n<ul>\n<li>StringBuffer 的直接父类 是 AbstractStringBuilder</li>\n<li>StringBuffer 实现了 Serializable, 即 StringBuffer 们对象可以串行化，可以在网络中传输</li>\n<li>在父类中 AbstractStringBuilder 有属性: char [] value, 不是 final，该 value 数组存放 字符串内容，引用存放在堆中</li>\n<li>因为 StringBuffer 字符内容是存在 char [] value, 所以在变化 (增加 / 删除)，不用每次都更换地址 (即创建新对象)，当超出容量范围时，StringBuffer 创建更大的新字符串数组，将原内容拷贝到新数组</li>\n<li>StringBuffer 是一个 final 类，不能被继承</li>\n</ul>\n<h5 id=\"stringbuffer构造器和string的相互转换\"><a class=\"anchor\" href=\"#stringbuffer构造器和string的相互转换\">#</a> StringBuffer 构造器和 String 的相互转换</h5>\n<h6 id=\"stringbuffer构造器\"><a class=\"anchor\" href=\"#stringbuffer构造器\">#</a> StringBuffer 构造器</h6>\n<ol>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始 char 数组容量大小为 16</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始 char 数组容量大小为 100</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始 char 数组容量大小为 16 + 5 = 21</span></pre></td></tr></table></figure></li>\n</ol>\n<h6 id=\"转换\"><a class=\"anchor\" href=\"#转换\">#</a> 转换</h6>\n<ul>\n<li>\n<p>String —&gt; StringBuffer</p>\n<ol>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构造器</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始 char 数组容量大小为 16</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s2 <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>StringBuffer —&gt;String</p>\n<ol>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 StringBuffer 的 toString 方法</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 直接 new String</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h5 id=\"stringbuffer方法\"><a class=\"anchor\" href=\"#stringbuffer方法\">#</a> StringBuffer 方法</h5>\n<ol>\n<li>\n<p>​     删除索引为 &gt;= start &amp;&amp; &lt;end 处的字符 解读：删除 11 到 13 的字符 [11, 14)   <code>s.delete(11, 14); System.out.println(s);</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//\"hello，张三丰赵敏 true10.5\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 改</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 周芷若 替换 索引 9-10 的字符 (赵敏)[9,11)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hello，张三丰周芷若 true10.5\"</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在索引为 9 的位置插入 \"赵敏\"，原来索引为 9 的内容自动后移</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hello，张三丰赵敏周芷若 true10.5\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"stringbuilder\"><a class=\"anchor\" href=\"#stringbuilder\">#</a> StringBuilder</h4>\n<h5 id=\"基本概念-3\"><a class=\"anchor\" href=\"#基本概念-3\">#</a> 基本概念</h5>\n<ol>\n<li>StringBuilder 继承 AbstractStringBuilder 类</li>\n<li>实现了 Serializable，说明 StringBuilder 对象是可以串行化 (对象可以网络传输，可以保存到文件)</li>\n<li>StringBuilder 是 final 类，不能被继承</li>\n<li>StringBuilder 对象字符序列仍然是存放在其父类 AbstractStringBuilder 的 char [] value; 因此，字符序列是堆中</li>\n<li>StringBpilder 的方法，没有做互斥的处理，即没有 synchronized 关键字，常用于单线程中</li>\n</ol>\n<ol>\n<li>一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步 (StringBuilder 不是线程安全)。该类被设计用作 StringBuffer 的一个<strong>简易替换</strong>，<strong>用在字符串绶冲区被单线程使用的时候</strong>。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快 。</li>\n<li>在 StringBuilder 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。</li>\n</ol>\n<h4 id=\"string-stringbuffer-stringbuild的比较\"><a class=\"anchor\" href=\"#string-stringbuffer-stringbuild的比较\">#</a> String、StringBuffer、StringBuild 的比较</h4>\n<ol>\n<li>StringBuilder 和 StringBuffer 非常类似，均代表可变的字等序列，而且方法也一样</li>\n<li>String：不可变字等序列，效率低，但是复用率高。</li>\n<li>StringBuffer: 可变字符序列、效率较高 (增啧)，线程安全，看源䄧</li>\n<li>StringBuilder: 可变字符序列、效率最高、线程不安全</li>\n<li>Strihg 使用注意说明:<br />\nstring s=&quot;a&quot;;// 创建了一个字等串<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">s</mi><mo>+</mo><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{s}+=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbf\">s</span><span class=\"mord\">+</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span></span></span> &quot;b&quot;; // 实际上原来的 &quot;a&quot; 字符串对象已经丢奔了，现在又产生了一个字符串 s+&quot;b&quot; (也就是 &quot;ab&quot;)。如果多㳄执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能</li>\n<li>String、StringBuffer 和 StringBuilder 的选择</li>\n<li>如果字符串存在大量的修改操作，一般使用 StringBuffer 或 StringBuilder</li>\n<li>如果字符串存在大量的<strong>修改</strong>操作，并在<strong>单线程</strong>的情况，使用 <strong>StringBuilder</strong></li>\n<li>如果字符串存在大量的<strong>修改</strong>操作，并在<strong>多线程</strong>的情况，使用 <strong>StringBuffer</strong></li>\n<li>如果我们字符串<strong>很少修改</strong>，被<strong>多个对象引用</strong>，使用<strong> String</strong>，比如配置信息等</li>\n<li>StringBuilder 的方法使用和 StringBuffer 一样</li>\n</ol>\n<h3 id=\"math方法\"><a class=\"anchor\" href=\"#math方法\">#</a> Math 方法</h3>\n<ol>\n<li>Math.random (): 返回 [0,1) 的随机数；返回 [a,b) 的随机数 —&gt; <code>(int)(a+Math.random() * (b-a+1))</code></li>\n<li>Math.max (int a,int b)：返回最小数</li>\n<li>Math.min (int a,int,b)：返回最大数</li>\n<li>Math.ceil (x): 返回 &gt;=x 的最小整数（天花板函数）</li>\n<li>Math.floor (x): 返回 &lt;=x 的最小整数（地板函数）</li>\n<li>Math.pow (int x,int y): 返回 x 的 y 次方</li>\n</ol>\n<h3 id=\"array类常见方法\"><a class=\"anchor\" href=\"#array类常见方法\">#</a> Array 类常见方法</h3>\n<ol>\n<li>\n<p>toString ()：返回数组的字符串形式</p>\n</li>\n<li>\n<p>sort ()：自然排序和定制排序，默认升序</p>\n<ol>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>wrapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 使用冒泡排序实现定制排序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Array_Define_Sort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 使用匿名内部类实现 Comparator 接口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 这里以升序为例，即小的数在前</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        defineSort <span class=\"token punctuation\">(</span>arr <span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 重写 compare 方法，实现自定义排序规则</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 传入两个 arr 数组参数，返回一个整数，表示比较结果</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> compare <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1 <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> o1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> o2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 返回负数表示 o1&lt;o2，返回正数表示 o1>o2，返回 0 表示 o1 == o2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">return</span> i1 <span class=\"token operator\">-</span> i2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>toString <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">defineSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 使用 Comparator 接口的 compare 方法进行比较</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">// 如果返回正数，表示 o1>o2, 则交换两个数的位置，这里以升序为例，即小的数在前</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 如果返回负数，表示 o1&lt;o2, 则不交换位置</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 如果返回 0，表示 o1 == o2, 则不交换位置</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>compare <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// 根据传入的匿名接口调用其重写的 compare 方法</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 根据 compare 返回的结果判断是否进行交换</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>binarySearch (arr,Object data)：通过二分法查找值为 data 的索引，arr 必须排好序</p>\n<ol>\n<li><code>int index = Arrays.binarySearch(arr,10);</code>  寻找数组 arr 的元素 10 的索引下标</li>\n<li>如果数组元素不存在，return -(low + 1);(low：元素应该存在的位置)</li>\n</ol>\n</li>\n<li>\n<p>copyOf (arr,int length)：数组元素复制</p>\n<ol>\n<li>\n<p>将 arr 数组的 length 个元素复制到另一个数组（可以是 arr 本身）中</p>\n</li>\n<li>\n<p>如果复制长度 &gt; arr.length 就在新数组后面添加 null</p>\n</li>\n<li>\n<p>如果复制长度 &lt; 0，抛出异常 NegetiveArraySizeException</p>\n</li>\n</ol>\n</li>\n<li>\n<p>fill (arr,Object data)：数组元素按某一个值全部填充</p>\n</li>\n<li>\n<p>equals (arr1,arr2)：比较数组元素是否完全一直一致</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>wrapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Arrays_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建一个整数数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 使用 Arrays.toString 方法打印数组内容</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArray: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 使用 Arrays.sort 方法对数组进行排序</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorted intArray: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 使用 Arrays.binarySearch 方法对排序后的数据进行二分查找</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> searchKey1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> searchKey2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> searchKey3 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> searchKey1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> index2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> searchKey2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> index3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> searchKey3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 打印查找结果</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"index = \"</span> <span class=\"token operator\">+</span> index1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"index = \"</span> <span class=\"token operator\">+</span> index2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//index2 = -(low + 1),low 此时为 5</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"index = \"</span> <span class=\"token operator\">+</span> index3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//index2 = -(low + 1),low 此时为 0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 使用 Arrays.equals 方法比较两个数组是否相等</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArray equals intArray2: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> intArray2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 使用 Arrays.fill 方法填充数组</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>fill <span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArray after fill: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>fill <span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intArray after fill: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>intArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"system方法\"><a class=\"anchor\" href=\"#system方法\">#</a> System 方法</h3>\n<ol>\n<li>exit (0)：退出程序，0 表示正常状态</li>\n<li>arraycopy：复制数组</li>\n<li>currentTimeMillens：返回当前时间距离 1970-1-1 的毫秒数</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>wrapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 复制数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 形参:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// src the source array.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// srcPos – starting position in the source array.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// dest – the destination array.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// destPos – starting position in the destination data.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// length – the number of array elements to be copied.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 输出复制后的数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"biginteger-bigdecimal类大数-小数处理\"><a class=\"anchor\" href=\"#biginteger-bigdecimal类大数-小数处理\">#</a> BigInteger、BigDecimal 类（大数、小数处理）</h3>\n<ol>\n<li>add 加</li>\n<li>subtract 减</li>\n<li>multiply 乘</li>\n<li>divide 除</li>\n</ol>\n<h4 id=\"biginteger更大的数\"><a class=\"anchor\" href=\"#biginteger更大的数\">#</a> BigInteger（更大的数）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BigInteger</span> biginteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"454456456564564565545455654546456454\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 大数字符串 BigInteger 自动转换类型</span></pre></td></tr></table></figure><h4 id=\"bigdecimal更高精度\"><a class=\"anchor\" href=\"#bigdecimal更高精度\">#</a> BigDecimal（更高精度）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BigDecimal</span> bigdecimal <span class=\"token operator\">=</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.154546556456455644\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>除法可能抛出异常（除不尽）：解决 — 调用 divide 方法时指定精度 <code>bigdecimal.divide(bigdecimal,BigDecimal.Round_CEILING)</code>  , 如果无限，保留分子的精度</li>\n</ul>\n<h3 id=\"日期类\"><a class=\"anchor\" href=\"#日期类\">#</a> 日期类</h3>\n<h4 id=\"date-simpledateformat\"><a class=\"anchor\" href=\"#date-simpledateformat\">#</a> Date &amp;&amp; SimpleDateFormat</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个 Date 对象获取当前日期和时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 创建一个 Date 对象，通过毫秒数指定特定的日期和时间 1970-1-1 8:00:00</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Date</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">(</span><span class=\"token number\">99999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 格式化日期和时间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> formattedDate1 <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>formattedDate1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 通过字符串指定特定的日期和时间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> data3 <span class=\"token operator\">=</span> <span class=\"token string\">\"2024-05-02 10:00:00\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Date</span> parsedDate <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sdf<span class=\"token punctuation\">.</span>format <span class=\"token punctuation\">(</span>parsedDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"calendar类\"><a class=\"anchor\" href=\"#calendar类\">#</a> Calendar 类</h4>\n<h5 id=\"calendar是一个抽象类构造器是private为一些日历字段之间的转换提供方法也为操作日历字段提供方法\"><a class=\"anchor\" href=\"#calendar是一个抽象类构造器是private为一些日历字段之间的转换提供方法也为操作日历字段提供方法\">#</a> Calendar 是一个抽象类，构造器是 private, 为一些日历字段之间的转换提供方法，也为操作日历字段提供方法</h5>\n<ol>\n<li>通过 Calendar.getInstance () 获取实例</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>wrapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Calendar</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calendar_Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建一个 Calendar 实例</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 获取当前日期和时间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">YEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MONTH</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 月份从 0 开始，所以要加 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAY_OF_MONTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOUR_OF_DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECOND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 输出当前日期和时间</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前日期和时间：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span> year <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> hour <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> minute <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"第三代日期类\"><a class=\"anchor\" href=\"#第三代日期类\">#</a> 第三代日期类</h4>\n<h5 id=\"使用now返回当前时间\"><a class=\"anchor\" href=\"#使用now返回当前时间\">#</a> 使用 now () 返回当前时间</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>wrapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDateTime</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateTimeFormatter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @data 2024.5.2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalDateTime_Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 创建一个 LocalDateTime 对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 打印当前日期和时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前日期和时间: \"</span> <span class=\"token operator\">+</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 创建一个特定的 LocalDateTime 对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">LocalDateTime</span> specificDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2023</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 打印特定日期和时间</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"特定日期和时间: \"</span> <span class=\"token operator\">+</span> specificDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 格式化日期和时间</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> formattedDateTime <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span>format <span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Formatted Date Time: \"</span> <span class=\"token operator\">+</span> formattedDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<h3 id=\"集合体系图\"><a class=\"anchor\" href=\"#集合体系图\">#</a> 集合体系图</h3>\n<ul>\n<li>单例集合：</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240503214228202.png\" alt=\"image-20240503214228202\" /></p>\n<ul>\n<li>双列集合（键值对）：</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240503214444507.png\" alt=\"image-20240503214444507\" /></p>\n<h3 id=\"collection接口和常用方法\"><a class=\"anchor\" href=\"#collection接口和常用方法\">#</a> Collection 接口和常用方法</h3>\n<ol>\n<li>\n<p>Collection 实现子类可以存放多个元素，每个元素可以是 Object</p>\n</li>\n<li>\n<p>有些 Collection 的实现类是有序的 (List)，有些不是有序 (Set)</p>\n</li>\n<li>\n<p>有些 Collection 的实现类可以存放多个重复元素，有些不能</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @data 2024.5.3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Collection_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Collection</span> collection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// add(E e)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.add(): \"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//remove(Object o)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//collection.remove (1);//Collection 删除不了指定下标的元素</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.remove (true): \"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 判空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.isEmpty(): \"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 返回元素个数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.size():\"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 清空集合</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>clear <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.clear(): \"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 判断集合是否包含指定元素</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.contains (true):\"</span> <span class=\"token operator\">+</span>collection<span class=\"token punctuation\">.</span>contains <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//list.remove (0);//List 可以删除指定下标的元素</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list:\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 判断集合是否包含多个元素</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.containsAll (list):\"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">.</span>containsAll <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 删除多个元素</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">.</span>removeAll <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"collection.removeAll (list):\"</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"collection遍历\"><a class=\"anchor\" href=\"#collection遍历\">#</a> Collection 遍历</h3>\n<ol>\n<li>Iterator\n<ol>\n<li>Iterator 对象称为迭代器，用于遍历集合的元素</li>\n<li>所有实现了<strong> Collection</strong> 接口的集合类都有一个 iterator () 方法，返回 iterator 接口对象，即返回一个迭代器</li>\n<li>仅用于遍历集合，不存放对象</li>\n</ol>\n</li>\n<li>hasNext ()：判断是否还有下一个元素</li>\n<li>next()\n<ol>\n<li>指针下移</li>\n<li>将下移后集合位置上的元素返回</li>\n<li>返回的类型是 Object 类</li>\n<li><img loading=\"lazy\" data-src=\"image-20240503231943843.png\" alt=\"image-20240503231943843\" /></li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @data 2024.5.3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Collection_Traverse</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//      遍历集合的代码示例</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Book</span> book1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Book</span> book2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"C++\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Book</span> book3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Collection</span> collection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>book1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>book2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        collection<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>book3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 遍历集合</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 方法 1：使用 iterator 遍历</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"使用iterator遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向下转型</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span>getPrice <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 方法 2：使用增强 for 循环遍历</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"使用增强for循环遍历:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token operator\">:</span>collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 注意：这里需要强制类型转换</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 因为增强 for 循环遍历集合时，返回的是 Object 类型的对象</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 需要使用 Book 类的方法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 需要] 将其转换为 Book 类型</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span>getPrice <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">Price</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Price</span> <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> setName <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> getPrice <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Price</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> setPrice <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">Price</span> <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"collections工具类\"><a class=\"anchor\" href=\"#collections工具类\">#</a> Collections 工具类</h3>\n<h4 id=\"基本介绍-2\"><a class=\"anchor\" href=\"#基本介绍-2\">#</a> 基本介绍</h4>\n<ol>\n<li>Collections 是一个操作 Set、List、和 Map 等集合的工具类</li>\n<li>Collections 提供了一系列静态方法对集合元素进行排序、查询和修改等操作</li>\n</ol>\n<h4 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h4>\n<ol>\n<li>reverse (list): 反转元素顺序</li>\n<li>shufffle (list): 随机排序</li>\n<li>sort (list)：根据元素自然排序对 list 集合升序排序</li>\n<li>sort (list,Comparetor): 根据指定的 Comparetor 产生的顺序排序</li>\n<li>swap (list,int i,int j): 将集合 list 位置 i 和 j 处元素交换顺序</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>all</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * Collection 的工具类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Methods01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"原始顺序：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 反转元素顺序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>reverse <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"反转后的顺序：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 随机打乱元素顺序</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>shuffle <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"打乱后的顺序：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 对元素进行自然排序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>sort <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"自然排序后的顺序：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 对元素进行自定义排序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>sort <span class=\"token punctuation\">(</span>list <span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> compare <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"自定义排序后的顺序：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 交换顺序</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>swap <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"交换后的顺序：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"查找-替换\"><a class=\"anchor\" href=\"#查找-替换\">#</a> 查找、替换</h4>\n<ol>\n<li>max (list): 根据元素自然排序，返回最大元素</li>\n<li>max (list,Comparetor): 根据 Comparetor 指定的顺序，返回 list 集合中是最大元素</li>\n<li>min(list),min(list,Comparator)</li>\n<li>int frequency (list,Object): 返回 list 集合里 Object 的出现次数</li>\n<li>void copy (list,src): 将 src 内容赋值到 list 中，首先需要将 list 的大小设置和 src 相等</li>\n<li>boolean replaceAll (list,oldvalue,newvalue): 使用新值替换所有旧值</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>all</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Methods02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span> list02 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list02<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list02<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"merry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list02<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list02<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"路易\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list02<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"原始列表：\"</span> <span class=\"token operator\">+</span> list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// max</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"lise02中自然排序的最大元素： \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>max <span class=\"token punctuation\">(</span>list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 自定义 max</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list02中按照字符串长度排序的最大元素：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>max <span class=\"token punctuation\">(</span>list02 <span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> compare <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// min</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list02中自然排序的最小元素：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>min <span class=\"token punctuation\">(</span>list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 自定义 min</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list02中按照字符串长度排序的最小元素：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>min <span class=\"token punctuation\">(</span>list02 <span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> compare <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// frequency</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        list02<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list02中john的个数：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>frequency <span class=\"token punctuation\">(</span>list02 <span class=\"token punctuation\">,</span> <span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">List</span> listCopy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// copy</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list02<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            listCopy<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>copy <span class=\"token punctuation\">(</span>listCopy <span class=\"token punctuation\">,</span> list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list02：\"</span> <span class=\"token operator\">+</span> list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"listCopy：\"</span> <span class=\"token operator\">+</span> listCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// replaceAll</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"将‘john’全部替换成‘汤姆’：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span>replaceAll <span class=\"token punctuation\">(</span>list02 <span class=\"token punctuation\">,</span> <span class=\"token string\">\"john\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"汤姆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list02：\"</span> <span class=\"token operator\">+</span> list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"list接口\"><a class=\"anchor\" href=\"#list接口\">#</a> List 接口</h3>\n<h4 id=\"list接口基本介绍\"><a class=\"anchor\" href=\"#list接口基本介绍\">#</a> List 接口基本介绍</h4>\n<ol>\n<li>List 集合类中的元素有序（即添加顺序和取出顺序一致），可重复</li>\n<li>List 集合类中每个元素都有对应的顺序索引，可以根据索引进行相关操作</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">List_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            list1<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            list2<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加元素后的列表list1：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加元素后的列表list2：\"</span> <span class=\"token operator\">+</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 在指定位置插入元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"元素6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在指定位置2插入元素后的列表：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 从指定位置开始将 list2 的元素添加到 list1 中</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>addAll <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"将list2的元素添加到list1位置1中后的列表：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取指定位置的元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"list1集合中索引为2的元素：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 返回指定元素在集合中第一次出现的索引</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素6在list1集合中第一次出现的索引：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span>indexOf <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 返回指定元素在集合中最后一次出现的索引</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素6在list1集合中最后一次出现的索引：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span>lastIndexOf <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 删除指定位置的元素</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除指定位置1元素后的列表：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 删除指定元素，并返回此元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token string\">\"元素6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除指定元素后的列表：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 设置指定位置的元素，相当于覆盖</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>set <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"枫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"设置指定位置2元素后的列表：\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>遍历方式同 Collection</p>\n</blockquote>\n<h3 id=\"arraylist\"><a class=\"anchor\" href=\"#arraylist\">#</a> ArrayList</h3>\n<h4 id=\"扩容机制\"><a class=\"anchor\" href=\"#扩容机制\">#</a> 扩容机制</h4>\n<ol>\n<li>\n<p>ArrayList 维护了一个 Object 类的数组 elementData（ <code>transient Object[] elementData;</code> ）transient 表示暂时的，瞬间的，属性不会被序列化</p>\n</li>\n<li>\n<p>无参创建 ArrayList 对象时，elementData 容量为 0，第一次添加数据，elementData 容量扩容为 10，以后每次扩容为原容量的 1.5 倍</p>\n</li>\n<li>\n<p>有参创建 ArrayList 对象时，elementData 容量为指定大小，以后每次扩容为原容量的 1.5 倍</p>\n</li>\n<li>\n<p>不安全，效率高</p>\n</li>\n<li>\n<p>如下代码可自行追溯源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 数组的扩容机制</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList_Expand</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 无参构造方法创建 ArrayList</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span> arrayList1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            arrayList1<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList1: \"</span> <span class=\"token operator\">+</span> arrayList1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 指定初始容量构造方法创建 ArrayList</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span> arrayList2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            arrayList2<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"arrayList2: \"</span> <span class=\"token operator\">+</span> arrayList2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> Vector</h3>\n<ol>\n<li>Vector 维护了一个 Object 类的数组 elementData（ <code>transient Object[] elementData;</code> ）transient 表示暂时的，瞬间的，属性不会被序列化</li>\n<li>Vector 是线程同步的，即线程安全，Vector 的操作方法带有 sysnchronized</li>\n<li>开发中，需要线程同步安全考虑使用 Vector</li>\n<li>无参创建 Vector 对象时，elementData 容量为 0，第一次添加数据，elementData 容量扩容为 10，以后每次扩容为原容量的 2 倍</li>\n<li>有参创建 Vector 对象时，elementData 容量为指定大小，以后每次扩容为原容量的 2 倍</li>\n<li>安全，效率不高</li>\n</ol>\n<h3 id=\"linkedlist\"><a class=\"anchor\" href=\"#linkedlist\">#</a> LinkedList</h3>\n<h4 id=\"底层结构\"><a class=\"anchor\" href=\"#底层结构\">#</a> 底层结构</h4>\n<ol>\n<li>LinkedList 底层实现了双向链表和双端队列</li>\n<li>可以添加任意元素（包括 null），元素可以重复</li>\n<li>线程不安全，没有实现同步</li>\n<li>LinkedList 底层维护了一个双向链表，两个属性 first 和 last 分别指向首节点和尾结点，每个 Node 对象里面维护了 prev,next,item 三个属性</li>\n<li>如下代码可自行追溯源码<img loading=\"lazy\" data-src=\"image-20240504151118488.png\" alt=\"image-20240504151118488\" /></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">E</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> prev<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> element<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList_Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"set接口\"><a class=\"anchor\" href=\"#set接口\">#</a> Set 接口</h3>\n<h4 id=\"set基本介绍\"><a class=\"anchor\" href=\"#set基本介绍\">#</a> Set 基本介绍</h4>\n<ol>\n<li>无序（添加和取出的顺序不一致），没有索引</li>\n<li>不允许重复元素</li>\n<li>最多包含一个 null</li>\n</ol>\n<h4 id=\"set接口和常用方法\"><a class=\"anchor\" href=\"#set接口和常用方法\">#</a> Set 接口和常用方法</h4>\n<ol>\n<li>和 List 接口一样，Set 接口也是 Collection 的子接口，常用方法和 Collection 接口一样</li>\n<li>接口的遍历方式：\n<ol>\n<li>迭代器 iterator</li>\n<li>增强 for</li>\n<li>不能使用索引方式获取</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"hashset类实现了set接口\"><a class=\"anchor\" href=\"#hashset类实现了set接口\">#</a> HashSet 类 — 实现了 Set 接口</h4>\n<ol>\n<li>HashSet 实际上是 HashMap</li>\n<li>可以存放 null 值，只能有一个</li>\n<li>HashSet 不保证元素有序，取决于 hash 后再确定索引结果</li>\n<li>不能有重复的元素或对象</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 1. HashSet 不保证元素有序，取决于 hash 后再确定索引结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 2. 不能有重复的元素或对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">HashSet</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        set<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        set<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不会重复添加 feng</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 两个对象不同，可以添加，如果想要不重复，需要重写 equals 和 hashCode 方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        set<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"xin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        set<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"xin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// String 类的 xin 在常量池只有一份，不会重复添加 xin</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"hashset的底层机制\"><a class=\"anchor\" href=\"#hashset的底层机制\">#</a> HashSet 的底层机制</h4>\n<ul>\n<li>HashSet 的底层是 HashMap,HashMap 的底层是数组 + 链表 + 红黑树</li>\n</ul>\n<ol>\n<li>先获取元素的哈希值（hashCode () 方法）</li>\n<li>对哈希值进行运算，得出一个索引值，即要存放在哈希表的位置</li>\n<li>如果该位置没有其他元素，直接存放</li>\n<li>如果该位置已经存放其他元素，则进行 equals () 判断，相等不添加，否则以链表的方式添加到最后</li>\n<li>HashSet 第一次添加时 table 扩容到 16，临界值 0.75*16 = 12,；如果 table 数组使用到临界值 12，数组扩容到 32，临界值为 32 * 0.75 = 24，依次类推 (<em><strong>注意：在任意位置达到临界值即可，不一定非要在一条链表上，源码解释如下</strong></em>)</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 每加入一个结点，size++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>Java8 中，如果一条链表的元素个数到达 TREEIFY_THRESHOLD（默认是 8），且 table 大小 &gt;= MIN_TREEIFY_CAPACITY（默认 64），这条链表就会进行树化（红黑树）</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token comment\">// 添加都末尾后立即判断是否有 8 个结点，即 binCount=7</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1 for 1st   binCount >= 7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                            <span class=\"token comment\">//8 个结点，对当前链表进行树化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 如果 table 数组大小 &lt; 64</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MIN_TREEIFY_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//MIN_TREEIFY_CAPACITY = 64</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用扩容解决</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">elseif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 树化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"image-20240505171610750.png\" alt=\"image-20240505171610750\" /></p>\n<h4 id=\"hashset底层源码\"><a class=\"anchor\" href=\"#hashset底层源码\">#</a> HashSet 底层源码</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">HashSet</span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        hashSet<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashSet<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"xin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        hashSet<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1 执行的源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//map = null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">AbstractCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all other fields defaulted，DEFAULT_LOAD_FACTOR = 0.75</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2 执行的源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 put 方法，e = fengstatic final Object PRESENT = new Object (); 目前没有什么意义，占位</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//key = feng,value = PRESENT</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// hash(key):</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 key 的无符号向右移 16 位的哈希值，防止冲突</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span><span class=\"token comment\">// 辅助变量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//transient Node&lt;K,V>[] table;// 放 Node 结点的一个数组，此时 table = null</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 如果 table == null 进行第一次扩容，大小 16</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行 resize ()，n = 16</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 根据 key 的 hash 值，计算 key 应该存放到表的哪个索引位置</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//(n - 1) &amp; hash 位运算 确保不同的键映射到不同的索引上，从而避免冲突</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 判断结点 p 为空</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建 Node 存放 key</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/* 本次代码不执行：</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        else &#123;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            Node&lt;K,V> e; K k;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            if (p.hash == hash &amp;&amp;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                ((k = p.key) == key || (key != null &amp;&amp; key.equals (k))))</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                e = p;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            else if (p instanceof TreeNode)</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                e = ((TreeNode&lt;K,V>) p).putTreeVal (this, tab, hash, key, value);</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            else &#123;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                for (int binCount = 0; ; ++binCount) &#123;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    if ((e = p.next) == null) &#123;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        p.next = newNode (hash, key, value, null);</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        if (binCount >= TREEIFY_THRESHOLD - 1) //-1 for 1st</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                            treeifyBin (tab, hash);</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        break;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    if (e.hash == hash &amp;&amp;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        ((k = e.key) == key || (key != null &amp;&amp; key.equals (k))))</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        break;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    p = e;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            if (e != null) &#123; //existing mapping for key</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                V oldValue = e.value;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                if (!onlyIfAbsent || oldValue == null)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    e.value = value;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                afterNodeAccess (e);</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                return oldValue;</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 每加入一个结点，size++</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//void afterNodeInsertion(boolean evict) &#123; &#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">// 执行 resize ()</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span><span class=\"token comment\">//threshold 是阈值</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// zero initial threshold signifies using defaults</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                newCap <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0.75 * 16 = 12 当用完 12 个空间时需要进行 table 扩容</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 阈值为 12</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新的 Node 数组，大小为 16</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值 table 新空间</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 结束 resize ()</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 4 执行的源码 相同元素不重复添加的演示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> <span class=\"token constant\">PRESENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 目前没有什么意义，占位</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 put 方法，e = feng</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//key = feng,value = PRESENT</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// hash(key):</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 key 的无符号向右移 16 位的哈希值，防止冲突</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/* 不执行：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        if ((tab = table) == null || (n = tab.length) == 0)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            n = (tab = resize ()).length;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        if ((p = tab [i = (n - 1) &amp; hash]) == null)//feng 的位置不为空</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tab [i] = newNode (hash, key, value, null); */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 此时 p 指向当前索引位置对应链表的第一个位置</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 当前索引位置的 hash 值和欲添加元素 hash 值比较</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 针对对象有多个元素的比较，如 new Cat (name,age)，地址不一样，但是内容一样也判定为相同元素</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//equals () 由程序员决定功能实现，重写 equals 和 hashCode</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">//(k = p.key) == key 当前索引位置的 key 和欲添加元素 key 的地址比较</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">//(key != null &amp;&amp; key.equals (k)) 当前索引位置的 key 和欲添加元素 key 的内容比较</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">/* 本次不执行：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            // 判断是否为一棵红黑树</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            else if (p instanceof TreeNode)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                e = ((TreeNode&lt;K,V>) p).putTreeVal (this, tab, hash, key, value);</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            // 如果该位置为一条链表，使用 for 循环依次比较</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            else &#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                for (int binCount = 0; ; ++binCount) &#123;</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    // 如果所有元素都不同，则直接将此元素加到链表末尾</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    if ((e = p.next) == null) &#123;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        p.next = newNode (hash, key, value, null);</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        // 添加都末尾后立即判断是否有 9 个结点，即 binCount=7，遍历到原有的第 8 个结点，此时加入新节点即 9 个结点</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        if (binCount >= TREEIFY_THRESHOLD - 1) //-1 for 1st   binCount >= 7</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                            //9 个结点，对当前链表进行树化</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                            treeifyBin (tab, hash);</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        break;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    // 存在相同元素，放弃添加</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals (k))))</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        break;</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    //e = p.next, 所以 p = p.next</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    p = e;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            &#125; */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// existing mapping for key</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token comment\">//boolean onlyIfAbsent:if true, don't change existing value</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">/* 本次不执行：</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        ++modCount;</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        if (++size> threshold)</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            resize ();</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        afterNodeInsertion (evict);</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        return null;*/</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 树化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 如果 table 数组大小 &lt; 64</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MIN_TREEIFY_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//MIN_TREEIFY_CAPACITY = 64</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用扩容解决</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hd <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> tl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> <span class=\"token function\">replacementTreeNode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tl <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    hd <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    p<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> tl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    tl<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                tl <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hd<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                hd<span class=\"token punctuation\">.</span><span class=\"token function\">treeify</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"linkedhashset\"><a class=\"anchor\" href=\"#linkedhashset\">#</a> LinkedHashSet</h4>\n<ul>\n<li>\n<p>LinkedHashSet 是 HashSet 的子类</p>\n</li>\n<li>\n<p>LinkedHashSet 底层是 LinkedHashMap，底层维护了一个数组 + 双向链表</p>\n</li>\n<li>\n<p>LinkedHashSet 根据元素的 hashCode 值决定元素的存储位置，同时使用链表维护元素的次序</p>\n</li>\n<li>\n<p>LinkedHashSet 不允许添加重复元素</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240509233135464.png\" alt=\"image-20240509233135464\" /></p>\n<ul>\n<li>在 LinkedHashSet 中维护了一个 hash 表和双向链表 (LinkedHashSet 有 head 和 tail，指向头，尾结点)</li>\n<li>每一个节点有 pre 和 next 属性，这样可以形成双向链表</li>\n<li>在添加一个元素时，先求 hash 值，在求索引，确定该元素在 hashtable 的位置，然局将添加的元素加入到双向链表 (如果已经存在，不添加 [原则和 hashset 一样])<br />\n tail.next = newElement // 简单指定<br />\n newElement.pre = tail<br />\ntail = newElement;</li>\n<li>这样的话，我们遍历 LinkedHashSet 也能确保插入顺序和遍历顺序一致</li>\n</ul>\n<h4 id=\"linkedhashset底层源码\"><a class=\"anchor\" href=\"#linkedhashset底层源码\">#</a> LinkedHashSet 底层源码</h4>\n<ul>\n<li>\n<p>LinkedHashSet 加入顺序和取出顺序一致</p>\n</li>\n<li>\n<p>LinkedHashSet 底层是 LinkedHashMap（HashMap 的子类）</p>\n</li>\n<li>\n<p>第一次添加时，直接将 table 数组扩容到 16，table 类型是 HashMap$Node, 存放的结点类型是 LinkedHashMap$Entry（多态数组）（ <code>Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt;</code> ），HashMap.Node 是静态内部类</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">linkNodeAtEnd</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span><span class=\"token comment\">// 实现双向链表的连接</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"treeset\"><a class=\"anchor\" href=\"#treeset\">#</a> TreeSet</h4>\n<h5 id=\"基本介绍-3\"><a class=\"anchor\" href=\"#基本介绍-3\">#</a> 基本介绍</h5>\n<ul>\n<li>底层是 TreeMap</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TreeSet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.7</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeSet01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">TreeSet</span> treeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> compare <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1 <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 通过比较字符串大小决定排序</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// return ((String)o1).compareTo ((String)o2);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 通过比较字符串长度决定排序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// return ((String) o1).length () - ((String) o2).length ();</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 先比较长度，长度一样再比较大小</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>compareTo <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 通过比较字符串中第一个字母决定排序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// return ((String)o1).charAt (0) - ((String)o2).charAt (0);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        treeSet<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        treeSet<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        treeSet<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 由于长度一样，所以不会被添加</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>treeSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"底层源码\"><a class=\"anchor\" href=\"#底层源码\">#</a> 底层源码</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>comparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将传入的比较器对象赋值给底层 TreeMap 的属性 comparator</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comparator <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>add 方法：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加第二个元素时：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> replaceOld<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/* 这里是第一次添加时的操作</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        if (t == null) &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            addEntryToEmptyMap (key, value);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            return null;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> cmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// split comparator and comparable paths</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> cpr <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span><span class=\"token comment\">// 传入的匿名比较器对象赋值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cpr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                parent <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                cmp <span class=\"token operator\">=</span> cpr<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 动态绑定机制，到传入匿名内部类的 compare 方法中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 相等就不加入</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>replaceOld <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        t<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">/* 本次不执行</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        else &#123;</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            Objects.requireNonNull (key);</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            @SuppressWarnings (\"unchecked\")</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            Comparable&lt;? super K> k = (Comparable&lt;? super K>) key;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            do &#123;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                parent = t;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                cmp = k.compareTo (t.key);</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                if (cmp &lt; 0)</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    t = t.left;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                else if (cmp > 0)</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    t = t.right;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                else &#123;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    V oldValue = t.value;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    if (replaceOld || oldValue == null) &#123;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        t.value = value;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    return oldValue;</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            &#125; while (t != null);</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        &#125;*/</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"map接口\"><a class=\"anchor\" href=\"#map接口\">#</a> Map 接口</h3>\n<h4 id=\"接口实现类特点\"><a class=\"anchor\" href=\"#接口实现类特点\">#</a> 接口实现类特点</h4>\n<ul>\n<li>\n<p>Map 与 Collection 并列存在，用于保存具有映射关系的数据：Key-Value</p>\n</li>\n<li>\n<p>Map 中的 key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中</p>\n</li>\n<li>\n<p>Map 中 key 不允许重复，原因和 HashSet 一样，如果相同则会覆盖原数据</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// existing mapping for key</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token comment\">//boolean onlyIfAbsent:if true, don't change existing value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里进行覆盖</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>Map 中的 value 可以重复</p>\n</li>\n<li>\n<p>Map 中的 key 和 value 都可以为 null，key 为 null 只能有一个，value 为 null 可以有多个</p>\n</li>\n<li>\n<p>常用 String 类作为 Map 中的 key，当然也可以为其他任意类型</p>\n</li>\n<li>\n<p>key 一对一 value，指定的 key 可以找到唯一的 value</p>\n</li>\n<li>\n<p>value 一对多 key</p>\n</li>\n</ul>\n<pre><code class=\"language-JAVA\">public class Map01 &#123;\n    public static void main (String[] args) &#123;\n        Map map = new HashMap ();\n        // key一对一value,Map中key不允许重复，原因和HashSet一样，如果相同则会覆盖原数据\n        map.put(&quot;key1&quot;, &quot;value1&quot;);\n        map.put(&quot;key1&quot;, &quot;value2&quot;);//value2覆盖value1\n        // value一对多key,Map中的value可以重复\n        map.put(&quot;key2&quot;, &quot;value2&quot;);\n        map.put(&quot;key3&quot;, &quot;value2&quot;);\n        // 常用String类作为Map中的key，当然也可以为其他任意类型\n        map.put(new CAT_(), new DOG ());\n        System.out.println (map);\n    &#125;\n&#125;\nclass CAT_&#123;&#125;\nclass DOG&#123;&#125;\n</code></pre>\n<h4 id=\"底层源码-2\"><a class=\"anchor\" href=\"#底层源码-2\">#</a> 底层源码</h4>\n<ol>\n<li>存放的 k-v 最终类型是 HashMap$Node</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>为了方便遍历，Java 进行如下设置：</p>\n<ol>\n<li>\n<p>创建 EntrySet 集合，存放 Entry 类，一个 Entry 对象就有 Node 类型的 k-v 对 （Entry 类是 Map.Entry 接口的一个实现）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">transient</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entrySet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取键的集合</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Set</span> set1 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 遍历键的集合</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> set1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获取值的集合</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Collection</span> values <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>values <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 遍历值的集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* 结果：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>class java.util.HashMap$KeySet</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>key1</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>key2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>class java.util.HashMap$Values</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>value1</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>value2</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"image-20240506204047735.png\" alt=\"image-20240506204047735\" /></p>\n<blockquote>\n<p>注：EntrySet 存放的是地址</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li>\n<p>entrySet 中，定义类型是 Map.Entry，实际上存放的还是 HashMap$Node (因为 <code>static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</code>  所以编译类型是 Entry, 运行类型是 HashMap$Node)</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> es<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>es <span class=\"token operator\">=</span> entrySet<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>entrySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> es<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Set</span> set <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>entrySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//set 的运行类是 HashMap$EntrySet</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 当调用 HashMap 的 entrySet () 方法时，它会返回一个 Set 集合，其中包含了 HashMap 中的所有键值对。这个 Set 集合的运行类是 HashMap$EntrySet，它是 HashMap 的一个内部类，用于存储 Map.Entry 类型的元素 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// 向下转型，因为 Map.Entry 接口提供 getKey 和 getValue 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token comment\">//o 实际上是一个 HashMap$Node 类型的对象，而不是一个 HashMap 类型的对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 而 HashMap$Node 类实现了这两个方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 所以我们可以将 o 转换为 Map.Entry 类型，然后调用 getKey 和 getValue 方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>getKey <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span>getValue <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">Set</span> set1 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> set1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Collection</span> values <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>values <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"image-20240506202638991.png\" alt=\"image-20240506202638991\" /></p>\n<ul>\n<li>EntrySet 集合存放 Node 对象的地址，不创建新的对象</li>\n</ul>\n<h4 id=\"map常用方法\"><a class=\"anchor\" href=\"#map常用方法\">#</a> Map 常用方法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Map03_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取 Map 中的所有键</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"所有键: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取 Map 中的所有值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"所有值: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>values <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 获取指定键的值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"键key2对应的值: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 检查 Map 是否包含指定键</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Map是否包含键key2: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>containsKey <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 检查 Map 是否包含指定值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Map是否包含值value2: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>containsValue <span class=\"token punctuation\">(</span><span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取 Map 的大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Map的大小: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 检查 Map 是否为空</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Map是否为空: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 删除指定键的映射</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        map<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 遍历 Map 中的键值对</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Set</span> set <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>entrySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 清空 Map</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        map<span class=\"token punctuation\">.</span>clear <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 检查 Map 是否为空</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Map是否为空: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"map的六种遍历方式\"><a class=\"anchor\" href=\"#map的六种遍历方式\">#</a> Map 的六种遍历方式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.6</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Map04_Traverse</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------Traverse Map01--------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//     使用 keySet 遍历</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//     增强 for 循环</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Set</span> keyset <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key <span class=\"token operator\">:</span> keyset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\" value: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//     iterator</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> iterator1 <span class=\"token operator\">=</span> keyset<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator1<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">Object</span> key <span class=\"token operator\">=</span> iterator1<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\" value: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------Traverse Map02--------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//     使用 values 遍历</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Collection</span> values <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>values <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//     增强 for 循环</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"value: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//     iterator</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> iterator2 <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator2<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> iterator2<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"value: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------Traverse Map03--------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//     使用 entrySet 遍历</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Set</span> entryset <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>entrySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//     增强 for 循环</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> entryset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span>getKey <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" value: \"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span>getValue <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//     iterator</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> iterator3 <span class=\"token operator\">=</span> entryset<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator3<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> iterator3<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"key: \"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span>getKey <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" value: \"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span>getValue <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>遍历练习</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240507174200344.png\" alt=\"image-20240507174200344\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @data 2024.5.7</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Map05_Test01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token number\">01</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee01</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span><span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token number\">02</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee01</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">,</span><span class=\"token number\">02</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        map<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token number\">03</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee01</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30000</span><span class=\"token punctuation\">,</span><span class=\"token number\">03</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//     第一种遍历方式，通过 keySet () 方法遍历</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Set</span> keyset <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>keySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> keyset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">Employee01</span> em <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee01</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">.</span>getSalary <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//      第二种遍历方式，通过 entrySet () 方法遍历</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Set</span> entry <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span>entrySet <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 EntrySet 对象 (数据类型是 Map.Entry)，运行类型是 EntrySet</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"entry运行类型：\"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>iterator <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 EntryIterator 对象，Node 实现了 iterator 方法</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span>hasNext <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> entry1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回对象 Entry，实际上运行类型是 Node 了</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"entry1运行类型：\"</span><span class=\"token operator\">+</span> entry1<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">Employee01</span> em2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee01</span><span class=\"token punctuation\">)</span> entry1<span class=\"token punctuation\">.</span>getValue <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//getValue () 返回 Employee01 对象</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"em2运行类型：\"</span><span class=\"token operator\">+</span>em2<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>em2<span class=\"token punctuation\">.</span>getSalary <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>entry1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee01</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> getSalary <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> toString <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Employee&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\", salary=\"</span> <span class=\"token operator\">+</span> salary <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token string\">\", id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee01</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> salary <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"hashtable\"><a class=\"anchor\" href=\"#hashtable\">#</a> Hashtable</h4>\n<h5 id=\"基本介绍-4\"><a class=\"anchor\" href=\"#基本介绍-4\">#</a> 基本介绍</h5>\n<ul>\n<li>\n<p>存放元素是键值对 K-V</p>\n</li>\n<li>\n<p>K != null,V != null</p>\n</li>\n<li>\n<p>使用方法和 HashMap 基本一样</p>\n</li>\n<li>\n<p>线程安全</p>\n</li>\n<li>\n<p>Key 相同时进行覆盖 Value</p>\n</li>\n<li>\n<p>K-V 放在 Hashtable$Entry 里，Hashtable 实现了 Map.Entry</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tab<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>Hashtable 的初始 threshold = 8，扩容机制是添加第 threshold + 1 时进行 <code>int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Map_Hashtable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Hashtable</span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//K-V 不能为 null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// hashtable.put (null, \"value4\");</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// hashtable.put (\"key5\", null);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span>replace <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        hashtable<span class=\"token punctuation\">.</span>remove <span class=\"token punctuation\">(</span><span class=\"token string\">\"key3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"treemap\"><a class=\"anchor\" href=\"#treemap\">#</a> TreeMap</h4>\n<h5 id=\"基本介绍-5\"><a class=\"anchor\" href=\"#基本介绍-5\">#</a> 基本介绍</h5>\n<ul>\n<li>\n<p>和 TreeSet 的区别在于键值对</p>\n</li>\n<li>\n<p>K-V 对存放的结点类型是 Entry</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//TreeSet</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//TreeMap</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过 key 进行排序</p>\n</li>\n<li>\n<p>TreeSet 的底层是 TreeMap，在 TreeSet 小结的底层源码已经介绍</p>\n</li>\n</ul>\n<h5 id=\"测试代码\"><a class=\"anchor\" href=\"#测试代码\">#</a> 测试代码</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">TreeMap</span> treeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> compare <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o1 <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token comment\">// 按照字符串的字母顺序进行排序</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>compareTo <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        treeMap<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"xin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        treeMap<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        treeMap<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"my\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>treeMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"properties\"><a class=\"anchor\" href=\"#properties\">#</a> Properties</h4>\n<ul>\n<li>继承 Hashtable 类并实现了 Map 接口，也是键值对 K-V 存储数据</li>\n<li>使用特点和 Hashtable 类似</li>\n<li>用于 xxx.properties 文件中，加载到 Properties 对象，进行读取和修改 (详细内容在 IO 流)</li>\n</ul>\n<h4 id=\"集合实现类在开发中的选择\"><a class=\"anchor\" href=\"#集合实现类在开发中的选择\">#</a> 集合实现类在开发中的选择</h4>\n<ol>\n<li>判断存储类型（一组对象或一组键值对）</li>\n<li>一组对象（Collection 单列）\n<ul>\n<li>允许重复：List\n<ul>\n<li>增删多：LinkedList（底层是双向链表）</li>\n<li>改查多：ArrayList（底层维护 Object 类型的可变数组）</li>\n</ul>\n</li>\n<li>不允许重复：Set\n<ul>\n<li>无序：HashSet（底层是 HashMap，维护了一个哈希表，即数组 + 链表 + 红黑树）</li>\n<li>排序：TreeSet</li>\n<li>插入和取出顺序一致：LinkedHashSet（底层是数组 + 双向链表）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一组键值对（Map 双列）\n<ul>\n<li>key 无序：HashMap（底层是哈希表，数组 + 链表 + 红黑树）</li>\n<li>key 排序：TreeMap</li>\n<li>key 插入和取出顺序一致：LinkedHashMap</li>\n<li>读取文件：Properties</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h2>\n<h3 id=\"泛型介绍\"><a class=\"anchor\" href=\"#泛型介绍\">#</a> 泛型介绍</h3>\n<ul>\n<li>泛（广泛）型（类型），又称参数化类型，解决数据类型安全性问题</li>\n<li>在类声明或实例化时只要指定好需要的具体类型即可</li>\n<li>Java 泛型保证在编译时没有发出警告，运行时就不会产生 ClassCastException 异常，代码更简洁、健壮</li>\n<li><strong>作用：在类声明时通过一个标识表示类中某个 <code>属性的类型</code>  / <code>方法的返回值类型</code>  / <code>参数类型</code> </strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.4.29</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Generic01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        创建泛型对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//        在定义 Person 对象时指定类型，即在编译期间就决定 E 的类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Person</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Person</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 创建泛型类</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//    属性泛型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">E</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//E 表示 s 的数据类型，在定义 Person 对象时指定类型，即在编译期间就决定 E 的类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//    方法返回值类型泛型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">getS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//    参数类型</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"泛型语法\"><a class=\"anchor\" href=\"#泛型语法\">#</a> 泛型语法</h3>\n<ul>\n<li>泛型的声明： <code>interface 接口&lt;T&gt;&#123;&#125;</code>  和  <code>class&lt;K,V…&gt;&#123;&#125;</code></li>\n<li>泛型实例化： <code>List&lt;String&gt; list = new ArrayList&lt;String&gt;()</code> ;</li>\n<li>指定的泛型只能是基本类型 (如 Integer），而不能是基本数据类型（如 int)</li>\n<li>指定泛型具体类型后，可 <code>传入</code> <strong>该类型</strong>或<strong>该类型的子类型的参数 <code>对象</code> </strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Generic02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 指定泛型具体类型后，可传入该类型或该类型的子类型的参数对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Cat</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">></span></span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Cat</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">></span></span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>可简写（推荐）： <code>List&lt;String&gt; list = new ArrayList&lt;&gt;();</code></li>\n<li>如果 <code>List list = new ArrayList();</code>  泛型默认是 Object</li>\n</ul>\n<h3 id=\"自定义泛型\"><a class=\"anchor\" href=\"#自定义泛型\">#</a> 自定义泛型</h3>\n<h4 id=\"自定义泛型类\"><a class=\"anchor\" href=\"#自定义泛型类\">#</a> 自定义泛型类</h4>\n<ul>\n<li>class 类名 &lt;T,E…&gt;{}</li>\n<li>普通成员可以使用泛型（属性、方法）</li>\n<li>使用泛型的数组不能被初始化，但可以定义 <code>E[] arr；</code>\n<ul>\n<li><code>E[] arr = new E[8];</code>   数组在 new 使不能确定 T 的类型，无法开辟内存空间</li>\n</ul>\n</li>\n<li>静态成员中不能使用类的泛型\n<ul>\n<li><code>static T a;</code></li>\n<li>静态和类相关，类加载时还未创建对象，没有指定类型</li>\n</ul>\n</li>\n<li>泛型类的类型，在创建对象的时候决定</li>\n<li>创建对象时没有指定类型，则默认泛型是 Object 类型\n<ul>\n<li><code>class A&lt;E,T,R&gt;&#123;&#125;</code> ,E,T,R 都是 Object</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"自定义泛型接口\"><a class=\"anchor\" href=\"#自定义泛型接口\">#</a> 自定义泛型接口</h4>\n<ul>\n<li>interface 接口名 &lt;T,E…&gt;{}</li>\n<li>接口中，静态成员中不能使用泛型</li>\n<li>泛型接口的类型，在 <code>继承接口</code> 或 <code>实现接口</code> 时确定\n<ul>\n<li>实现方法时，会指定类替换泛型类</li>\n</ul>\n</li>\n<li>没有指定类型，默认 Object</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericInterface1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> print <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 继承接口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericInterface2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericInterface1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> print2 <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 实现接口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericClass1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GenericInterface1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> print <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"自定义泛型方法\"><a class=\"anchor\" href=\"#自定义泛型方法\">#</a> 自定义泛型方法</h4>\n<ul>\n<li>修饰符 &lt;E,T…&gt; 返回类型 方法名 (参数列表){}</li>\n<li>参数列表需要使用泛型类</li>\n<li>泛型方法可以定义在普通类或泛型类中</li>\n<li>泛型方法被调用时，类型会确定</li>\n<li>没有 <code>&lt;E,T…&gt;</code>  不是泛型方法，只是使用了泛型</li>\n<li>泛型方法可以使用类声明的泛型，也可以使用方法声明的泛型</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GEneric05_DefineMethods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">GenericMethods01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> method_01 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericMethods01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        method_01<span class=\"token punctuation\">.</span>method1 <span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">123.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        method_01<span class=\"token punctuation\">.</span>method2 <span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericMethods01</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">T</span> filed1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">E</span> filed2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义一个泛型方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span> r<span class=\"token punctuation\">,</span><span class=\"token class-name\">S</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a generic method with two parameters of different types:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"R: \"</span> <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> <span class=\"token string\">\" S: \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 泛型方法可以使用类声明的泛型，也可以使用方法声明的泛型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">O</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">,</span><span class=\"token class-name\">O</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//O 是方法声明的泛型，T 是类声明的泛型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a generic method with two parameters of different types:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"T: \"</span> <span class=\"token operator\">+</span> t <span class=\"token operator\">+</span> <span class=\"token string\">\" O: \"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"泛型的继承和通配符\"><a class=\"anchor\" href=\"#泛型的继承和通配符\">#</a> 泛型的继承和通配符</h3>\n<ol>\n<li>泛型不具备继承性\n<ul>\n<li>List&lt;Object&gt; list != new ArrayList&lt;String&gt;()</li>\n</ul>\n</li>\n<li>&lt;?&gt; : 支持任意类型的泛型</li>\n<li>＜? extends A&gt; : 支持 A 类及 A 类的子类，规定了泛型的上限</li>\n<li>＜? super A&gt; : 支持 A 类及 A 类的父类，不限于直接父类，规定了泛型的下限</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Generic06</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list01 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list02 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>AA<span class=\"token punctuation\">></span></span> list03 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>BB<span class=\"token punctuation\">></span></span> list04 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>CC<span class=\"token punctuation\">></span></span> list05 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;?> :支持任意类型的泛型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        method001 <span class=\"token punctuation\">(</span>list01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        method001 <span class=\"token punctuation\">(</span>list02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        method001 <span class=\"token punctuation\">(</span>list03<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        method001 <span class=\"token punctuation\">(</span>list04<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        method001 <span class=\"token punctuation\">(</span>list05<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"＜? extends A> :支持A类及A类的子类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// method002 (list01);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// method002 (list02);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        method002 <span class=\"token punctuation\">(</span>list03<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        method002 <span class=\"token punctuation\">(</span>list04<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        method002 <span class=\"token punctuation\">(</span>list05<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"＜? super A> :支持A类及A类的父类，不限于直接父类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        method03 <span class=\"token punctuation\">(</span>list01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//method03 (list02);// 和 AA 没有继承关系</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        method03 <span class=\"token punctuation\">(</span>list03<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//method03 (list04);//AA 子类</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//method03 (list05);//AA 子类</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method001</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// ＜?> : 支持所有类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method002</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> AA<span class=\"token punctuation\">></span></span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// ＜? extends A> : 支持 A 类及 A 类的子类</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method03</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> AA<span class=\"token punctuation\">></span></span> list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// ＜? super A> : 支持 A 类及 A 类的父类，不限于直接父类</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o <span class=\"token operator\">:</span> list3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AA</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"AA extends Object\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BB</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AA</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"BB extends AA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CC</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AA</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"CC extends AA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h2>\n<h3 id=\"基本介绍-6\"><a class=\"anchor\" href=\"#基本介绍-6\">#</a> 基本介绍</h3>\n<ul>\n<li>\n<p>程序</p>\n<ul>\n<li>为完成某种任务用编程语言写的一组指令集合，即代码</li>\n</ul>\n</li>\n<li>\n<p>进程</p>\n<ul>\n<li>指运行中的程序，操作系统会为其分配内存空间</li>\n<li>进程是程序的一次执行过程，或正在运行的一个程序，是动态过程，有自身的产生、存在和消亡过程</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240509165704122.png\" alt=\"image-20240509165704122\" /></p>\n</li>\n<li>\n<p>线程</p>\n<ul>\n<li>线程由进程创建，是进程的一个实体</li>\n<li>线程可以继续多开线程</li>\n<li>一个进程可以拥有多个线程（如 Chrome 多线程下载文件）</li>\n<li>单线程：同一个时刻只允许执行一个线程</li>\n<li>多线程：同一个时刻可以执行多个线程</li>\n</ul>\n</li>\n<li>\n<p>并发：同一个时刻，多个任务交替执行，有一种 “同时的错觉”，如一个 CPU 执行 QQ 聊天，暂停 Chrome 下载，然后由执行 Chrome 下载，暂停 QQ 聊天，如此反复交替执行</p>\n</li>\n<li>\n<p>并行：顾名思义，一起执行。同一个时刻多个任务同时执行，如 16 和 CPU 分别执行不同的任务。但是对于其中的一个 CPU，又有可能存在并发</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240509170500172.png\" alt=\"image-20240509170500172\" /></p>\n<h3 id=\"创建线程\"><a class=\"anchor\" href=\"#创建线程\">#</a> 创建线程</h3>\n<h4 id=\"继承thread类重写run方法\"><a class=\"anchor\" href=\"#继承thread类重写run方法\">#</a> 继承 Thread 类，重写 run 方法</h4>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @data 2024.5.9</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 创建一个 Java 线程，每隔一秒打印一次 “小猫线程执行...”</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread_demo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">CatThread</span> catThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CatThread</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        catThread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 Thread.start () 方法启动线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CatThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 创建一个线程类 (该类继承 Thread 类才是一个线程)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"小猫线程执行...\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 保证线程在 sleep 时不会被中断（即在 sleep 时还能感知响应，能响应中断，不会睡死）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程休眠 1 秒</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//main 线程启动一个子线程 Thread-0，不会阻塞在 start (), 而是继续执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>catThread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 Thread.start () 方法启动线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>main线程执行完毕后自动结束，<span class=\"token class-name\">Thread</span><span class=\"token operator\">-</span><span class=\"token number\">0</span>继续执行，直到它自己结束，不会因为main线程结束而受影响</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 调用 Thread.start ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">// zero status corresponds to state \"NEW\".</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">.</span>threadStatus <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">start0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 本地方法，JVM 调用，在 start0 () 里调用 run 方法实现多线程</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n<p>​\t<img loading=\"lazy\" data-src=\"image-20240509184159904.png\" alt=\"image-20240509184159904\" /> 进程开始，进入 main 线程，mian 线程启动 Thread-0 线程<br />\n​           <img loading=\"lazy\" data-src=\"image-20240509184514093.png\" alt=\"image-20240509184514093\" /><br />\n​           <img loading=\"lazy\" data-src=\"image-20240509184517056.png\" alt=\"image-20240509184517056\" /></p>\n<p>​\t<strong> <code>进程结束</code> </strong></p>\n<ul>\n<li>\n<p>为什么不用 Cat.run ()?</p>\n<ul>\n<li>\n<blockquote>\n<p>如果这样调用，run 只是一个普通方法，并不会真正使 main 启动新的子线程，run 还是在 main 线程里，会等 run 执行结束再向下执行</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现runnable接口重写run方法\"><a class=\"anchor\" href=\"#实现runnable接口重写run方法\">#</a> 实现 Runnable 接口，重写 run 方法</h4>\n<ol>\n<li>Java 是单继承的，如果某个类继承了其他类，这时使用继承 Thread 类创建线程不可能实现</li>\n<li>提供实现 Runnable 接口的方法进行创建线程</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @data 2024.5.9</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread_demo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 需要创建 Thread 对象并传入 dog</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        thread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>简单模拟解释：</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.9</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 模拟 Thread</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread_demo03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Tiger</span> tiger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tiger</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">MyThread</span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span> <span class=\"token punctuation\">(</span>tiger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        myThread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyThread</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            target<span class=\"token punctuation\">.</span>run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">start0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> start0 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tiger</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiger is running!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol>\n<li>\n<p>Tiger 实现了 Runnable 接口</p>\n</li>\n<li>\n<p>将 Tiger 对象传入 Thread 类进行 Runnable 对象的动态绑定</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 动态绑定传入的对象，调用传入对象的 run 方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        target<span class=\"token punctuation\">.</span>run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"thread-vs-runnable\"><a class=\"anchor\" href=\"#thread-vs-runnable\">#</a> Thread VS Runnable</h4>\n<ol>\n<li>实现 Runnable 接口方式更适合多个线程共享一个资源的情况，并且避免了单线程的限制，推荐使用 Runnable</li>\n<li>两者没有本质区别，Thread 也实现了 Runnable 接口</li>\n</ol>\n<h3 id=\"线程终止\"><a class=\"anchor\" href=\"#线程终止\">#</a> 线程终止</h3>\n<ol>\n<li>当线程完成任务后会自动退出</li>\n<li>还可以通过 <code>变量</code> 控制 run 方法退出，从而停止线程，即 <code>通知方式</code></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.11</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ThreadExitTest</span> threadExitTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExitTest</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>threadExitTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        thread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 主线程休眠 10 秒，10 秒后设置 flag 为 false, 线程退出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"main sleep 10s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        threadExitTest<span class=\"token punctuation\">.</span>setFlag <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"main exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExitTest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 定义一个标志位，用于控制线程的退出</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFlag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程常用方法\"><a class=\"anchor\" href=\"#线程常用方法\">#</a> 线程常用方法</h3>\n<ol>\n<li>\n<p>setName (field)：设置线程名</p>\n</li>\n<li>\n<p>getName ()：获取线程名</p>\n</li>\n<li>\n<p>start ()：线程执行</p>\n<ul>\n<li>start 底层会创建新线程，调用 run，run 不会启动新线程</li>\n</ul>\n</li>\n<li>\n<p>run ()：调用线程 run () 方法</p>\n</li>\n<li>\n<p>setPriority (field)：更改线程优先级</p>\n</li>\n<li>\n<p>getPriority ()：获取线程优先级</p>\n<ul>\n<li>\n<p>范围</p>\n</li>\n<li>\n<p>MAX_PRIORITY:10</p>\n</li>\n<li>\n<p>MIN_PRIORITY:1</p>\n</li>\n<li>\n<p>NORMAL_PRIORITY:5</p>\n</li>\n</ul>\n</li>\n<li>\n<p>sleep ()：静态方法，使线程休眠</p>\n</li>\n<li>\n<p>interrrupt ()：中断线程</p>\n<ul>\n<li>没有终止线程，一般用于中断正在休眠的线程</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.11</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 让线程休眠，并使用 interrupt () 方法中断线程。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadMethods01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ThreadMethod01</span> threadMethod01 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadMethod01</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>threadMethod01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        thread<span class=\"token punctuation\">.</span>setName <span class=\"token punctuation\">(</span><span class=\"token string\">\"feng\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//set thread name</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        thread<span class=\"token punctuation\">.</span>setPriority <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_PRIORITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//set thread priority</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        thread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">//main 线程休眠 10s</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"main sleep...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//main 线程中断 thread 线程休眠</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            thread<span class=\"token punctuation\">.</span>interrupt <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//interrupt the thread</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadMethod01</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is running.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//thread sleep 5s, 但是 1s 后 main 线程中断了 thread 线程的休眠</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is interrupted.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"yield-和-join\"><a class=\"anchor\" href=\"#yield-和-join\">#</a> yield 和 join</h3>\n<ul>\n<li>yield：线程的礼让，让 CPU 先执行其他线程，礼让的时间不定，不一定礼让成功（如果 CPU 内存足够，则礼让失败）</li>\n<li>join：线程的插队，插队的线程一旦插队成功，先执行完插队线程的所有任务（一定成功）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.11</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadMethods02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ThreadMethod02</span> threadMethod02 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadMethod02</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>threadMethod02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 如果 i = 5，则调用 thread.start () 方法启动新线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 如果 i = 5，则调用 thread.join () 方法等待新线程执行完毕</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                thread<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                thread<span class=\"token punctuation\">.</span>join <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadMethod02</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"用户线程和工作线程\"><a class=\"anchor\" href=\"#用户线程和工作线程\">#</a> 用户线程和工作线程</h3>\n<ul>\n<li>用户线程：也叫工作线程，当线程的任务执行完或以通知方式结束</li>\n<li>守护线程：一般为工作线程服务，当所有的用户线程结束，守护线程自动结束</li>\n<li>一般用于 GC 垃圾回收</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.11</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDaemon</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ThreadDaemonTest</span> threadDaemonTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadDaemonTest</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        threadDaemonTest<span class=\"token punctuation\">.</span>setDaemon <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置为守护线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        threadDaemonTest<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 主线程执行，执行结束后守护线程自动结束</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"main is running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDaemonTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a daemon thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程的生命周期\"><a class=\"anchor\" href=\"#线程的生命周期\">#</a> 线程的生命周期</h3>\n<p><img loading=\"lazy\" data-src=\"image-20240511234152168.png\" alt=\"image-20240511234152168\" /></p>\n<h3 id=\"线程同步synchronized\"><a class=\"anchor\" href=\"#线程同步synchronized\">#</a> 线程同步 (synchronized)</h3>\n<ul>\n<li>线程同步机制\n<ol>\n<li>在多线程编程，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻， <code>最多有一个线程访问</code> ，以保证数据的完整性</li>\n<li>线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作， <code>直到该线程完成操作，其他线程才能对该内存地址进行操作</code></li>\n</ol>\n</li>\n<li>具体同步方法\n<ol>\n<li>同步代码块 <code>synchronized()&#123;…&#125;</code> (推荐)</li>\n<li>synchronized 放在方法声明中，整个方法为同步方法</li>\n<li>理解：上厕所时，一个人先上锁，完事再解锁，下一个人才能上厕所</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.11</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSyn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ThreadSynchronized</span> threadSynchronized <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadSynchronized</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>threadSynchronized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>threadSynchronized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span>threadSynchronized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        thread1<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        thread2<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        thread3<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSynchronized</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> nums <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> synFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>synFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 同步代码块</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"票已售完\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    synFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>sleep <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售票中... \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"剩余票数：\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">--</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"互斥锁\"><a class=\"anchor\" href=\"#互斥锁\">#</a> 互斥锁</h3>\n<ul>\n<li>\n<p>Java 中引入了对象互斥锁，保证数据操作的完整性</p>\n</li>\n<li>\n<p>每个对象都对应一个互斥锁的标记，该标记保证在同一时刻只能由一个线程访问此对象</p>\n</li>\n<li>\n<p>关键字 synchronized 与互斥锁联系，可以理解为使用了 synchronized 后， <code>给对象上了锁</code> ，多线程访问时 <code>谁先抢到</code> 谁就能操作对象。</p>\n</li>\n<li>\n<p>同步局限性：程序执行效率降低（没有抢到锁的线程会被阻塞，状态为 Blocked）</p>\n</li>\n<li>\n<p>同步方法（非静态）的锁可以是 this；也可以是其他对象，但是 <code>对象要求是同一个</code>  (推荐使用实现 Runnable 的方法开启线程，如果继承 Thread 需要 new 对象，地址不同对象就不同，增添麻烦)</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>synFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 同步代码块</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               <span class=\"token comment\">// 如果是 new object 就不是同一个对象了！！！</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>同步方法（静态）的锁为当前类本身</p>\n<ul>\n<li …=\"\">静态 (static) 方法中同步代码块：synchronized (类名.class)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"线程死锁\"><a class=\"anchor\" href=\"#线程死锁\">#</a> 线程死锁</h3>\n<ul>\n<li>多个线程都占用了对方的资源，但不肯相让，导致死锁</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @data 2024.5.12</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 测试死锁案例</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadDeadLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLockDemo</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLockDemo</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        thread1<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        thread2<span class=\"token punctuation\">.</span>start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保证数据共享</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DeadLockDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" just lock1...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock1 &amp; lock2...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" just lock2...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock1 &amp; lock2...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>thread1,thread2 分别拿到 o1,o2 对象锁，接着 thread1 想拿到 o2 锁，但被 thread2 拿着；thread2 想拿到 o1 锁，但被 thread1 拿着；两个线程进入 Blocked 状态被阻塞，互不相让，死锁</p>\n</blockquote>\n<h3 id=\"释放锁\"><a class=\"anchor\" href=\"#释放锁\">#</a> 释放锁</h3>\n<h4 id=\"释放锁的时机\"><a class=\"anchor\" href=\"#释放锁的时机\">#</a> 释放锁的时机</h4>\n<ol>\n<li>当前线程的同步方法 / 同步代码块执行结束</li>\n<li>当前线程在同步方法 / 同步代码块遇到 return、break</li>\n<li>当前线程在同步方法 / 同步代码块出现了未处理的 Error/Exception, 导致异常结束</li>\n<li>当前线程在同步方法 / 同步代码块执行了线程的 wait () 方法，当前线程暂停，并释放锁</li>\n</ol>\n<h4 id=\"不会释放锁的情况\"><a class=\"anchor\" href=\"#不会释放锁的情况\">#</a> 不会释放锁的情况</h4>\n<ol>\n<li>当前线程在同步方法 / 同步代码块执行 Thread.sleep (),Thread.yield，暂停线程执行，不会释放锁</li>\n<li>线程执行同步代码块时，其他线程调用了该线程的～～suspend ()~~ 方法将当前线程挂起，当前线程不会释放锁</li>\n</ol>\n<h2 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h2>\n<h3 id=\"基本介绍-7\"><a class=\"anchor\" href=\"#基本介绍-7\">#</a> 基本介绍</h3>\n<ul>\n<li>文件在程序中以流的方式进行操作</li>\n</ul>\n<blockquote>\n<p>java 程序（内存）——(输出流)——&gt; 文件（磁盘）</p>\n<p>java 程序（内存）&lt;——(输入流)—— 文件（磁盘）</p>\n</blockquote>\n<h3 id=\"创建文件的三种方式\"><a class=\"anchor\" href=\"#创建文件的三种方式\">#</a> 创建文件的三种方式</h3>\n<ol>\n<li>new File (String pathName)：根据路径创建 File 对象</li>\n<li>new File (File parent,String child)：根据父目录文件 + 子路径创建</li>\n<li>new File (String parent,String child)：根据父目录 + 子目录创建</li>\n<li>后两种方式是为了方便在一个目录下创建多个子目录</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.12</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateFile</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        test1 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        test2 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        test3 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 第一种创建方式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\example1.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">File</span> fileTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        judge <span class=\"token punctuation\">(</span>fileTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 第二种创建方式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">String</span> fileString <span class=\"token operator\">=</span> <span class=\"token string\">\"example2.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">File</span> fileTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> fileString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        judge <span class=\"token punctuation\">(</span>fileTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 第三种创建方式</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> file1 <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> file2 <span class=\"token operator\">=</span> <span class=\"token string\">\"example3.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">File</span> fileTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">,</span> file2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        judge <span class=\"token punctuation\">(</span>fileTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> fileTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">boolean</span> judge <span class=\"token operator\">=</span> fileTest<span class=\"token punctuation\">.</span>createNewFile <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>judge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件创建成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件已存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"文件的相关方法\"><a class=\"anchor\" href=\"#文件的相关方法\">#</a> 文件的相关方法</h3>\n<ol>\n<li>getName ()：获取文件名</li>\n<li>getAbsolutePath ()：获取绝对路径</li>\n<li>getParent：获取父目录</li>\n<li>length ()：获取文件大小（字节数）</li>\n<li>exists ()：判断文件是否存在</li>\n<li>isFile ()：判断是否是文件</li>\n<li>ifDirectory ()：判断是否是目录</li>\n</ol>\n<h3 id=\"常见的文件操作\"><a class=\"anchor\" href=\"#常见的文件操作\">#</a> 常见的文件操作</h3>\n<ol>\n<li>判断一个目录的文件是否存在，如果存在就删除</li>\n<li>判断一个目录是否存在，如果存在就删除</li>\n<li>判断一个目录是否存在，如果不存在就创建\n<ul>\n<li>创建单个目录：mkdir ()</li>\n<li>创建多个目录：mkdirs ()</li>\n<li>目录可看作是一种特殊的文件类型</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.12</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileOperator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        fileOperator1 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fileOperator2 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        fileOperator3 <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 判断一个目录的文件是否存在，如果存在就删除</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fileOperator1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\file1.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>exists <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>delete <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件删除失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 判断一个目录是否存在，如果不存在就创建</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fileOperator2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\file1\\\\file2\\\\file3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span>exists <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>mkdirs <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"目录创建成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"创建失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"目录已经存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 判断一个目录是否存在，如果存在就删除</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fileOperator3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\file1\\\\file2\\\\file3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>exists <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>delete <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"目录删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"目录不存在/删除失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"文件io流\"><a class=\"anchor\" href=\"#文件io流\">#</a> 文件 IO 流</h3>\n<h4 id=\"io流介绍\"><a class=\"anchor\" href=\"#io流介绍\">#</a> IO 流介绍</h4>\n<ul>\n<li>\n<p>在程序和文件中进行数据传输和处理</p>\n</li>\n<li>\n<p>I/O 是 Input/Output 的缩写，I/O 技术是非常实用的技术，用于处理数据传输。如读 / 写文件，网络通讯等</p>\n</li>\n<li>\n<p>Java 程序中，对于数据的输入 / 输出操作以 流 (stream) 的方式进行</p>\n</li>\n<li>\n<p>java.io 包下提供了各种 流 类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</p>\n</li>\n<li>\n<p>输入 input: 读取外部数据 (磁盘、光盘等存储设备的数据) 到程序 (内存) 中</p>\n</li>\n<li>\n<p>输出 output: 将程序 (内存) 数据输出到磁盘、光盘等存储设备中</p>\n</li>\n<li>\n<p>流的分类</p>\n<ul>\n<li>按操作数据单位不同分为：字节流 (8 bit)，字符流 (按字符)<br />\n 按数据流的流向不同分为：输入流 输出流<br />\n按流的角色的不同分为：节点流 处理流 / 包装流</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">*</th>\n<th style=\"text-align:center\">抽象基类</th>\n<th style=\"text-align:center\">字节流</th>\n<th>字符流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">输入流</td>\n<td style=\"text-align:center\">InputStream</td>\n<td style=\"text-align:center\">Reader</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">输出</td>\n<td style=\"text-align:center\">OutputStream</td>\n<td style=\"text-align:center\">Writer</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Java 的 IO 流共涉及 40 多个类，实际上非常规则，都是从如上 4 个抽象基类派生</p>\n<p>由这 4 个类派生出来的子类，名称都是以其父类名作为子类名后缀</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"io流体系图\"><a class=\"anchor\" href=\"#io流体系图\">#</a> IO 流体系图</h4>\n<ul>\n<li>\n<p>InputStream: 字节输入流</p>\n<ul>\n<li>该抽象类是所有类字节输入流的超类</li>\n<li>常用子类：\n<ul>\n<li>FileInputStream：文件输入流</li>\n<li>BufferedInputStream：缓冲字节输入流</li>\n<li>ObjectInputStream：对象字节输入流</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><img loading=\"lazy\" data-src=\"InputStream.png\" alt=\"InputStream\" /></p>\n<h4 id=\"fileinputstream\"><a class=\"anchor\" href=\"#fileinputstream\">#</a> FileInputStream</h4>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>fileinputstream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.13</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 将文件内容读取到程序中，并在程序控制台中输出，使用 Java 中的 FileInputStream 类。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInputStream01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// readFile ();</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        readFilePro <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\hello.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 一个一个字节读取</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span> content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> fileInputStream<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// 将字节转换为字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>print <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 关闭文件流，释放资源</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                fileInputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 优化：使用 read (byte [] b) 方法，一次读取一个字节数组，效率更高</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFilePro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\hello.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 一个一个字节读取</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">int</span> content<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">byte</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 读取的数据将存到 bytes 数组里</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">=</span> fileInputStream<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token comment\">// 将字节转换为字符</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>print <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 关闭文件流，释放资源</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                fileInputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>read (byte [] bytes)：从输入流读取一个字节数组的数据，最多 b.length 字节，如果不够则读取实际字节，没有输入可用此方法将阻塞，读取到文件末尾返回 - 1</p>\n<p>read 和 read (byte [] bytes) 返回实际读取的字节数</p>\n</blockquote>\n<h4 id=\"fileoutputstream\"><a class=\"anchor\" href=\"#fileoutputstream\">#</a> FileOutputStream</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>fileinputstream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.13</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 文件输出流（FileOutputStream）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileOutputStream01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\fileOutputStream.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">FileOutputStream</span> fileOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 创建文件输出流，true 表示追加写入，如果没有 true, 则每次写入会覆盖之前的内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            fileOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 写入一个字符数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            fileOutputStream<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 写入一个字符串数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">String</span> dataString <span class=\"token operator\">=</span> <span class=\"token string\">\"hello java\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 此处 write 接收的是字节，需要将 String 转换为字节</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            fileOutputStream<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>dataString<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 写入指定位置字符串</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            fileOutputStream<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>dataString<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 关闭文件输出流</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                fileOutputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"拷贝文件\"><a class=\"anchor\" href=\"#拷贝文件\">#</a> 拷贝文件</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>fileinputstream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @data 2024.5.13</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 文件的拷贝</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> fileCopy <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        copyFile <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> sourceFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\sourceFile.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">String</span> targetFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\targetFile.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">FileOutputStream</span> fileOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            fileOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>targetFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 使用 byte 数组来读取和写入文件</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> fileInputStream<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 将读取的数据写入到目标文件中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 避免文件太大，采用边读边写，提高效率</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 推荐使用 write (byte [] b, int off, int len) 方法，因为它更高效</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// 还能够避免在写入文件时出现缓冲区溢出的问题，或者写入不完整的数据</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                fileOutputStream<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件拷贝成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 关闭流</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileInputStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    fileInputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileOutputStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    fileOutputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"filereader处理字符\"><a class=\"anchor\" href=\"#filereader处理字符\">#</a> FileReader (处理字符)</h4>\n<ul>\n<li>体系图\n<ul>\n<li><img loading=\"lazy\" data-src=\"FileReader.png\" alt=\"FileReader\" /></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>fileinputstream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.13</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 字符输入流</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileReader01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        readFile <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\fileReader\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">FileReader</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 一个一个字节读取</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">int</span> chLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>chLength <span class=\"token operator\">=</span> fileReader<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> chLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 一次性读取具体数目字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>chLength <span class=\"token operator\">=</span> fileReader<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>chs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span>chLength<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"filewriter\"><a class=\"anchor\" href=\"#filewriter\">#</a> FileWriter</h4>\n<ul>\n<li>体系图\n<ul>\n<li><img loading=\"lazy\" data-src=\"FileWriter01.png\" alt=\"FileWriter01\" /></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>fileinputstream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringReader</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @data 2024.5.13</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 字符输出流</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileWriter01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\fileWriter.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">FileWriter</span> fileWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            fileWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 写入单个字符</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            fileWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 写入多个字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            fileWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 写入指定部分的字符数组</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'G'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            fileWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>chars2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 写入字符串</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            fileWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 写入字符串的一部分</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            fileWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 必须关闭流，否则文件不会被写入</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileWriter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    fileWriter<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"节点流-处理流\"><a class=\"anchor\" href=\"#节点流-处理流\">#</a> 节点流 处理流</h4>\n<ul>\n<li>\n<p>节点流：从一个特定的数据源读写数据，如 FileReader.FileWriter</p>\n</li>\n<li>\n<p>处理流：连接在已存在的流（节点流或处理流）之上，为程序提供更强大的读写功能，如 BufferedReader,BufferedWriter，ObjectInputStream,ObjectOutputStream,BufferedInputStream,BufferedOutputStream</p>\n</li>\n<li>\n<p>Reader 和 Writer 体系图</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"bufferedReader.png\" alt=\"bufferedReader\" /></p>\n<p><img loading=\"lazy\" data-src=\"FileWriter.png\" alt=\"FileWriter\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reader</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Reader</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedWriter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Writer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Writer</span> out<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>由上可知，BufferedReader/BufferedWriter 中封装 继承了 Reader/Writer 的流，让数组、String 等类型的流有更方便的读写</p>\n</blockquote>\n<blockquote>\n<p>一个处理流可以处理多种数据源，一个节点流只能处理一种数据源</p>\n</blockquote>\n<blockquote>\n<p>数据源：存放数据的地方，如文件，数组，字符串等</p>\n<p>模拟代码在 file 包里</p>\n</blockquote>\n<h5 id=\"字符流-bufferedreader-bufferedwriter\"><a class=\"anchor\" href=\"#字符流-bufferedreader-bufferedwriter\">#</a> 字符流 BufferedReader BufferedWriter</h5>\n<ul>\n<li>\n<p>BufferedReader 和 BufferedWriter 属于字符流，按照字符来读写数据</p>\n</li>\n<li>\n<p>关闭流时，只需关闭外层流（BufferedReader BufferedWriter）即可（外层流会自动调用方法关闭内存流）</p>\n</li>\n<li>\n<p>使用 BufferedWriter 时，由于是缓冲流，写完之后需要刷新 (flush ()) 或者最后关闭流，才能将数据写入文件，否则只在程序里</p>\n<ul>\n<li>\n<blockquote>\n<p>Buffered 都有一个缓冲数组，如果长度被写入的数据超过 (即缓冲区满) 会自动写入文件，如果没满则会保留在缓冲区，这时需要手动刷新缓存或者关闭包装流将缓冲数据写入文件</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>filestream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @data 2024.5.15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferCopy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        copyFile <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 指定源文件和目标文件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> sourceFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\sourceFile.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> targetFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\targetFile.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建输入和输出流</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">BufferedWriter</span> bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span> <span class=\"token punctuation\">(</span>targetFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 读取源文件内容并写入目标文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 逐行读取</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                bufferedWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 逐行读取，逐行写入，需要手动添加换行符</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                bufferedWriter<span class=\"token punctuation\">.</span>newLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件复制成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 关闭外层流，内层流会自动关闭</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bufferedReader <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    bufferedReader<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bufferedWriter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    bufferedWriter<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"字节流-bufferedinputstream-bufferedoutputstream\"><a class=\"anchor\" href=\"#字节流-bufferedinputstream-bufferedoutputstream\">#</a> 字节流 BufferedInputStream BufferedOutputStream</h4>\n<ul>\n<li>\n<p>处理字节流</p>\n</li>\n<li>\n<p>可以操作文本文件，输出控制台或许会乱码，但是文本文件里可以正常显示内容</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>bufferedstream<span class=\"token punctuation\">.</span>input_output</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @data 2024.5.15</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedIn_OutStream</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        copyFile <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> srcFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\inputSrc.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> destFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\outputDest.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">BufferedInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">BufferedOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 创建缓冲区</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 创建输入输出流</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span> <span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span> <span class=\"token punctuation\">(</span>destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> bytesRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bytesRead <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                fos<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"文件复制成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    fis<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    fos<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"对象流-objectinputstream-objectoutputstream\"><a class=\"anchor\" href=\"#对象流-objectinputstream-objectoutputstream\">#</a> 对象流 ObjectInputStream ObjectOutputStream</h4>\n<h5 id=\"基本介绍-8\"><a class=\"anchor\" href=\"#基本介绍-8\">#</a> 基本介绍</h5>\n<ul>\n<li>\n<p>对象流，就是将基本数据类型或自定义类型进行序列化和反序列化的操作</p>\n</li>\n<li>\n<p>序列化：保存数据时，保存数据的值和类型</p>\n</li>\n<li>\n<p>反序列化：恢复数据时，恢复数据的值和类型</p>\n</li>\n<li>\n<p>前提是其类型支持序列化机制，即实现 Serializable 接口</p>\n</li>\n<li>\n<p>反序列化：ObjectInputStream</p>\n</li>\n<li>\n<p>序列化：ObjectOutputStream</p>\n<h5 id=\"细节-11\"><a class=\"anchor\" href=\"#细节-11\">#</a> 细节</h5>\n</li>\n<li>\n<p>读写顺序要一致</p>\n</li>\n<li>\n<p>需要实现序列化或反序列化的对象，需要实现 Serializable</p>\n</li>\n<li>\n<p>序列化的类中建议添加 <code>@Serial private static final long serialVersionUID = 1L;</code> , 提高版本兼容性</p>\n</li>\n<li>\n<p>序列化对象时，默认所有属性都进行序列化（如里面定义了一个内部类，类需要继承 Serializable），处理 static 和 transient 修饰的成员</p>\n</li>\n<li>\n<p>序列化对象时，要求里面属性的类型需要实现 Serializable 接口</p>\n</li>\n<li>\n<p>序列化具有可继承性，某类实现了序列化，则其子类也默认实现了序列化</p>\n</li>\n</ul>\n<h4 id=\"标准输入输出流\"><a class=\"anchor\" href=\"#标准输入输出流\">#</a> 标准输入输出流</h4>\n<ul>\n<li>\n<p><a href=\"http://System.in\">System.in</a></p>\n<ul>\n<li>\n<p>标准输入流</p>\n</li>\n<li>\n<p>类型：InputStream</p>\n</li>\n<li>\n<p>默认设备：键盘</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从 System.in 提取数据</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n</li>\n<li>\n<p>System.out</p>\n<ul>\n<li>标准输出流</li>\n<li>类型：PrintStream</li>\n<li>默认设备：显示器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"转换流-inputstreamreader-outputstreamwriter\"><a class=\"anchor\" href=\"#转换流-inputstreamreader-outputstreamwriter\">#</a> 转换流 InputStreamReader OutputStreamWriter</h4>\n<h5 id=\"基本介绍-9\"><a class=\"anchor\" href=\"#基本介绍-9\">#</a> 基本介绍</h5>\n<ul>\n<li>当字节流（可能是 UTF-8,GBK 等）Input 字符流输出时，普通输入流会乱码</li>\n<li>如果在转换时指定字节流的编码格式再进行输出，则问题解决</li>\n<li>InputStreamReader:Reader 的子类，可以将 InputStream（字节流）包装成 Reader（字符流）</li>\n<li>OutputStreamWriter：Writer 的子类，实现将 OutputStream 包装成 Writer（字符流）</li>\n<li>处理纯文本文件时，建议使用字符流，效率更高</li>\n<li>可以理解转换流为中间商</li>\n</ul>\n<h4 id=\"打印流-printstream字节流-printwriter字符流\"><a class=\"anchor\" href=\"#打印流-printstream字节流-printwriter字符流\">#</a> 打印流 PrintStream (字节流) PrintWriter (字符流)</h4>\n<ul>\n<li>\n<p>打印流只有输出流，没有输入流</p>\n</li>\n<li>\n<p>PrintStream</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认输出流，打印到控制台</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token class-name\">PrintStream</span> out <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 底层调用 write ()</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          @Override</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          public void write(byte[] buf) throws IOException &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              this.write(buf, 0, buf.length);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      out<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!02\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 重定向输出流，打印到文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">PrintStream</span> printStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\printStreamFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>setOut <span class=\"token punctuation\">(</span>printStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 以下内容将输出到文件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!03\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      printStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>PrintWriter</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传入 System.out， 默认输出到控制台</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 传入文件路径， 输出到文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> printWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\printWriterFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        printWriter<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        out<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        printWriter<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"properties-2\"><a class=\"anchor\" href=\"#properties-2\">#</a> Properties</h3>\n<h4 id=\"基本介绍-10\"><a class=\"anchor\" href=\"#基本介绍-10\">#</a> 基本介绍</h4>\n<ul>\n<li>\n<p>Hashtable 的子类</p>\n</li>\n<li>\n<p>专门用于读写配置文件的集合类</p>\n</li>\n<li>\n<p>配置文件格式</p>\n<ul>\n<li>键 = 值</li>\n<li>键值对不需要空格，值不用引号 “”, 默认类型 String</li>\n</ul>\n</li>\n<li>\n<p>常见方法</p>\n<ul>\n<li>load：加载配置文件的键值对到 Properties 对象</li>\n<li>list：将数据显示到指定设备</li>\n<li>getProperty (key)：根据键获取值</li>\n<li>setProperty (key,val)：设置键值对到 Properties 对象</li>\n<li>store：将 Properties 对象中的键值对存储到配置文件，如果含有中文，存储为 unicode 码</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Properties01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个 Properties 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 加载一个属性文件到 Properties 对象中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>load <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\JAVA\\\\JAVA\\\\JAVASE\\\\src\\\\com\\\\fengxin\\\\basic\\\\file\\\\properties\\\\data.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 输出所有的属性到控制台</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 获取指定属性的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span>getProperty <span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"user的值为：\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Properties02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建 Properties 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 添加键值对</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>setProperty <span class=\"token punctuation\">(</span><span class=\"token string\">\"枫\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"000000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>setProperty <span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"000001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>setProperty <span class=\"token punctuation\">(</span><span class=\"token string\">\"Merry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"888888\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 此时覆盖原值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//properties.setProperty (\"枫\", \"123456\");</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 添加 k-v 到文件中，第二个参数是注释</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>store <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\mysql.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MySQL Properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络</h2>\n<h3 id=\"网络通信\"><a class=\"anchor\" href=\"#网络通信\">#</a> 网络通信</h3>\n<ul>\n<li>概念：两台设备之间通过网络实现数据传输</li>\n<li>网络通信： <code>将数据通过网络从一台设备传输到另一台设备</code></li>\n<li>java.net 包提供了一系列接口</li>\n</ul>\n<h3 id=\"网络-2\"><a class=\"anchor\" href=\"#网络-2\">#</a> 网络</h3>\n<ul>\n<li>概念： <code>两台或多台设备通过一定物理设备连接构成网络</code></li>\n<li>根据覆盖范围分类\n<ul>\n<li>局域网：覆盖范围最小</li>\n<li>广域网：覆盖范围最大，全国乃至全球，万维网是代表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ip地址\"><a class=\"anchor\" href=\"#ip地址\">#</a> IP 地址</h3>\n<ul>\n<li>概念： <code>唯一标识网络中的每台计算机</code></li>\n<li>查看 ip 地址:ipconfig</li>\n<li>ip 地址表示：点分十进制 xx.xx.xx.xx（每一个十进制范围：0~255）</li>\n<li>ip 地址 = 网络地址 + 主机地址</li>\n<li>ipv6 是用于替代 ipv4 的下一代 ip 协议</li>\n<li>ipv6 解决了网络地址资源问题</li>\n</ul>\n<blockquote>\n<p>ipv4:4 个字节 (32 位) 表示，一个字节范围 0~255 xx.xx.xx.xx</p>\n<p>ipv6:16 个字节 (128 位) 表示，是 ipv4 的 4 倍 xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx</p>\n</blockquote>\n<blockquote>\n<p>ipv4 地址分类：</p>\n<p>A:0 + 网络号 + 主机号 0.0.0.0 ~ 127.255.255.255</p>\n<p>B:1 0 + 网络号 + 主机号 128.0.0.0 ~ 191.255.255.255</p>\n<p>C:1 1 0 + 网络号 + 主机号 192.0.0.0 ~ 223.255.255.255</p>\n<p>D:1 1 1 0 + 多播组号 224.0.0.0 ~ 239.255.255.255</p>\n<p>E:1 1 1 1 0 + 留待后用 224.0.0.0 ~ 247.255.255.255</p>\n</blockquote>\n<h3 id=\"域名-端口号\"><a class=\"anchor\" href=\"#域名-端口号\">#</a> 域名 端口号</h3>\n<h4 id=\"域名\"><a class=\"anchor\" href=\"#域名\">#</a> 域名</h4>\n<ul>\n<li>\n<p>概念： <code>将ip地址映射成域名(HTTP协议)</code></p>\n</li>\n<li>\n<p>例：<a href=\"http://www.google.com\">www.google.com</a></p>\n</li>\n</ul>\n<h4 id=\"端口号\"><a class=\"anchor\" href=\"#端口号\">#</a> 端口号</h4>\n<ul>\n<li>\n<p>概念： <code>标识计算机上某个特定网络程序</code></p>\n</li>\n<li>\n<p>表示：整数表示，0 ~ 65535</p>\n</li>\n<li>\n<p>0 ~ 1024 已经被占用，如 ssh 22,ftp 21,http 80</p>\n</li>\n<li>\n<p>常见网络程序端口号</p>\n<ul>\n<li>tomcat:8080</li>\n<li>mysql:3306</li>\n<li>oracle:1521</li>\n<li>sqlserver:1433</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image-20240516182725463.png\" alt=\"image-20240516182725463\" /></p>\n</li>\n</ul>\n<h3 id=\"网络协议tcpip\"><a class=\"anchor\" href=\"#网络协议tcpip\">#</a> 网络协议 (TCP/IP)</h3>\n<ul>\n<li>\n<p>概念： <code>数据的组织形式</code> （类似打包，一层一层包装）</p>\n</li>\n<li>\n<p>中文：传输控制协议 / 因特网互联协议</p>\n</li>\n<li>\n<p><img loading=\"lazy\" data-src=\"image-20240516190127188.png\" alt=\"image-20240516190127188\" /></p>\n</li>\n<li>\n<p><img loading=\"lazy\" data-src=\"image-20240516190143046.png\" alt=\"image-20240516190143046\" /></p>\n</li>\n<li>\n<blockquote>\n<p>理解：</p>\n<p>数据进行打包精确发送到指定程序</p>\n<p>程序接收后层层解包获取数据</p>\n</blockquote>\n</li>\n<li>\n<p>各层以及协议</p>\n<ul>\n<li>\n<p>链路层（Link Layer）<br />\n链路层也被称为网络接口层或数据链路层，负责在同一物理网络上的设备之间传输数据。</p>\n<p><strong>以太网（Ethernet）</strong>：局域网中最常见的链路层协议。</p>\n<p><strong>Wi-Fi</strong>：无线局域网的链路层协议。</p>\n<p><strong>帧中继（Frame Relay）</strong>：一种广域网传输协议。</p>\n<p><strong>ATM（Asynchronous Transfer Mode）</strong>：异步传输模式，用于高性能网络。</p>\n<p>网络层（Network Layer）<br />\n网络层负责数据包的路由和转发，实现主机到主机的通信</p>\n<p><strong>IP（Internet Protocol）</strong>：网络层的核心协议，负责数据包的寻址和路由。</p>\n<p><strong>IPv4</strong>：互联网协议版本 4。</p>\n<p><strong>IPv6</strong>：互联网协议版本 6，提供更大的地址空间和改进的功能。</p>\n<p><strong>NAT（Network Address Translation）</strong>：网络地址转换，用于在私有 IP 地址和公共 IP 地址之间进行转换。</p>\n<p>传输层（Transport Layer）<br />\n传输层负责端到端的数据传输和可靠性。</p>\n<p><strong>TCP（Transmission Control Protocol）</strong>：传输控制协议，提供可靠的、面向连接的传输服务。<br />\n<strong>UDP（User Datagram Protocol）</strong>：用户数据报协议，提供不可靠的、无连接的传输服务。</p>\n<p>应用层（Application Layer）<br />\n应用层包含应用程序和服务，提供各种网络功能。</p>\n<p><strong>HTTP/HTTPS（Hypertext Transfer Protocol / Secure Hypertext Transfer Protocol）</strong>：用于万维网的协议。<br />\n<strong>FTP（File Transfer Protocol）</strong>：文件传输协议，用于在网络上进行文件传输。<br />\n<strong>DNS（Domain Name System）</strong>：域名系统，用于将域名解析为 IP 地址。<br />\n<strong>SSH（Secure Shell）</strong>：安全外壳协议，用于安全的远程登录和其他安全网络服务。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"tcp-udp\"><a class=\"anchor\" href=\"#tcp-udp\">#</a> TCP UDP</h3>\n<h4 id=\"tcp协议\"><a class=\"anchor\" href=\"#tcp协议\">#</a> TCP 协议</h4>\n<ul>\n<li>\n<p>使用 TCP 协议前，须先建立 TCP 连接，形成数据传输通道</p>\n</li>\n<li>\n<p>传输前，采用 <code>3次握手</code> 方式（可靠性高）</p>\n<ul>\n<li>\n<blockquote>\n<p>A ———&gt; B</p>\n<p>第一次握手：A 传递包，连接 B（A ———&gt; B）</p>\n<p>第二次握手：B 返回包给 A，A 确定 B 能接收数据（A &lt;——— B）</p>\n<p>第三次握手：A 返回包给 B，B 确定 A 能接收信息（A ———&gt; B）</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>TCP 协议进行通信的两个应用进程：客户端、服务端</p>\n</li>\n<li>\n<p>传输完毕，需释放已建立的连接，效率低</p>\n</li>\n<li>\n<p>在连接中可进行大数据量的传输</p>\n</li>\n</ul>\n<h4 id=\"udp协议\"><a class=\"anchor\" href=\"#udp协议\">#</a> UDP 协议</h4>\n<ul>\n<li>将数据、源、目的封装成数据包， <code>不需要建立连接</code></li>\n<li>每个数据包的大小限制在 64K 内，不适合传输大量数据</li>\n<li>因无需连接，故是不可靠的</li>\n<li>发送数据结束时无需释放资源 (因为不是面向连接的)，速度快</li>\n<li>举例：发短信，不确定对方是否能接收</li>\n</ul>\n<h3 id=\"inetaddress类\"><a class=\"anchor\" href=\"#inetaddress类\">#</a> InetAddress 类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InetAddressDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取本地主机的 InetAddress 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">InetAddress</span> localHost <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getLocalHost <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>localHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 根据主机名获取 InetAddress 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">InetAddress</span> localHostByName <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getByName <span class=\"token punctuation\">(</span><span class=\"token string\">\"FengXin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>localHostByName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 根据域名获取 InetAddress 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">InetAddress</span> localHostByAddress <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getByName <span class=\"token punctuation\">(</span><span class=\"token string\">\"www.google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>localHostByAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 获取 IP 地址 (String 表示)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> ipAddress <span class=\"token operator\">=</span> localHostByAddress<span class=\"token punctuation\">.</span>getHostAddress <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>ipAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取主机名 / 域名 (String 表示)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> hostName <span class=\"token operator\">=</span> localHostByAddress<span class=\"token punctuation\">.</span>getHostName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>hostName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"socket\"><a class=\"anchor\" href=\"#socket\">#</a> Socket</h3>\n<h4 id=\"基本介绍-11\"><a class=\"anchor\" href=\"#基本介绍-11\">#</a> 基本介绍</h4>\n<ul>\n<li>\n<p>Socket（套接字）开发网络应用程序</p>\n</li>\n<li>\n<p>通信的两端都要有 Socket，是两台机器间通信的端点</p>\n</li>\n<li>\n<p>网络通信其实就是 Socket 间的通信</p>\n</li>\n<li>\n<p>Socket 允许程序把网络连接当做一个流，数据在两公分 Socket 间通过 IO 传输</p>\n</li>\n<li>\n<p>主动发起通信的应用程序属于客户端，等待通信请求的为服务器端</p>\n</li>\n<li>\n<blockquote>\n<p>Socket 负责数据的输入输出，两端都必须有 Socket 才能兼容</p>\n<p>传出的数据经过 TCP/IP 协议层层打包，到另一台主机上再层层解包，最后服务器端的 Socket 接收数据</p>\n</blockquote>\n</li>\n<li>\n<p>TCP/UDP 编程</p>\n</li>\n</ul>\n<h4 id=\"tcp字节流编程\"><a class=\"anchor\" href=\"#tcp字节流编程\">#</a> TCP 字节流编程</h4>\n<blockquote>\n<p>客户端</p>\n<ol>\n<li>连接服务器端 (ip + 端口)</li>\n<li>连接后，生成 socket, 通过 socket.getOutPutStream () 写入数据到数据通道</li>\n</ol>\n<p>服务器端</p>\n<ol>\n<li>在端口监听，等待连接</li>\n<li>没有连接时会阻塞</li>\n<li>连接后，生成 socket，通过 socket.getInPutStream () 读取客户端发来的数据</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// client</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TCPClient01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 连接本机端口，返回一个 Socket 对象 指定服务器的 IP 地址和端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getLocalHost <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 连接上后，获取输出流对象，该对象和当前的 socket 关联</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getOutputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 写入数据到数据通道，向服务器发送数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        outputStream<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, server!\"</span><span class=\"token punctuation\">.</span>getBytes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 关闭输出流和 Socket</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        outputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// server</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TCPServer01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 创建 ServerSocket 对象，指定端口号，服务端在 9999 端口监听</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 等待客户端连接，连接成功返回一个 Socket 对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//accept () 是一个阻塞方法，如果没有客户端连接，则一直等待</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span>accept <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取输入流</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getInputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 读取数据并输出在控制台</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        inputStream<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 关闭 ServerSocket 对象</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        serverSocket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上面案例中，客户端发送数据后就关闭相关资源了，就结束了。如果服务器端还要返回数据给客户端，那么相关资源不会立即关闭，就会造成服务器端发送数据后，客户端不知道服务器是否传输数据完毕，不知道什么时候读取完毕，就会一直阻塞，因此，应该在发送完数据后结束标记（服务器说完话就沉默，到客户端不知道服务器是否说完）添加结束标记： <code>socket.shutdownOutput ();</code></p>\n</blockquote>\n<h4 id=\"tcp字符流编程\"><a class=\"anchor\" href=\"#tcp字符流编程\">#</a> TCP 字符流编程</h4>\n<blockquote>\n<p>在传输文本文件时，使用转换流转换字节流，包装成字符流，效率更高</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// client</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>socket</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 客户端</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 更新内容：使用字符流传输数据</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TCPClient03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 连接本机端口，返回一个 Socket 对象 指定服务器的 IP 地址和端口号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getLocalHost <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 连接上后，获取输出流对象，该对象和当前的 socket 关联</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getOutputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 客户端发送数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 使用转换流包装数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">BufferedWriter</span> bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span> <span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 写入数据到数据通道，向服务器发送数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Server!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 刷新缓存，将数据发送出去</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>flush <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 结束标志</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>shutdownOutput <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 客户端接收服务器返回的数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getInputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 使用转换流包装数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span> <span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 关闭输出流和 Socket</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        bufferedReader<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// server</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>socket</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"54\"></td><td><pre> * 服务器端</pre></td></tr><tr><td data-num=\"55\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TCPServer03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span>accept <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 接收客户端发送的数据</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 获取输入流</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getInputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 使用转换流包装数据</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span> <span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 读取数据并输出在控制台</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 服务器端发送数据给客户端</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getOutputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 使用转换流包装数据</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">BufferedWriter</span> bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span> <span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Client!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// 刷新缓存，将数据写入到输出流</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>flush <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 结束标志</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>shutdownOutput <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        bufferedReader<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 关闭 ServerSocket 对象</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        serverSocket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"文件上传\"><a class=\"anchor\" href=\"#文件上传\">#</a> 文件上传</h4>\n<blockquote>\n<p>客户端</p>\n<p>读取磁盘文件写入到字节流</p>\n<p>字节流经过 socket 进入数据通道</p>\n<p>接收服务器端返回的上传成功标志</p>\n</blockquote>\n<blockquote>\n<p>服务器端</p>\n<p>读取 socket 数据通道数据写入字节流</p>\n<p>字节流写入磁盘文件</p>\n<p>返回给客户端上传成功标志</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"image-20240518120558257.png\" alt=\"image-20240518120558257\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// client</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UploadClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建 socket</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getLocalHost <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 读取磁盘文件写入到字节流，边读边写</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\图片\\\\壁纸\\\\2.jpeg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getOutputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span> <span class=\"token punctuation\">(</span>fileReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span> <span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 字节流经过 socket 进入数据通道</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            bos<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            bos<span class=\"token punctuation\">.</span>flush <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 结束标志</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>shutdownOutput <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 接收服务器端返回的上传成功标志</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getInputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span> <span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span>readLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 关闭流</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        bos<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        br<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        bis<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//server</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UploadServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 等待连接</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span>accept <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 读取 socket 数据通道数据写入字节流</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 字节流写入磁盘文件，边读边写</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 创建目标文件</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">String</span> targetPath <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\upload.jpg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">FileOutputStream</span> fileOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span> <span class=\"token punctuation\">(</span>targetPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span> <span class=\"token punctuation\">(</span>fileOutputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 读取 socket 数据通道数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getInputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span> <span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span>read <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            bos<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 刷新缓冲区，写入磁盘文件</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            bos<span class=\"token punctuation\">.</span>flush <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 返回给客户端上传成功标志</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> outputStream <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>getOutputStream <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">BufferedWriter</span> bufferedWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span> <span class=\"token punctuation\">(</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>write <span class=\"token punctuation\">(</span><span class=\"token string\">\"上传成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 刷新缓冲区，写入 socket 数据通道</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>flush <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 结束标志</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>shutdownOutput <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 关闭流</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        bos<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        bufferedWriter<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        bis<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        serverSocket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"netstat-指令\"><a class=\"anchor\" href=\"#netstat-指令\">#</a> netstat 指令</h4>\n<ul>\n<li>netstat -an 可以查看当前主机的网络情况，包括端口监听和网络连接</li>\n<li>netstat -an | more 分页显示</li>\n<li>netstat -anb | more 显示监听的程序</li>\n<li>ctrl + c 可以退出</li>\n</ul>\n<h4 id=\"tcp的秘密\"><a class=\"anchor\" href=\"#tcp的秘密\">#</a> TCP 的秘密</h4>\n<ul>\n<li>当客户端连接到服务器后，实际上客户端也是通过一个端口和服务器端进行通讯的，这个端口是由 TCP/IP 随机分配的</li>\n<li>高并发基础</li>\n<li>可以通过 <strong>IDEA 运行 java + netstat</strong> 查看验证</li>\n</ul>\n<h4 id=\"udp原理\"><a class=\"anchor\" href=\"#udp原理\">#</a> UDP 原理</h4>\n<ul>\n<li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序</li>\n<li>UDP 数据通过数据包套接字 DatagramSocket 发送和接收，系统不保证 UDP 数据包一定能安全送达目的地，也不能确定何时送达</li>\n<li>DatagramSocket 可以指定在那个端口接收数据</li>\n<li>发送端和接收端不固定，根据谁发谁接决定</li>\n<li>DatagramPacket 对象封装了 UDP 数据包，数据包中包含发送端的 IP 地址和端口号，接收端的 IP 地址和端口号</li>\n<li>UDP 协议中每个数据包都给出完整地址信息，因此无需建立发送端和接收端连接直接发送</li>\n<li><img loading=\"lazy\" data-src=\"image-20240518174226023.png\" alt=\"image-20240518174226023\" /></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// receive</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UdpReceive</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个 UDP Socket，并指定端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">DatagramSocket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramSocket</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建数据包，最大 64K</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建一个字节数组，用于接收数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">DatagramPacket</span> packet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 等待接收数据，如果接收不到数据，会一直阻塞</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>receive <span class=\"token punctuation\">(</span>packet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 打印接收到的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到数据：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>packet<span class=\"token punctuation\">.</span>getLength <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 关闭 Socket</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// send</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UdpSend</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 创建 UDP Socket</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">DatagramSocket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramSocket</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 创建数据包，用于发送数据，最大 64K</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 创建 byte [] 数组，用于存储要发送的数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">.</span>getBytes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 设置目标 IP 地址和端口号</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">DatagramPacket</span> packet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatagramPacket</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span>getByName <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>send <span class=\"token punctuation\">(</span>packet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 关闭 Socket</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        socket<span class=\"token punctuation\">.</span>close <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"请求转发\"><a class=\"anchor\" href=\"#请求转发\">#</a> 请求转发</h4>\n<ol>\n<li>请求转发通过 HttpServletRequest 对象获取请求转发器实现。</li>\n<li>请求转发是服务器内部的行为，对客户端是屏蔽的。</li>\n<li>客户端只发送了一次请求，客户端地址栏不变。</li>\n<li>服务端只产生了一对请求和响应对象，这一对请求和响应对象会继续传递给下一个资源。</li>\n<li>因为全程只有一个 HttpServletRequest 对象，所以请求参数可以传递，请求域中的数据也可以传递。</li>\n<li>请求转发可以转发给其他 Servlet 动态资源，也可以转发给一些静态资源以实现页面跳转。</li>\n<li>请求转发可以转发给 WEB-INF 下受保护的资源。请求转发不能转发到本项目以外的外部资源。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"image-20241001215111811-1727790679715-8.png\" alt=\"image-20241001215111811-1727790679715-8\" /></p>\n<h4 id=\"请求重定向\"><a class=\"anchor\" href=\"#请求重定向\">#</a> 请求重定向</h4>\n<ol>\n<li>通过重定向跳转到 HttpServletResponse 对象的 sendRedirect 方法</li>\n<li>通过重定向可以发送状态码 302 的 HTTP 响应来告诉客户端（比如浏览器）去获取存储在 Location 头部字段中的新的 URL，这种方式称为 HTTP 重定向</li>\n<li>客户端浏览器不可见这次跳转，也就是说地址栏不会改变</li>\n<li>跳转到了客户端无法访问或者权限不够不能访问的页面会提示错误</li>\n<li>由于是在服务端进行 HttpServletResponse 对象调用，所以对于用户来说是看不见这个过程中发生什么事情</li>\n<li>重定向可以理解为服务器在处理完一些事情后给予客户端新的指示</li>\n<li>重定向可以实现 WEB-INF 下资源文件的保护</li>\n<li>重定向可以实现外部资源网站的访问</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"image-20241001215156367-1727790720343-10.png\" alt=\"image-20241001215156367-1727790720343-10\" /></p>\n<h4 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> Filter</h4>\n<p><img loading=\"lazy\" data-src=\"Filter-1727790607285-6.png\" alt=\"Filter-1727790607285-6\" /></p>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"反射基本介绍\"><a class=\"anchor\" href=\"#反射基本介绍\">#</a> 反射基本介绍</h3>\n<ul>\n<li>\n<p>需求</p>\n<ul>\n<li>根据配置文件 properties 指定信息，创建对象并调用方法</li>\n<li>反射可以保证在不修改源码情况下，控制程序，符合 OCP 原则 (开闭原则)</li>\n</ul>\n</li>\n<li>\n<p>反射机制允许程序在执行期间借助与 Reflection API 取得类的任何内部信息（成员变量，构造器，成员方法等），并能操作对象的属性及方法，反射在设计模式和框架底层都会用到</p>\n</li>\n<li>\n<p>加载完类后，堆中产生一个 Class 类型的对象（一个类对应一个 Class 对象），Class 对象包含了类的完整信息。通过该对象获取类的结构。就像一面镜子，形象称为反射</p>\n</li>\n<li>\n<p>类加载：将数据存放到方法区，然后在堆创建 Class 对象，用于封装数据</p>\n</li>\n<li>\n<p>反射相关的类</p>\n<ul>\n<li>java.lang.Class: 代表一个类，Class 对象表示某个类加载后在堆中的对象</li>\n<li>java.lang.reflect.Method: 代表类的方法，Method 对象表示某个类的方法</li>\n<li>java.lang.reflect.Field: 代表类的成员变量，Field 对象表示某个类的成员变量</li>\n<li>java.lang.reflect.Constructor: 代表类的构造方法，Constructor 对象表示某个类的构造器</li>\n</ul>\n</li>\n<li>\n<p><img loading=\"lazy\" data-src=\"image-20240519225738375.png\" alt=\"image-20240519225738375\" /></p>\n</li>\n<li>\n<p>properties 文件</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>className <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span></span>Cat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>method <span class=\"token operator\">=</span> cry</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>Cat</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>basic_reflection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动物叫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fly</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Run</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Fly</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Run</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"喵喵喵\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"喵喵喵喵喵喵\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫会飞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫会跑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>reflection</p>\n<ul>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectionForCat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 创建一个 Properties 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 加载配置文件到 Properties 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        properties<span class=\"token punctuation\">.</span>load <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\JAVA\\\\JAVA\\\\JAVASE\\\\src\\\\com\\\\fengxin\\\\basic\\\\reflection\\\\reflection.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 从 Properties 对象中获取类名和方法名</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span>getProperty <span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span>getProperty <span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 加载类，返回 Class 对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 获取类的实例，通过 cls 得到加载类 com.fengxin.basic.reflection.Cat 的对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 获取方法，通过 cls 得到加载类 com.fengxin.basic.reflection.Cat 的名为 methodName 的方法对象</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getMethod <span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 调用类 com.fengxin.basic.reflection.Cat 对象的方法 ---> 通过 method 得到加载类的方法对象，调用 invoke 方法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// method.invoke(Object obj)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        method<span class=\"token punctuation\">.</span>invoke <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 调用类 com.fengxin.basic.reflection.Cat 的无参构造器</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Constructor</span> constructor1 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getConstructor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>constructor1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 调用类 com.fengxin.basic.reflection.Cat 的有参构造器，根据参数类型获取构造器</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Constructor</span> constructor2 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getConstructor <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>constructor2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 获取类 com.fengxin.basic.reflection.Cat 的字段（需要访问权限）</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Field</span> fieldPublic <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getField <span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 获取具体值 field.get (Object obj)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>fieldPublic<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射优化\"><a class=\"anchor\" href=\"#反射优化\">#</a> 反射优化</h3>\n<ul>\n<li>\n<p>反射优点和缺点</p>\n<ul>\n<li>\n<p>优点：可以动态的创建和使用对象（也是框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑。</p>\n</li>\n<li>\n<p>缺点：使用反射基本是解释执行，对执行速度有影响。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>优化</p>\n<ul>\n<li>Method,Constructer,Field 都有 setAccessible (boolean flag)</li>\n<li>值为 true 关闭权限检查，提升速度</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反射常用方法\"><a class=\"anchor\" href=\"#反射常用方法\">#</a> 反射常用方法</h3>\n<ul>\n<li>getName: 获取全类名</li>\n<li>getSimpleName: 获取简单类名</li>\n<li>getFields: 获取所有 public 修饰的属性，包含本类以及父类的</li>\n<li>getDeclaredFields: 获取本类中所有属性</li>\n<li>getMethods: 获取所有 public 修饰的方法，包含本类以及父类的</li>\n<li>getDeclaredMethods: 获取本类中所有方法</li>\n<li>getConstructors: 获取本类所有 public 修饰的构造器</li>\n<li>getDeclaredConstructors: 获取本类中所有构造器</li>\n<li>getPackage: 以 Package 形式返回 包信息</li>\n<li>getSuperClass: 以 Class 形式返回父类信息</li>\n<li>getInterfaces: 以 Class [] 形式返回接口信息</li>\n<li>getAnnotations: 以 Annotation [] 形式返回注解信息</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Annotation</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * Class 类的常用方法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> catPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"com.fengxin.basic.reflection.basic_reflection.Cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象 (加载类)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>catPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 显示该 Class 对象所表示的实体类</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"该Class对象所表示的实体类: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取 cls 运行类型 ---Class</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span> <span class=\"token string\">\"cls运行类型: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 获取 Class 对象所表示的实体全类名</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Class对象所表示的实体全类名: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取简单类名</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"cls简单类名: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span>getSimpleName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 获取实体类包名</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"cls包名: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span>getPackage <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 创建 cls 的实例，运行类型是实体类 Cat</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 获取属性名</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getField <span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"属性名: \"</span> <span class=\"token operator\">+</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 获取属性值</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"属性值 age = \"</span> <span class=\"token operator\">+</span> field<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 获取本类所有属性 (包括私有和保护)，包含本类以及父类的</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"所有属性(包括私有和保护)，包含本类以及父类的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields1 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getDeclaredFields <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f<span class=\"token operator\">:</span> fields1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 获取本类所有 public 修饰的属性</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"获取本类所有public修饰的属性\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields2 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getFields <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f<span class=\"token operator\">:</span> fields2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 获取所有 public 修饰的方法，包含本类以及父类的</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"获取所有public修饰的方法，包含本类以及父类的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getMethods <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 获取本类中所有方法</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"获取本类中所有方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> clsDeclaredMethods <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getDeclaredMethods <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> clsDeclaredMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 获取本类所有 public 修饰的构造器</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"获取本类所有public修饰的构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getConstructors <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 获取所有构造器，包含本类以及父类的</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"获取所有构造器，包含本类以及父类的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> clsDeclaredConstructors <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getDeclaredConstructors <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clsDeclaredConstructor <span class=\"token operator\">:</span> clsDeclaredConstructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>clsDeclaredConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">// 以 Class 形式返回父类信息</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> superclass <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getSuperclass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"父类信息: \"</span> <span class=\"token operator\">+</span> superclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">// 以 Class [] 形式返回接口信息</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"以Class[]形式返回接口信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getInterfaces <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> anInterface <span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"接口信息: \"</span> <span class=\"token operator\">+</span> anInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 以 Annotation [] 形式返回注解信息</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"以Annotation[]形式返回注解信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annotations <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getAnnotations <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> annotation <span class=\"token operator\">:</span> annotations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"注解信息: \"</span> <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"获取class\"><a class=\"anchor\" href=\"#获取class\">#</a> 获取 Class</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 1.Class class = Class.forName (类名);  编译阶段</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> classPath <span class=\"token operator\">=</span> <span class=\"token string\">\"com.fengxin.basic.reflection.basic_reflection.Cat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>classPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>cls1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 2. 类名.class，常用于参数传递  类加载阶段</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 3. 对象.getClass () 创建对象之后 运行阶段</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 4. 基本类型的包装类.TYPE</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integerType <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>integerType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 5. 基本类型也有对应的 Class 对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integerClass <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>integerClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 6. 使用 ClassLoader (类加载阶段)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取 ClassLoder 对象</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>getClass <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getClassLoader <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 获取 ClassLoder 类</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls2 <span class=\"token operator\">=</span> classLoader<span class=\"token punctuation\">.</span>loadClass <span class=\"token punctuation\">(</span>classPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>cls2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如下类型有 Class 对象\n<ul>\n<li>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li>\n<li>interface: 接口</li>\n<li>数组</li>\n<li>enum: 枚举</li>\n<li>annotation: 注解</li>\n<li>基本数据类型</li>\n<li>void</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 外部类，成员内部类，静态内部类，局部内部类，匿名内部类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringClass <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"String class is +\"</span> <span class=\"token operator\">+</span> stringClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//interface: 接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> serializableClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Serializable class is +\"</span> <span class=\"token operator\">+</span> serializableClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> stringArrayClass <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"String[] class is +\"</span> <span class=\"token operator\">+</span> stringArrayClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//enum: 枚举</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">></span></span> threadClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread class is +\"</span> <span class=\"token operator\">+</span> threadClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//annotation: 注解</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SuppressWarnings</span><span class=\"token punctuation\">></span></span> suppressWarningsClass <span class=\"token operator\">=</span> <span class=\"token class-name\">SuppressWarnings</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"SuppressWarnings class is +\"</span> <span class=\"token operator\">+</span> suppressWarningsClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 基本数据类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integerClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer class is +\"</span> <span class=\"token operator\">+</span> integerClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// void</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> voidClass <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Void class is +\"</span> <span class=\"token operator\">+</span> voidClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类加载\"><a class=\"anchor\" href=\"#类加载\">#</a> 类加载</h3>\n<ul>\n<li>反射机制是 java 实现动态语言的关键，也就是通过反射实现类动态加载\n<ul>\n<li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li>\n<li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性</li>\n</ul>\n</li>\n<li>类加载时机\n<ul>\n<li>\n<p>静态加载</p>\n<ul>\n<li>当创建对象时 (new)</li>\n<li>当子类被加载时</li>\n<li>调用类中的静态成员时</li>\n</ul>\n</li>\n<li>\n<p>动态加载</p>\n<ul>\n<li>通过反射</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入1或2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        flag <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>nextInt <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 静态加载</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 编译时就会报异常</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// Dog dog = new Dog;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// dog.cry();</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 动态加载</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 运行时才会报异常</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span><span class=\"token string\">\"com.fengxin.basic.reflection.loadclass.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getMethod <span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                method<span class=\"token punctuation\">.</span>invoke <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类加载的五个阶段\"><a class=\"anchor\" href=\"#类加载的五个阶段\">#</a> 类加载的五个阶段</h3>\n<ul>\n<li>\n<p><img loading=\"lazy\" data-src=\"image-20240520152818682.png\" alt=\"image-20240520152818682\" /></p>\n</li>\n<li>\n<p>加载 (Loading) 阶段</p>\n<ul>\n<li>JVM 将字节码从不同的数据源（class 文件，jar 包，网络）转化为二进制字节流<strong>加载</strong>到内存，并生成一个代表该类的 java.lang.Class<strong> 对象</strong></li>\n</ul>\n</li>\n<li>\n<p>连接 (Linking) 阶段</p>\n<ul>\n<li>\n<p>验证</p>\n<ul>\n<li>确保 Class 文件中的字节流包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的安全</li>\n<li>文件格式验证（是否以魔数 oxcafebabe 开头），元数据验证，字节码验证和符号引用验证</li>\n<li>可以考虑 -Xverify:none 参数关闭大部分的类验证措施，缩短加载时间</li>\n</ul>\n</li>\n<li>\n<p>准备</p>\n<ul>\n<li>\n<p>JVM 对<strong>静态变量</strong>分配内存并<strong>默认初始化</strong>（对应数据类型的默认初始值：0,0L,null,false…），这些变量所使用的内存都将在方法区中分配</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//n1 是实例属性，不是静态变量，不会分配内存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//n2 是静态变量，分配内存，默认初始化为 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//n3 是常量，一旦赋值就不可改变，分配内存，n3 = 30</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>解析</p>\n<ul>\n<li>虚拟机将常量池内的<strong>符号引用</strong>（相对）替换为<strong>直接内存地址</strong>（绝对）引用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>初始化</p>\n<ul>\n<li>执行类中定义的 Java 程序代码</li>\n<li>执行方法 clinit ()</li>\n<li>clinit () 方法由编译器按照语句在源文件出现的顺序，一次自动收集类中所有的<strong>静态变量的赋值动作</strong>和<strong>静态代码块</strong>中的语句，并合并</li>\n<li>虚拟机会保证一个类的 clinit 方法在多线程环境中被正确加锁、同步</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"获取类的信息\"><a class=\"anchor\" href=\"#获取类的信息\">#</a> 获取类的信息</h3>\n<h4 id=\"java-lang-reflect-field类\"><a class=\"anchor\" href=\"#java-lang-reflect-field类\">#</a> java. lang. reflect. Field 类</h4>\n<ul>\n<li>\n<p>getModifiers: 以 int 形式返回修饰符</p>\n<blockquote>\n<p>说明：默认修饰符是 0, public 是 1 , private 是 2, protected 是 4,static 是 8, final 是 16</p>\n</blockquote>\n</li>\n<li>\n<p>getType: 以 Class 形式返回类型</p>\n</li>\n<li>\n<p>getName: 返回属性名</p>\n</li>\n</ul>\n<h4 id=\"java-lang-reflect-method类\"><a class=\"anchor\" href=\"#java-lang-reflect-method类\">#</a> java. lang. reflect. Method 类</h4>\n<ul>\n<li>getModifiers: 以 int 形式返回修饰符</li>\n<li>getReturnType: 以 Class 形式获取返回类型</li>\n<li>getName: 返回方法名</li>\n<li>getParameterTypes: 以 Class [] 返回参数类型数组</li>\n</ul>\n<h4 id=\"java-lang-reflect-constructer类\"><a class=\"anchor\" href=\"#java-lang-reflect-constructer类\">#</a> java. lang. reflect. Constructer 类</h4>\n<ul>\n<li>getModifiers: 以 int 形式返回修饰符</li>\n<li>getReturnType: 以 Class 形式获取返回类型</li>\n<li>getParameterTypes: 以 Class [] 返回参数类型数组</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 获取类中的信息</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 包括字段，方法，构造器的相关信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetInformation_Class</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"com.fengxin.basic.reflection.basic_reflection.Cat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getDeclaredFields <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Fields:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> fields<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">//getModifiers: 以 int 形式返回修饰符</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>getModifiers <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//getType: 以 Class 形式返回类型</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>getType <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">//getName: 返回属性名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Methods:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getDeclaredMethods <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//getModifiers: 以 int 形式返回修饰符</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>getModifiers <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">//getReturnType: 以 Class 形式获取返回类型</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>getReturnType <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">//getName: 返回方法名</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">//getParameterTypes: 以 Class [] 返回参数类型数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>toString <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>getParameterTypes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Constructors:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constructors <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>getDeclaredConstructors <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">:</span> constructors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">//getModifiers: 以 int 形式返回修饰符</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>getModifiers <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">//getName: 返回构造器名</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>getName <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">//getParameterTypes: 以 Class [] 返回参数类型数组</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span>toString <span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>getParameterTypes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"反射暴破\"><a class=\"anchor\" href=\"#反射暴破\">#</a> 反射暴破</h3>\n<h4 id=\"field\"><a class=\"anchor\" href=\"#field\">#</a> Field</h4>\n<ul>\n<li>\n<p>Field f= clazz.getDeclaredField (属性名);</p>\n</li>\n<li>\n<p>暴破：f.setAccessible (true);//f 是 Field</p>\n</li>\n<li>\n<p>设置值：set (o，值)；o 表示对象</p>\n</li>\n<li>\n<p>访问：System.out.println (f.get (o))；o 表示对象</p>\n<blockquote>\n<p>注意：如果是静态属性，则 set 和 get 中的参数 o，可以写成 null</p>\n</blockquote>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>accessible</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Accessible_Fields</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> personPath <span class=\"token operator\">=</span> <span class=\"token string\">\"com.fengxin.basic.reflection.accessible.Person\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> person <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>personPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredConstructor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredField <span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 暴破，操作私有 Field</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        name<span class=\"token punctuation\">.</span>setAccessible <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        name<span class=\"token punctuation\">.</span>set <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 静态 Field</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Field</span> age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredField <span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        age<span class=\"token punctuation\">.</span>setAccessible <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// Object 可以设为 null</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        age<span class=\"token punctuation\">.</span>set <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">.</span>get <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li></li>\n</ul>\n<h4 id=\"method\"><a class=\"anchor\" href=\"#method\">#</a> Method</h4>\n<ul>\n<li>\n<p>Method m = clazz.getDeclaredMethod (方法名，XX.class):</p>\n</li>\n<li>\n<p>暴破：m.setAccessible (true);</p>\n</li>\n<li>\n<p>调用：m.invoke (o, 实参列表);</p>\n<blockquote>\n<p>注意：如果是静态方法，则 invoke 的参数 o，可以写成 null</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>accessible</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Accessible_Methods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> personPath <span class=\"token operator\">=</span> <span class=\"token string\">\"com.fengxin.basic.reflection.accessible.Person\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> person <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>personPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredConstructor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredMethod <span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 暴破</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        method<span class=\"token punctuation\">.</span>setAccessible <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//m.invoke (o, 实参列表);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        method<span class=\"token punctuation\">.</span>invoke <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"constructer\"><a class=\"anchor\" href=\"#constructer\">#</a> Constructer</h4>\n<ul>\n<li>\n<p>调用类中的 public 修饰的无参构造器</p>\n</li>\n<li>\n<p>调用类中的指定构造器</p>\n</li>\n<li>\n<p>getDeclaredConstructor ().newInstance ()：调用类中的无参构造器，获取对应类的对象</p>\n</li>\n<li>\n<p>getConstructor (Class..clazz）：根据参数列表，获取对应的 public 构造器对象</p>\n</li>\n<li>\n<p>getDecalaredConstructor (Class...clazz)：根据参数列表，获取对应的构造器对象 (没有访问权限限制)</p>\n</li>\n<li>\n<p>暴破：setAccessible (true);</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fengxin<span class=\"token punctuation\">.</span>basic<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>accessible</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author FENGXIN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Accessible_Constructor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> personPath <span class=\"token operator\">=</span> <span class=\"token string\">\"com.fengxin.basic.reflection.accessible.Person\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> person <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>forName <span class=\"token punctuation\">(</span>personPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 默认构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj1 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredConstructor <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 公有带参数构造函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> constructor1 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getConstructor <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj2 <span class=\"token operator\">=</span> constructor1<span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 私有带参构造函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> constructor2 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>getDeclaredConstructor <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 暴破</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        constructor2<span class=\"token punctuation\">.</span>setAccessible <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj3 <span class=\"token operator\">=</span> constructor2<span class=\"token punctuation\">.</span>newInstance <span class=\"token punctuation\">(</span><span class=\"token string\">\"fengxin\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "Java",
                "JavaSE",
                "Java"
            ]
        }
    ]
}